
Encoder_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001864  08001864  00011864  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001890  08001890  00011890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001894  08001894  00011894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000009c  2000000c  080018a4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000a8  080018a4  000200a8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000130d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025bd  00000000  00000000  00033111  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005a46  00000000  00000000  000356ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000880  00000000  00000000  0003b118  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a50  00000000  00000000  0003b998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a13  00000000  00000000  0003c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000035b0  00000000  00000000  00040dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000443ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018ac  00000000  00000000  00044428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800184c 	.word	0x0800184c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800184c 	.word	0x0800184c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_InitTick+0x3c>)
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x40>)
{
 80004ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f6:	6810      	ldr	r0, [r2, #0]
 80004f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004fc:	f000 f894 	bl	8000628 <HAL_SYSTICK_Config>
 8000500:	4604      	mov	r4, r0
 8000502:	b958      	cbnz	r0, 800051c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000504:	2d0f      	cmp	r5, #15
 8000506:	d809      	bhi.n	800051c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	4602      	mov	r2, r0
 800050a:	4629      	mov	r1, r5
 800050c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000510:	f000 f84a 	bl	80005a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_InitTick+0x44>)
 8000516:	4620      	mov	r0, r4
 8000518:	601d      	str	r5, [r3, #0]
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051e:	bd38      	pop	{r3, r4, r5, pc}
 8000520:	20000008 	.word	0x20000008
 8000524:	20000000 	.word	0x20000000
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_Init>:
{
 800052c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_Init+0x30>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f81b 	bl	8000584 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ffc8 	bl	80004e4 <HAL_InitTick>
  HAL_MspInit();
 8000554:	f000 fff2 	bl	800153c <HAL_MspInit>
}
 8000558:	2000      	movs	r0, #0
 800055a:	bd08      	pop	{r3, pc}
 800055c:	40023c00 	.word	0x40023c00

08000560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x10>)
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_IncTick+0x14>)
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	440b      	add	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <HAL_GetTick+0x8>)
 800057a:	6818      	ldr	r0, [r3, #0]
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000028 	.word	0x20000028

08000584 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000586:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000588:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800058c:	041b      	lsls	r3, r3, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000594:	0200      	lsls	r0, r0, #8
 8000596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005a0:	60d3      	str	r3, [r2, #12]
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	68dc      	ldr	r4, [r3, #12]
 80005ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	bf28      	it	cs
 80005bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c0:	f04f 0501 	mov.w	r5, #1
 80005c4:	fa05 f303 	lsl.w	r3, r5, r3
 80005c8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005cc:	bf8c      	ite	hi
 80005ce:	3c03      	subhi	r4, #3
 80005d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d2:	4019      	ands	r1, r3
 80005d4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d6:	fa05 f404 	lsl.w	r4, r5, r4
 80005da:	3c01      	subs	r4, #1
 80005dc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	ea42 0201 	orr.w	r2, r2, r1
 80005e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	bfaf      	iteee	ge
 80005ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	f000 000f 	andlt.w	r0, r0, #15
 80005f2:	4b06      	ldrlt	r3, [pc, #24]	; (800060c <HAL_NVIC_SetPriority+0x64>)
 80005f4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	bfa5      	ittet	ge
 80005f8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005fc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	e000ed14 	.word	0xe000ed14

08000610 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000610:	0942      	lsrs	r2, r0, #5
 8000612:	2301      	movs	r3, #1
 8000614:	f000 001f 	and.w	r0, r0, #31
 8000618:	fa03 f000 	lsl.w	r0, r3, r0
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_NVIC_EnableIRQ+0x14>)
 800061e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100

08000628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000628:	3801      	subs	r0, #1
 800062a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062e:	d20a      	bcs.n	8000646 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000634:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	21f0      	movs	r1, #240	; 0xf0
 8000638:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000640:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000646:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e010 	.word	0xe000e010
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000658:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80007fc <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000660:	4a64      	ldr	r2, [pc, #400]	; (80007f4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000662:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000664:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000668:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800066c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000670:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000674:	42b7      	cmp	r7, r6
 8000676:	f040 80ad 	bne.w	80007d4 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800067a:	684c      	ldr	r4, [r1, #4]
 800067c:	f024 0a10 	bic.w	sl, r4, #16
 8000680:	f1ba 0f02 	cmp.w	sl, #2
 8000684:	d116      	bne.n	80006b4 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000686:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800068a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800068e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000692:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000696:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800069a:	f04f 0e0f 	mov.w	lr, #15
 800069e:	fa0e fe0b 	lsl.w	lr, lr, fp
 80006a2:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006a6:	690d      	ldr	r5, [r1, #16]
 80006a8:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ac:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80006b0:	f8cc 5020 	str.w	r5, [ip, #32]
 80006b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006ba:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006be:	fa05 f50c 	lsl.w	r5, r5, ip
 80006c2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006cc:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d4:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d8:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006dc:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80006de:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e2:	d815      	bhi.n	8000710 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80006e4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006e8:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006ec:	68cd      	ldr	r5, [r1, #12]
 80006ee:	fa05 fa0c 	lsl.w	sl, r5, ip
 80006f2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80006f6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80006fa:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006fe:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000702:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000706:	fa0e fe03 	lsl.w	lr, lr, r3
 800070a:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 800070e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000710:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000712:	9d00      	ldr	r5, [sp, #0]
 8000714:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000716:	688f      	ldr	r7, [r1, #8]
 8000718:	fa07 f70c 	lsl.w	r7, r7, ip
 800071c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800071e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000720:	00e5      	lsls	r5, r4, #3
 8000722:	d557      	bpl.n	80007d4 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000724:	f04f 0b00 	mov.w	fp, #0
 8000728:	f8cd b00c 	str.w	fp, [sp, #12]
 800072c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000730:	4d31      	ldr	r5, [pc, #196]	; (80007f8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000736:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800073a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800073e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000742:	9703      	str	r7, [sp, #12]
 8000744:	9f03      	ldr	r7, [sp, #12]
 8000746:	f023 0703 	bic.w	r7, r3, #3
 800074a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800074e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000752:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000756:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800075a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800075e:	f04f 0e0f 	mov.w	lr, #15
 8000762:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000766:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000768:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076c:	d039      	beq.n	80007e2 <HAL_GPIO_Init+0x18e>
 800076e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000772:	42a8      	cmp	r0, r5
 8000774:	d037      	beq.n	80007e6 <HAL_GPIO_Init+0x192>
 8000776:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077a:	42a8      	cmp	r0, r5
 800077c:	d035      	beq.n	80007ea <HAL_GPIO_Init+0x196>
 800077e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000782:	42a8      	cmp	r0, r5
 8000784:	d033      	beq.n	80007ee <HAL_GPIO_Init+0x19a>
 8000786:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078a:	42a8      	cmp	r0, r5
 800078c:	bf14      	ite	ne
 800078e:	2507      	movne	r5, #7
 8000790:	2504      	moveq	r5, #4
 8000792:	fa05 f50c 	lsl.w	r5, r5, ip
 8000796:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800079a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800079c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800079e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007a4:	bf0c      	ite	eq
 80007a6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007a8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007aa:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007ac:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007b2:	bf0c      	ite	eq
 80007b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007b6:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007b8:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ba:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007bc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007c0:	bf0c      	ite	eq
 80007c2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007c6:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007c8:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ca:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007cc:	bf54      	ite	pl
 80007ce:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007d0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007d2:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d4:	3301      	adds	r3, #1
 80007d6:	2b10      	cmp	r3, #16
 80007d8:	f47f af47 	bne.w	800066a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007dc:	b005      	add	sp, #20
 80007de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e2:	465d      	mov	r5, fp
 80007e4:	e7d5      	b.n	8000792 <HAL_GPIO_Init+0x13e>
 80007e6:	2501      	movs	r5, #1
 80007e8:	e7d3      	b.n	8000792 <HAL_GPIO_Init+0x13e>
 80007ea:	2502      	movs	r5, #2
 80007ec:	e7d1      	b.n	8000792 <HAL_GPIO_Init+0x13e>
 80007ee:	2503      	movs	r5, #3
 80007f0:	e7cf      	b.n	8000792 <HAL_GPIO_Init+0x13e>
 80007f2:	bf00      	nop
 80007f4:	40013c00 	.word	0x40013c00
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000800:	b10a      	cbz	r2, 8000806 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000802:	6181      	str	r1, [r0, #24]
 8000804:	4770      	bx	lr
 8000806:	0409      	lsls	r1, r1, #16
 8000808:	e7fb      	b.n	8000802 <HAL_GPIO_WritePin+0x2>
	...

0800080c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800080c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000810:	4604      	mov	r4, r0
 8000812:	b918      	cbnz	r0, 800081c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000814:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000816:	b002      	add	sp, #8
 8000818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	07dd      	lsls	r5, r3, #31
 8000820:	d410      	bmi.n	8000844 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	0798      	lsls	r0, r3, #30
 8000826:	d458      	bmi.n	80008da <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	071a      	lsls	r2, r3, #28
 800082c:	f100 809a 	bmi.w	8000964 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	075b      	lsls	r3, r3, #29
 8000834:	f100 80b8 	bmi.w	80009a8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000838:	69a2      	ldr	r2, [r4, #24]
 800083a:	2a00      	cmp	r2, #0
 800083c:	f040 8119 	bne.w	8000a72 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000840:	2000      	movs	r0, #0
 8000842:	e7e8      	b.n	8000816 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000844:	4ba6      	ldr	r3, [pc, #664]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 8000846:	689a      	ldr	r2, [r3, #8]
 8000848:	f002 020c 	and.w	r2, r2, #12
 800084c:	2a04      	cmp	r2, #4
 800084e:	d007      	beq.n	8000860 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000856:	2a08      	cmp	r2, #8
 8000858:	d10a      	bne.n	8000870 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	0259      	lsls	r1, r3, #9
 800085e:	d507      	bpl.n	8000870 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000860:	4b9f      	ldr	r3, [pc, #636]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	039a      	lsls	r2, r3, #14
 8000866:	d5dc      	bpl.n	8000822 <HAL_RCC_OscConfig+0x16>
 8000868:	6863      	ldr	r3, [r4, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1d9      	bne.n	8000822 <HAL_RCC_OscConfig+0x16>
 800086e:	e7d1      	b.n	8000814 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000870:	6863      	ldr	r3, [r4, #4]
 8000872:	4d9b      	ldr	r5, [pc, #620]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 8000874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000878:	d111      	bne.n	800089e <HAL_RCC_OscConfig+0x92>
 800087a:	682b      	ldr	r3, [r5, #0]
 800087c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000880:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000882:	f7ff fe79 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000886:	4d96      	ldr	r5, [pc, #600]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000888:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088a:	682b      	ldr	r3, [r5, #0]
 800088c:	039b      	lsls	r3, r3, #14
 800088e:	d4c8      	bmi.n	8000822 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000890:	f7ff fe72 	bl	8000578 <HAL_GetTick>
 8000894:	1b80      	subs	r0, r0, r6
 8000896:	2864      	cmp	r0, #100	; 0x64
 8000898:	d9f7      	bls.n	800088a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800089a:	2003      	movs	r0, #3
 800089c:	e7bb      	b.n	8000816 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008a2:	d104      	bne.n	80008ae <HAL_RCC_OscConfig+0xa2>
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008aa:	602b      	str	r3, [r5, #0]
 80008ac:	e7e5      	b.n	800087a <HAL_RCC_OscConfig+0x6e>
 80008ae:	682a      	ldr	r2, [r5, #0]
 80008b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008b4:	602a      	str	r2, [r5, #0]
 80008b6:	682a      	ldr	r2, [r5, #0]
 80008b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008bc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1df      	bne.n	8000882 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80008c2:	f7ff fe59 	bl	8000578 <HAL_GetTick>
 80008c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	039f      	lsls	r7, r3, #14
 80008cc:	d5a9      	bpl.n	8000822 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ce:	f7ff fe53 	bl	8000578 <HAL_GetTick>
 80008d2:	1b80      	subs	r0, r0, r6
 80008d4:	2864      	cmp	r0, #100	; 0x64
 80008d6:	d9f7      	bls.n	80008c8 <HAL_RCC_OscConfig+0xbc>
 80008d8:	e7df      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008da:	4b81      	ldr	r3, [pc, #516]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	f012 0f0c 	tst.w	r2, #12
 80008e2:	d007      	beq.n	80008f4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ea:	2a08      	cmp	r2, #8
 80008ec:	d111      	bne.n	8000912 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	025e      	lsls	r6, r3, #9
 80008f2:	d40e      	bmi.n	8000912 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f4:	4b7a      	ldr	r3, [pc, #488]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	0795      	lsls	r5, r2, #30
 80008fa:	d502      	bpl.n	8000902 <HAL_RCC_OscConfig+0xf6>
 80008fc:	68e2      	ldr	r2, [r4, #12]
 80008fe:	2a01      	cmp	r2, #1
 8000900:	d188      	bne.n	8000814 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	6921      	ldr	r1, [r4, #16]
 8000906:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800090a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800090e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000910:	e78a      	b.n	8000828 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000912:	68e2      	ldr	r2, [r4, #12]
 8000914:	4b73      	ldr	r3, [pc, #460]	; (8000ae4 <HAL_RCC_OscConfig+0x2d8>)
 8000916:	b1b2      	cbz	r2, 8000946 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800091c:	f7ff fe2c 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000920:	4d6f      	ldr	r5, [pc, #444]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000922:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	0798      	lsls	r0, r3, #30
 8000928:	d507      	bpl.n	800093a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	6922      	ldr	r2, [r4, #16]
 800092e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000932:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000936:	602b      	str	r3, [r5, #0]
 8000938:	e776      	b.n	8000828 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093a:	f7ff fe1d 	bl	8000578 <HAL_GetTick>
 800093e:	1b80      	subs	r0, r0, r6
 8000940:	2802      	cmp	r0, #2
 8000942:	d9ef      	bls.n	8000924 <HAL_RCC_OscConfig+0x118>
 8000944:	e7a9      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000946:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000948:	f7ff fe16 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094c:	4d64      	ldr	r5, [pc, #400]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800094e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	0799      	lsls	r1, r3, #30
 8000954:	f57f af68 	bpl.w	8000828 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000958:	f7ff fe0e 	bl	8000578 <HAL_GetTick>
 800095c:	1b80      	subs	r0, r0, r6
 800095e:	2802      	cmp	r0, #2
 8000960:	d9f6      	bls.n	8000950 <HAL_RCC_OscConfig+0x144>
 8000962:	e79a      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000964:	6962      	ldr	r2, [r4, #20]
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_RCC_OscConfig+0x2dc>)
 8000968:	b17a      	cbz	r2, 800098a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800096e:	f7ff fe03 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000972:	4d5b      	ldr	r5, [pc, #364]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000974:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000976:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000978:	079f      	lsls	r7, r3, #30
 800097a:	f53f af59 	bmi.w	8000830 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800097e:	f7ff fdfb 	bl	8000578 <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2802      	cmp	r0, #2
 8000986:	d9f6      	bls.n	8000976 <HAL_RCC_OscConfig+0x16a>
 8000988:	e787      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800098a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800098c:	f7ff fdf4 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000990:	4d53      	ldr	r5, [pc, #332]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000992:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000994:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000996:	0798      	lsls	r0, r3, #30
 8000998:	f57f af4a 	bpl.w	8000830 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800099c:	f7ff fdec 	bl	8000578 <HAL_GetTick>
 80009a0:	1b80      	subs	r0, r0, r6
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d9f6      	bls.n	8000994 <HAL_RCC_OscConfig+0x188>
 80009a6:	e778      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009a8:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 80009aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ac:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009b0:	d128      	bne.n	8000a04 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	9201      	str	r2, [sp, #4]
 80009b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009c6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c8:	4d48      	ldr	r5, [pc, #288]	; (8000aec <HAL_RCC_OscConfig+0x2e0>)
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	05d9      	lsls	r1, r3, #23
 80009ce:	d51b      	bpl.n	8000a08 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d0:	68a3      	ldr	r3, [r4, #8]
 80009d2:	4d43      	ldr	r5, [pc, #268]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d127      	bne.n	8000a28 <HAL_RCC_OscConfig+0x21c>
 80009d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009e0:	f7ff fdca 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009e4:	4d3e      	ldr	r5, [pc, #248]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009e6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009e8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ee:	079b      	lsls	r3, r3, #30
 80009f0:	d539      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	f43f af20 	beq.w	8000838 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009f8:	4a39      	ldr	r2, [pc, #228]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 80009fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	e719      	b.n	8000838 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a04:	2600      	movs	r6, #0
 8000a06:	e7df      	b.n	80009c8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a10:	f7ff fdb2 	bl	8000578 <HAL_GetTick>
 8000a14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	05da      	lsls	r2, r3, #23
 8000a1a:	d4d9      	bmi.n	80009d0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a1c:	f7ff fdac 	bl	8000578 <HAL_GetTick>
 8000a20:	1bc0      	subs	r0, r0, r7
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9f7      	bls.n	8000a16 <HAL_RCC_OscConfig+0x20a>
 8000a26:	e738      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d104      	bne.n	8000a36 <HAL_RCC_OscConfig+0x22a>
 8000a2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	672b      	str	r3, [r5, #112]	; 0x70
 8000a34:	e7d0      	b.n	80009d8 <HAL_RCC_OscConfig+0x1cc>
 8000a36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a38:	f022 0201 	bic.w	r2, r2, #1
 8000a3c:	672a      	str	r2, [r5, #112]	; 0x70
 8000a3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a40:	f022 0204 	bic.w	r2, r2, #4
 8000a44:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1ca      	bne.n	80009e0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a4a:	f7ff fd95 	bl	8000578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a52:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a56:	0798      	lsls	r0, r3, #30
 8000a58:	d5cb      	bpl.n	80009f2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5a:	f7ff fd8d 	bl	8000578 <HAL_GetTick>
 8000a5e:	1bc0      	subs	r0, r0, r7
 8000a60:	4540      	cmp	r0, r8
 8000a62:	d9f7      	bls.n	8000a54 <HAL_RCC_OscConfig+0x248>
 8000a64:	e719      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a66:	f7ff fd87 	bl	8000578 <HAL_GetTick>
 8000a6a:	1bc0      	subs	r0, r0, r7
 8000a6c:	4540      	cmp	r0, r8
 8000a6e:	d9bd      	bls.n	80009ec <HAL_RCC_OscConfig+0x1e0>
 8000a70:	e713      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a72:	4d1b      	ldr	r5, [pc, #108]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
 8000a74:	68ab      	ldr	r3, [r5, #8]
 8000a76:	f003 030c 	and.w	r3, r3, #12
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	f43f aeca 	beq.w	8000814 <HAL_RCC_OscConfig+0x8>
 8000a80:	4e1b      	ldr	r6, [pc, #108]	; (8000af0 <HAL_RCC_OscConfig+0x2e4>)
 8000a82:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a84:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a86:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a88:	d134      	bne.n	8000af4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a8a:	f7ff fd75 	bl	8000578 <HAL_GetTick>
 8000a8e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	0199      	lsls	r1, r3, #6
 8000a94:	d41e      	bmi.n	8000ad4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a96:	6a22      	ldr	r2, [r4, #32]
 8000a98:	69e3      	ldr	r3, [r4, #28]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aa8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aaa:	4c0d      	ldr	r4, [pc, #52]	; (8000ae0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000aac:	0852      	lsrs	r2, r2, #1
 8000aae:	3a01      	subs	r2, #1
 8000ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ab4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000aba:	f7ff fd5d 	bl	8000578 <HAL_GetTick>
 8000abe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	019a      	lsls	r2, r3, #6
 8000ac4:	f53f aebc 	bmi.w	8000840 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac8:	f7ff fd56 	bl	8000578 <HAL_GetTick>
 8000acc:	1b40      	subs	r0, r0, r5
 8000ace:	2802      	cmp	r0, #2
 8000ad0:	d9f6      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x2b4>
 8000ad2:	e6e2      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad4:	f7ff fd50 	bl	8000578 <HAL_GetTick>
 8000ad8:	1bc0      	subs	r0, r0, r7
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9d8      	bls.n	8000a90 <HAL_RCC_OscConfig+0x284>
 8000ade:	e6dc      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	42470000 	.word	0x42470000
 8000ae8:	42470e80 	.word	0x42470e80
 8000aec:	40007000 	.word	0x40007000
 8000af0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000af4:	f7ff fd40 	bl	8000578 <HAL_GetTick>
 8000af8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	f57f ae9f 	bpl.w	8000840 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b02:	f7ff fd39 	bl	8000578 <HAL_GetTick>
 8000b06:	1b00      	subs	r0, r0, r4
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	d9f6      	bls.n	8000afa <HAL_RCC_OscConfig+0x2ee>
 8000b0c:	e6c5      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
 8000b0e:	bf00      	nop

08000b10 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b10:	4913      	ldr	r1, [pc, #76]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b14:	688b      	ldr	r3, [r1, #8]
 8000b16:	f003 030c 	and.w	r3, r3, #12
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d003      	beq.n	8000b26 <HAL_RCC_GetSysClockFreq+0x16>
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d003      	beq.n	8000b2a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b24:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b26:	4810      	ldr	r0, [pc, #64]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b28:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b2a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b2c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b30:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b34:	bf14      	ite	ne
 8000b36:	480c      	ldrne	r0, [pc, #48]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b38:	480a      	ldreq	r0, [pc, #40]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b3e:	bf18      	it	ne
 8000b40:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b46:	fba1 0100 	umull	r0, r1, r1, r0
 8000b4a:	f7ff fb43 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b56:	3301      	adds	r3, #1
 8000b58:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b5e:	bd08      	pop	{r3, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	00f42400 	.word	0x00f42400
 8000b68:	007a1200 	.word	0x007a1200

08000b6c <HAL_RCC_ClockConfig>:
{
 8000b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b70:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b72:	4604      	mov	r4, r0
 8000b74:	b910      	cbnz	r0, 8000b7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
 8000b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b7c:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <HAL_RCC_ClockConfig+0x124>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f002 020f 	and.w	r2, r2, #15
 8000b84:	428a      	cmp	r2, r1
 8000b86:	d328      	bcc.n	8000bda <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b88:	6821      	ldr	r1, [r4, #0]
 8000b8a:	078f      	lsls	r7, r1, #30
 8000b8c:	d42d      	bmi.n	8000bea <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b8e:	07c8      	lsls	r0, r1, #31
 8000b90:	d440      	bmi.n	8000c14 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b92:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <HAL_RCC_ClockConfig+0x124>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	f002 020f 	and.w	r2, r2, #15
 8000b9a:	4295      	cmp	r5, r2
 8000b9c:	d366      	bcc.n	8000c6c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b9e:	6822      	ldr	r2, [r4, #0]
 8000ba0:	0751      	lsls	r1, r2, #29
 8000ba2:	d46c      	bmi.n	8000c7e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ba4:	0713      	lsls	r3, r2, #28
 8000ba6:	d507      	bpl.n	8000bb8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ba8:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <HAL_RCC_ClockConfig+0x128>)
 8000baa:	6921      	ldr	r1, [r4, #16]
 8000bac:	6893      	ldr	r3, [r2, #8]
 8000bae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bb2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bb6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bb8:	f7ff ffaa 	bl	8000b10 <HAL_RCC_GetSysClockFreq>
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <HAL_RCC_ClockConfig+0x128>)
 8000bbe:	4a36      	ldr	r2, [pc, #216]	; (8000c98 <HAL_RCC_ClockConfig+0x12c>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bc6:	5cd3      	ldrb	r3, [r2, r3]
 8000bc8:	40d8      	lsrs	r0, r3
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <HAL_RCC_ClockConfig+0x130>)
 8000bcc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fc88 	bl	80004e4 <HAL_InitTick>
  return HAL_OK;
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bda:	b2ca      	uxtb	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d1c6      	bne.n	8000b76 <HAL_RCC_ClockConfig+0xa>
 8000be8:	e7ce      	b.n	8000b88 <HAL_RCC_ClockConfig+0x1c>
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bec:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	689a      	ldrne	r2, [r3, #8]
 8000bf4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bf8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bfa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bfc:	bf42      	ittt	mi
 8000bfe:	689a      	ldrmi	r2, [r3, #8]
 8000c00:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c04:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	68a0      	ldr	r0, [r4, #8]
 8000c0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c0e:	4302      	orrs	r2, r0
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	e7bc      	b.n	8000b8e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c14:	6862      	ldr	r2, [r4, #4]
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_RCC_ClockConfig+0x128>)
 8000c18:	2a01      	cmp	r2, #1
 8000c1a:	d11d      	bne.n	8000c58 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c22:	d0a8      	beq.n	8000b76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c24:	4e1b      	ldr	r6, [pc, #108]	; (8000c94 <HAL_RCC_ClockConfig+0x128>)
 8000c26:	68b3      	ldr	r3, [r6, #8]
 8000c28:	f023 0303 	bic.w	r3, r3, #3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c30:	f7ff fca2 	bl	8000578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c34:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c38:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c3a:	68b3      	ldr	r3, [r6, #8]
 8000c3c:	6862      	ldr	r2, [r4, #4]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c46:	d0a4      	beq.n	8000b92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c48:	f7ff fc96 	bl	8000578 <HAL_GetTick>
 8000c4c:	1bc0      	subs	r0, r0, r7
 8000c4e:	4540      	cmp	r0, r8
 8000c50:	d9f3      	bls.n	8000c3a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c52:	2003      	movs	r0, #3
}
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c58:	1e91      	subs	r1, r2, #2
 8000c5a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c5c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c5e:	d802      	bhi.n	8000c66 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c64:	e7dd      	b.n	8000c22 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c66:	f013 0f02 	tst.w	r3, #2
 8000c6a:	e7da      	b.n	8000c22 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c6c:	b2ea      	uxtb	r2, r5
 8000c6e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	429d      	cmp	r5, r3
 8000c78:	f47f af7d 	bne.w	8000b76 <HAL_RCC_ClockConfig+0xa>
 8000c7c:	e78f      	b.n	8000b9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c7e:	4905      	ldr	r1, [pc, #20]	; (8000c94 <HAL_RCC_ClockConfig+0x128>)
 8000c80:	68e0      	ldr	r0, [r4, #12]
 8000c82:	688b      	ldr	r3, [r1, #8]
 8000c84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c88:	4303      	orrs	r3, r0
 8000c8a:	608b      	str	r3, [r1, #8]
 8000c8c:	e78a      	b.n	8000ba4 <HAL_RCC_ClockConfig+0x38>
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	0800186e 	.word	0x0800186e
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cae:	6810      	ldr	r0, [r2, #0]
}
 8000cb0:	40d8      	lsrs	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	0800187e 	.word	0x0800187e
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cce:	6810      	ldr	r0, [r2, #0]
}
 8000cd0:	40d8      	lsrs	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	0800187e 	.word	0x0800187e
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000ce0:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8000ce2:	b189      	cbz	r1, 8000d08 <HAL_TIM_Encoder_Start+0x28>
 8000ce4:	2904      	cmp	r1, #4
 8000ce6:	d007      	beq.n	8000cf8 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000ce8:	6a1a      	ldr	r2, [r3, #32]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000cf8:	6a1a      	ldr	r2, [r3, #32]
 8000cfa:	f022 0210 	bic.w	r2, r2, #16
 8000cfe:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	f042 0210 	orr.w	r2, r2, #16
 8000d06:	e006      	b.n	8000d16 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8000d08:	6a1a      	ldr	r2, [r3, #32]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000d10:	6a1a      	ldr	r2, [r3, #32]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	2000      	movs	r0, #0
 8000d22:	4770      	bx	lr

08000d24 <HAL_TIM_PeriodElapsedCallback>:
 8000d24:	4770      	bx	lr

08000d26 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d26:	4770      	bx	lr

08000d28 <HAL_TIM_IC_CaptureCallback>:
 8000d28:	4770      	bx	lr

08000d2a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d2a:	4770      	bx	lr

08000d2c <HAL_TIM_TriggerCallback>:
 8000d2c:	4770      	bx	lr

08000d2e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d2e:	6803      	ldr	r3, [r0, #0]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	0791      	lsls	r1, r2, #30
{
 8000d34:	b510      	push	{r4, lr}
 8000d36:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d38:	d50e      	bpl.n	8000d58 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	0792      	lsls	r2, r2, #30
 8000d3e:	d50b      	bpl.n	8000d58 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d40:	f06f 0202 	mvn.w	r2, #2
 8000d44:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d46:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d48:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d4a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d4c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d4e:	d077      	beq.n	8000e40 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000d50:	f7ff ffea 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d54:	2300      	movs	r3, #0
 8000d56:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	0750      	lsls	r0, r2, #29
 8000d5e:	d510      	bpl.n	8000d82 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	0751      	lsls	r1, r2, #29
 8000d64:	d50d      	bpl.n	8000d82 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d66:	f06f 0204 	mvn.w	r2, #4
 8000d6a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d6c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d6e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d70:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d74:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000d76:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d78:	d068      	beq.n	8000e4c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d7a:	f7ff ffd5 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	0712      	lsls	r2, r2, #28
 8000d88:	d50f      	bpl.n	8000daa <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	0710      	lsls	r0, r2, #28
 8000d8e:	d50c      	bpl.n	8000daa <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d90:	f06f 0208 	mvn.w	r2, #8
 8000d94:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d98:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d9a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d9c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000d9e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000da0:	d05a      	beq.n	8000e58 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000da2:	f7ff ffc1 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000da6:	2300      	movs	r3, #0
 8000da8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	06d2      	lsls	r2, r2, #27
 8000db0:	d510      	bpl.n	8000dd4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	06d0      	lsls	r0, r2, #27
 8000db6:	d50d      	bpl.n	8000dd4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000db8:	f06f 0210 	mvn.w	r2, #16
 8000dbc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dbe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dc0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dc2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dc6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000dc8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dca:	d04b      	beq.n	8000e64 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dcc:	f7ff ffac 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	07d1      	lsls	r1, r2, #31
 8000dda:	d508      	bpl.n	8000dee <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	07d2      	lsls	r2, r2, #31
 8000de0:	d505      	bpl.n	8000dee <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000de2:	f06f 0201 	mvn.w	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff ff9b 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	0610      	lsls	r0, r2, #24
 8000df4:	d508      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	0611      	lsls	r1, r2, #24
 8000dfa:	d505      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e02:	4620      	mov	r0, r4
 8000e04:	f000 f8ee 	bl	8000fe4 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	0652      	lsls	r2, r2, #25
 8000e0e:	d508      	bpl.n	8000e22 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	0650      	lsls	r0, r2, #25
 8000e14:	d505      	bpl.n	8000e22 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff ff85 	bl	8000d2c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	0691      	lsls	r1, r2, #26
 8000e28:	d522      	bpl.n	8000e70 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	0692      	lsls	r2, r2, #26
 8000e2e:	d51f      	bpl.n	8000e70 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e30:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e34:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e36:	611a      	str	r2, [r3, #16]
}
 8000e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e3c:	f000 b8d1 	b.w	8000fe2 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e40:	f7ff ff71 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff ff70 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e4a:	e783      	b.n	8000d54 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e4c:	f7ff ff6b 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e50:	4620      	mov	r0, r4
 8000e52:	f7ff ff6a 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e56:	e792      	b.n	8000d7e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e58:	f7ff ff65 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff ff64 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e62:	e7a0      	b.n	8000da6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e64:	f7ff ff5f 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff ff5e 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e6e:	e7af      	b.n	8000dd0 <HAL_TIM_IRQHandler+0xa2>
 8000e70:	bd10      	pop	{r4, pc}
	...

08000e74 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e74:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8000e76:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d00e      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e80:	d00b      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e82:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d007      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e8e:	4290      	cmp	r0, r2
 8000e90:	d003      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d119      	bne.n	8000ece <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8000e9a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ea0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ea2:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <TIM_Base_SetConfig+0x8c>)
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d104      	bne.n	8000eb2 <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ea8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	e018      	b.n	8000ee4 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000eb2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eb6:	d0f7      	beq.n	8000ea8 <TIM_Base_SetConfig+0x34>
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <TIM_Base_SetConfig+0x90>)
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d0f4      	beq.n	8000ea8 <TIM_Base_SetConfig+0x34>
 8000ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d0f0      	beq.n	8000ea8 <TIM_Base_SetConfig+0x34>
 8000ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d0ec      	beq.n	8000ea8 <TIM_Base_SetConfig+0x34>
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <TIM_Base_SetConfig+0x94>)
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d0e9      	beq.n	8000ea8 <TIM_Base_SetConfig+0x34>
 8000ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	d0e5      	beq.n	8000ea8 <TIM_Base_SetConfig+0x34>
 8000edc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d0e1      	beq.n	8000ea8 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 8000ee4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ee6:	688b      	ldr	r3, [r1, #8]
 8000ee8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000eea:	680b      	ldr	r3, [r1, #0]
 8000eec:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <TIM_Base_SetConfig+0x8c>)
 8000ef0:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000ef2:	bf04      	itt	eq
 8000ef4:	690b      	ldreq	r3, [r1, #16]
 8000ef6:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	6143      	str	r3, [r0, #20]
}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40010000 	.word	0x40010000
 8000f04:	40000400 	.word	0x40000400
 8000f08:	40014000 	.word	0x40014000

08000f0c <HAL_TIM_Encoder_Init>:
{
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	460c      	mov	r4, r1
  if(htim == NULL)
 8000f10:	4605      	mov	r5, r0
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d041      	beq.n	8000f9a <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f1e:	b91b      	cbnz	r3, 8000f28 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8000f20:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8000f24:	f000 fb96 	bl	8001654 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f28:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8000f2a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f2c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8000f30:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f34:	6883      	ldr	r3, [r0, #8]
 8000f36:	f023 0307 	bic.w	r3, r3, #7
 8000f3a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8000f3c:	f7ff ff9a 	bl	8000e74 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8000f40:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8000f42:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000f44:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8000f46:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000f48:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8000f4a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8000f4c:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000f4e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8000f50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f54:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000f58:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8000f5c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8000f5e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000f62:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8000f64:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f6c:	68e1      	ldr	r1, [r4, #12]
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8000f72:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000f76:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8000f7a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f7c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8000f7e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f82:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8000f84:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f86:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8000f8a:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000f8c:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 8000f8e:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8000f90:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8000f92:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8000f96:	2000      	movs	r0, #0
 8000f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
}
 8000f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f9e <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000f9e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fa2:	2b01      	cmp	r3, #1
{
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000faa:	d018      	beq.n	8000fde <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000fac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fb0:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000fb2:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fb4:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fb6:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fbc:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4322      	orrs	r2, r4
 8000fc2:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fca:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000fde:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000fe0:	bd10      	pop	{r4, pc}

08000fe2 <HAL_TIMEx_CommutationCallback>:
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	4770      	bx	lr
	...

08000fe8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000fec:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000fee:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000ff0:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ff2:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ff4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ff8:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000ffa:	6133      	str	r3, [r6, #16]
{
 8000ffc:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ffe:	6883      	ldr	r3, [r0, #8]
 8001000:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001002:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001004:	4303      	orrs	r3, r0
 8001006:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001008:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800100c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800100e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001012:	430b      	orrs	r3, r1
 8001014:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001016:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001018:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800101a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800101c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001020:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001022:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001026:	6173      	str	r3, [r6, #20]
 8001028:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800102a:	d17c      	bne.n	8001126 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800102c:	429e      	cmp	r6, r3
 800102e:	d003      	beq.n	8001038 <UART_SetConfig+0x50>
 8001030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001034:	429e      	cmp	r6, r3
 8001036:	d144      	bne.n	80010c2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001038:	f7ff fe42 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 800103c:	2519      	movs	r5, #25
 800103e:	fb05 f300 	mul.w	r3, r5, r0
 8001042:	6860      	ldr	r0, [r4, #4]
 8001044:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001048:	0040      	lsls	r0, r0, #1
 800104a:	fbb3 f3f0 	udiv	r3, r3, r0
 800104e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001056:	f7ff fe33 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 800105a:	6863      	ldr	r3, [r4, #4]
 800105c:	4368      	muls	r0, r5
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fbb0 f7f3 	udiv	r7, r0, r3
 8001064:	f7ff fe2c 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8001068:	6863      	ldr	r3, [r4, #4]
 800106a:	4368      	muls	r0, r5
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001072:	fbb3 f3f9 	udiv	r3, r3, r9
 8001076:	fb09 7313 	mls	r3, r9, r3, r7
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	3332      	adds	r3, #50	; 0x32
 800107e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001088:	f7ff fe1a 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 800108c:	6862      	ldr	r2, [r4, #4]
 800108e:	4368      	muls	r0, r5
 8001090:	0052      	lsls	r2, r2, #1
 8001092:	fbb0 faf2 	udiv	sl, r0, r2
 8001096:	f7ff fe13 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800109a:	6863      	ldr	r3, [r4, #4]
 800109c:	4368      	muls	r0, r5
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80010a8:	fb09 a313 	mls	r3, r9, r3, sl
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010ba:	443b      	add	r3, r7
 80010bc:	60b3      	str	r3, [r6, #8]
 80010be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010c2:	f7ff fded 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 80010c6:	2519      	movs	r5, #25
 80010c8:	fb05 f300 	mul.w	r3, r5, r0
 80010cc:	6860      	ldr	r0, [r4, #4]
 80010ce:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010d2:	0040      	lsls	r0, r0, #1
 80010d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80010d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80010dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80010e0:	f7ff fdde 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	4368      	muls	r0, r5
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fbb0 f7f3 	udiv	r7, r0, r3
 80010ee:	f7ff fdd7 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 80010f2:	6863      	ldr	r3, [r4, #4]
 80010f4:	4368      	muls	r0, r5
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80010fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001100:	fb09 7313 	mls	r3, r9, r3, r7
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	3332      	adds	r3, #50	; 0x32
 8001108:	fbb3 f3f9 	udiv	r3, r3, r9
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001112:	f7ff fdc5 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	4368      	muls	r0, r5
 800111a:	0052      	lsls	r2, r2, #1
 800111c:	fbb0 faf2 	udiv	sl, r0, r2
 8001120:	f7ff fdbe 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8001124:	e7b9      	b.n	800109a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001126:	429e      	cmp	r6, r3
 8001128:	d002      	beq.n	8001130 <UART_SetConfig+0x148>
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <UART_SetConfig+0x230>)
 800112c:	429e      	cmp	r6, r3
 800112e:	d140      	bne.n	80011b2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001130:	f7ff fdc6 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8001134:	6867      	ldr	r7, [r4, #4]
 8001136:	2519      	movs	r5, #25
 8001138:	f04f 0964 	mov.w	r9, #100	; 0x64
 800113c:	fb05 f300 	mul.w	r3, r5, r0
 8001140:	00bf      	lsls	r7, r7, #2
 8001142:	fbb3 f3f7 	udiv	r3, r3, r7
 8001146:	fbb3 f3f9 	udiv	r3, r3, r9
 800114a:	011f      	lsls	r7, r3, #4
 800114c:	f7ff fdb8 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	4368      	muls	r0, r5
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fbb0 f8f3 	udiv	r8, r0, r3
 800115a:	f7ff fdb1 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	4368      	muls	r0, r5
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	fbb0 f3f3 	udiv	r3, r0, r3
 8001168:	fbb3 f3f9 	udiv	r3, r3, r9
 800116c:	fb09 8313 	mls	r3, r9, r3, r8
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	3332      	adds	r3, #50	; 0x32
 8001174:	fbb3 f3f9 	udiv	r3, r3, r9
 8001178:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800117c:	f7ff fda0 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
 8001180:	6862      	ldr	r2, [r4, #4]
 8001182:	4368      	muls	r0, r5
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	fbb0 faf2 	udiv	sl, r0, r2
 800118a:	f7ff fd99 	bl	8000cc0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800118e:	6863      	ldr	r3, [r4, #4]
 8001190:	4368      	muls	r0, r5
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fbb0 f3f3 	udiv	r3, r0, r3
 8001198:	fbb3 f3f9 	udiv	r3, r3, r9
 800119c:	fb09 a313 	mls	r3, r9, r3, sl
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	3332      	adds	r3, #50	; 0x32
 80011a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	ea43 0308 	orr.w	r3, r3, r8
 80011b0:	e783      	b.n	80010ba <UART_SetConfig+0xd2>
 80011b2:	f7ff fd75 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 80011b6:	6867      	ldr	r7, [r4, #4]
 80011b8:	2519      	movs	r5, #25
 80011ba:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011be:	fb05 f300 	mul.w	r3, r5, r0
 80011c2:	00bf      	lsls	r7, r7, #2
 80011c4:	fbb3 f3f7 	udiv	r3, r3, r7
 80011c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80011cc:	011f      	lsls	r7, r3, #4
 80011ce:	f7ff fd67 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 80011d2:	6863      	ldr	r3, [r4, #4]
 80011d4:	4368      	muls	r0, r5
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fbb0 f8f3 	udiv	r8, r0, r3
 80011dc:	f7ff fd60 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 80011e0:	6863      	ldr	r3, [r4, #4]
 80011e2:	4368      	muls	r0, r5
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ea:	fbb3 f3f9 	udiv	r3, r3, r9
 80011ee:	fb09 8313 	mls	r3, r9, r3, r8
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	3332      	adds	r3, #50	; 0x32
 80011f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80011fa:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80011fe:	f7ff fd4f 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8001202:	6862      	ldr	r2, [r4, #4]
 8001204:	4368      	muls	r0, r5
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	fbb0 faf2 	udiv	sl, r0, r2
 800120c:	f7ff fd48 	bl	8000ca0 <HAL_RCC_GetPCLK1Freq>
 8001210:	e7bd      	b.n	800118e <UART_SetConfig+0x1a6>
 8001212:	bf00      	nop
 8001214:	40011000 	.word	0x40011000
 8001218:	40011400 	.word	0x40011400

0800121c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	460e      	mov	r6, r1
 8001222:	4617      	mov	r7, r2
 8001224:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001226:	6821      	ldr	r1, [r4, #0]
 8001228:	680b      	ldr	r3, [r1, #0]
 800122a:	ea36 0303 	bics.w	r3, r6, r3
 800122e:	d101      	bne.n	8001234 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001230:	2000      	movs	r0, #0
}
 8001232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001234:	1c6b      	adds	r3, r5, #1
 8001236:	d0f7      	beq.n	8001228 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001238:	b995      	cbnz	r5, 8001260 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001242:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800124c:	2320      	movs	r3, #32
 800124e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001252:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001256:	2300      	movs	r3, #0
 8001258:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800125c:	2003      	movs	r0, #3
 800125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001260:	f7ff f98a 	bl	8000578 <HAL_GetTick>
 8001264:	1bc0      	subs	r0, r0, r7
 8001266:	4285      	cmp	r5, r0
 8001268:	d2dd      	bcs.n	8001226 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800126a:	e7e6      	b.n	800123a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800126c <HAL_UART_Init>:
{
 800126c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800126e:	4604      	mov	r4, r0
 8001270:	b340      	cbz	r0, 80012c4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001272:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001276:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800127a:	b91b      	cbnz	r3, 8001284 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800127c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001280:	f000 fa5a 	bl	8001738 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001284:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001286:	2324      	movs	r3, #36	; 0x24
 8001288:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800128c:	68d3      	ldr	r3, [r2, #12]
 800128e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001292:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff fea7 	bl	8000fe8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012aa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012b4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80012b6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012b8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80012ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80012be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80012c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
}
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <HAL_UART_Transmit>:
{
 80012c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012cc:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80012ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012d2:	2b20      	cmp	r3, #32
{
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80012da:	d14f      	bne.n	800137c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80012dc:	2900      	cmp	r1, #0
 80012de:	d04a      	beq.n	8001376 <HAL_UART_Transmit+0xae>
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d048      	beq.n	8001376 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80012e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d047      	beq.n	800137c <HAL_UART_Transmit+0xb4>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012f6:	2321      	movs	r3, #33	; 0x21
 80012f8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80012fc:	f7ff f93c 	bl	8000578 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001300:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001304:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001306:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800130a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800130c:	b29b      	uxth	r3, r3
 800130e:	b96b      	cbnz	r3, 800132c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4632      	mov	r2, r6
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff ff80 	bl	800121c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800131c:	b9b0      	cbnz	r0, 800134c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800131e:	2320      	movs	r3, #32
 8001320:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001324:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800132c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800132e:	3b01      	subs	r3, #1
 8001330:	b29b      	uxth	r3, r3
 8001332:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001334:	68a3      	ldr	r3, [r4, #8]
 8001336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800133a:	4632      	mov	r2, r6
 800133c:	463b      	mov	r3, r7
 800133e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001342:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001344:	d10e      	bne.n	8001364 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001346:	f7ff ff69 	bl	800121c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800134a:	b110      	cbz	r0, 8001352 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 800134c:	2003      	movs	r0, #3
 800134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001352:	882b      	ldrh	r3, [r5, #0]
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800135a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800135c:	6923      	ldr	r3, [r4, #16]
 800135e:	b943      	cbnz	r3, 8001372 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001360:	3502      	adds	r5, #2
 8001362:	e7d2      	b.n	800130a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001364:	f7ff ff5a 	bl	800121c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001368:	2800      	cmp	r0, #0
 800136a:	d1ef      	bne.n	800134c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	782a      	ldrb	r2, [r5, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	3501      	adds	r5, #1
 8001374:	e7c9      	b.n	800130a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001376:	2001      	movs	r0, #1
 8001378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800137c:	2002      	movs	r0, #2
}
 800137e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001384 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001384:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	2214      	movs	r2, #20
{
 8001388:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	eb0d 0002 	add.w	r0, sp, r2
 800138e:	2100      	movs	r1, #0
 8001390:	f000 fa54 	bl	800183c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	2400      	movs	r4, #0
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_GPIO_Init+0x9c>)
 8001398:	9401      	str	r4, [sp, #4]
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139c:	4d21      	ldr	r5, [pc, #132]	; (8001424 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	f042 0204 	orr.w	r2, r2, #4
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
 80013a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a6:	f002 0204 	and.w	r2, r2, #4
 80013aa:	9201      	str	r2, [sp, #4]
 80013ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	9402      	str	r4, [sp, #8]
 80013b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013be:	9202      	str	r2, [sp, #8]
 80013c0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	9403      	str	r4, [sp, #12]
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ce:	f002 0201 	and.w	r2, r2, #1
 80013d2:	9203      	str	r2, [sp, #12]
 80013d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	9404      	str	r4, [sp, #16]
 80013d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013e6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ea:	4628      	mov	r0, r5
 80013ec:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f0:	f7ff fa06 	bl	8000800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_GPIO_Init+0xa4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001400:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001404:	f7ff f926 	bl	8000654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001408:	2320      	movs	r3, #32
 800140a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800140c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001410:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001418:	f7ff f91c 	bl	8000654 <HAL_GPIO_Init>

}
 800141c:	b00b      	add	sp, #44	; 0x2c
 800141e:	bd30      	pop	{r4, r5, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000
 8001428:	10210000 	.word	0x10210000
 800142c:	40020800 	.word	0x40020800

08001430 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001430:	b530      	push	{r4, r5, lr}
 8001432:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001434:	2230      	movs	r2, #48	; 0x30
 8001436:	2100      	movs	r1, #0
 8001438:	a808      	add	r0, sp, #32
 800143a:	f000 f9ff 	bl	800183c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800143e:	2100      	movs	r1, #0
 8001440:	2214      	movs	r2, #20
 8001442:	a803      	add	r0, sp, #12
 8001444:	f000 f9fa 	bl	800183c <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8001448:	2400      	movs	r4, #0
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <SystemClock_Config+0x8c>)
 800144c:	9401      	str	r4, [sp, #4]
 800144e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001450:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <SystemClock_Config+0x90>)
	__HAL_RCC_PWR_CLK_ENABLE()
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001462:	9402      	str	r4, [sp, #8]
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800146a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	6813      	ldr	r3, [r2, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001472:	940f      	str	r4, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001480:	2310      	movs	r3, #16
 8001482:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001484:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001486:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800148a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800148c:	2304      	movs	r3, #4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148e:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001490:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001492:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001494:	2307      	movs	r3, #7
 8001496:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001498:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	950e      	str	r5, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800149c:	f7ff f9b6 	bl	800080c <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014a4:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014aa:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b0:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b2:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014b4:	f7ff fb5a 	bl	8000b6c <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 80014b8:	b015      	add	sp, #84	; 0x54
 80014ba:	bd30      	pop	{r4, r5, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <main>:
int main(void) {
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	b085      	sub	sp, #20
	HAL_Init();
 80014c8:	f7ff f830 	bl	800052c <HAL_Init>
	SystemClock_Config();
 80014cc:	f7ff ffb0 	bl	8001430 <SystemClock_Config>
	MX_GPIO_Init();
 80014d0:	f7ff ff58 	bl	8001384 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80014d4:	f000 f914 	bl	8001700 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80014d8:	f000 f88c 	bl	80015f4 <MX_TIM1_Init>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 80014dc:	2100      	movs	r1, #0
 80014de:	4813      	ldr	r0, [pc, #76]	; (800152c <main+0x68>)
		cnts = __HAL_TIM_GET_COUNTER(&htim1);
 80014e0:	4f12      	ldr	r7, [pc, #72]	; (800152c <main+0x68>)
				HAL_UART_Transmit(&huart2, circle, sizeof(circle), 50);
 80014e2:	4e13      	ldr	r6, [pc, #76]	; (8001530 <main+0x6c>)
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 80014e4:	f7ff fbfc 	bl	8000ce0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 80014e8:	2104      	movs	r1, #4
 80014ea:	4810      	ldr	r0, [pc, #64]	; (800152c <main+0x68>)
 80014ec:	f7ff fbf8 	bl	8000ce0 <HAL_TIM_Encoder_Start>
	char circle[10] = "\n\rcircle";
 80014f0:	4a10      	ldr	r2, [pc, #64]	; (8001534 <main+0x70>)
 80014f2:	6810      	ldr	r0, [r2, #0]
 80014f4:	6851      	ldr	r1, [r2, #4]
 80014f6:	7a12      	ldrb	r2, [r2, #8]
 80014f8:	ab01      	add	r3, sp, #4
 80014fa:	c303      	stmia	r3!, {r0, r1}
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	f88d 300d 	strb.w	r3, [sp, #13]
			if (cnts % (3592) == 0)
 8001504:	f640 6508 	movw	r5, #3592	; 0xe08
		cnts = __HAL_TIM_GET_COUNTER(&htim1);
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	6a54      	ldr	r4, [r2, #36]	; 0x24
		if (cnts != cnts_old) {
 800150c:	42a3      	cmp	r3, r4
 800150e:	d0fc      	beq.n	800150a <main+0x46>
			if (cnts % (3592) == 0)
 8001510:	fbb4 f3f5 	udiv	r3, r4, r5
 8001514:	fb05 4313 	mls	r3, r5, r3, r4
 8001518:	b92b      	cbnz	r3, 8001526 <main+0x62>
				HAL_UART_Transmit(&huart2, circle, sizeof(circle), 50);
 800151a:	2332      	movs	r3, #50	; 0x32
 800151c:	220a      	movs	r2, #10
 800151e:	a901      	add	r1, sp, #4
 8001520:	4630      	mov	r0, r6
 8001522:	f7ff fed1 	bl	80012c8 <HAL_UART_Transmit>
		cnts = __HAL_TIM_GET_COUNTER(&htim1);
 8001526:	4623      	mov	r3, r4
 8001528:	e7ee      	b.n	8001508 <main+0x44>
 800152a:	bf00      	nop
 800152c:	2000002c 	.word	0x2000002c
 8001530:	20000068 	.word	0x20000068
 8001534:	08001864 	.word	0x08001864

08001538 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001538:	4770      	bx	lr
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_MspInit+0x3c>)
 8001540:	2100      	movs	r1, #0
 8001542:	9100      	str	r1, [sp, #0]
 8001544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800154a:	645a      	str	r2, [r3, #68]	; 0x44
 800154c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800154e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	9101      	str	r1, [sp, #4]
 8001558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001568:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156c:	f7ff f80a 	bl	8000584 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	b003      	add	sp, #12
 8001572:	f85d fb04 	ldr.w	pc, [sp], #4
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <NMI_Handler>:
 800157c:	4770      	bx	lr

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	e7fe      	b.n	800157e <HardFault_Handler>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler>

08001586 <SVC_Handler>:
 8001586:	4770      	bx	lr

08001588 <DebugMon_Handler>:
 8001588:	4770      	bx	lr

0800158a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f7fe bfe8 	b.w	8000560 <HAL_IncTick>

08001590 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001590:	4801      	ldr	r0, [pc, #4]	; (8001598 <TIM1_CC_IRQHandler+0x8>)
 8001592:	f7ff bbcc 	b.w	8000d2e <HAL_TIM_IRQHandler>
 8001596:	bf00      	nop
 8001598:	2000002c 	.word	0x2000002c

0800159c <TIM1_TRG_COM_TIM11_IRQHandler>:
 800159c:	f7ff bff8 	b.w	8001590 <TIM1_CC_IRQHandler>

080015a0 <TIM1_UP_TIM10_IRQHandler>:
 80015a0:	f7ff bff6 	b.w	8001590 <TIM1_CC_IRQHandler>

080015a4 <TIM1_BRK_TIM9_IRQHandler>:
 80015a4:	f7ff bff4 	b.w	8001590 <TIM1_CC_IRQHandler>

080015a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	490f      	ldr	r1, [pc, #60]	; (80015e8 <SystemInit+0x40>)
 80015aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <SystemInit+0x44>)
 80015b8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ba:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80015c2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015ce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <SystemInit+0x48>)
 80015d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015dc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015e2:	608b      	str	r3, [r1, #8]
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	24003010 	.word	0x24003010

080015f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015f4:	b510      	push	{r4, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 80015f8:	2100      	movs	r1, #0
 80015fa:	2224      	movs	r2, #36	; 0x24
 80015fc:	a803      	add	r0, sp, #12
 80015fe:	f000 f91d 	bl	800183c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
 8001602:	4812      	ldr	r0, [pc, #72]	; (800164c <MX_TIM1_Init+0x58>)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_TIM1_Init+0x5c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001606:	2400      	movs	r4, #0
  htim1.Init.Prescaler = 0;
 8001608:	e880 0018 	stmia.w	r0, {r3, r4}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 800160c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001610:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001612:	2303      	movs	r3, #3
 8001614:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001616:	2301      	movs	r3, #1
 8001618:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800161a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 6;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800161c:	a903      	add	r1, sp, #12
  sConfig.IC2Filter = 6;
 800161e:	2306      	movs	r3, #6
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	9401      	str	r4, [sp, #4]
 8001622:	9402      	str	r4, [sp, #8]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001628:	6144      	str	r4, [r0, #20]
  sConfig.IC2Filter = 6;
 800162a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800162c:	f7ff fc6e 	bl	8000f0c <HAL_TIM_Encoder_Init>
 8001630:	b108      	cbz	r0, 8001636 <MX_TIM1_Init+0x42>
  {
    Error_Handler();
 8001632:	f7ff ff81 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001636:	a901      	add	r1, sp, #4
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_TIM1_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800163e:	f7ff fcae 	bl	8000f9e <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	b108      	cbz	r0, 8001648 <MX_TIM1_Init+0x54>
  {
    Error_Handler();
 8001644:	f7ff ff78 	bl	8001538 <Error_Handler>
  }

}
 8001648:	b00c      	add	sp, #48	; 0x30
 800164a:	bd10      	pop	{r4, pc}
 800164c:	2000002c 	.word	0x2000002c
 8001650:	40010000 	.word	0x40010000

08001654 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001654:	b510      	push	{r4, lr}
 8001656:	4604      	mov	r4, r0
 8001658:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	2214      	movs	r2, #20
 800165c:	2100      	movs	r1, #0
 800165e:	a803      	add	r0, sp, #12
 8001660:	f000 f8ec 	bl	800183c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001668:	429a      	cmp	r2, r3
 800166a:	d142      	bne.n	80016f2 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166c:	2400      	movs	r4, #0
 800166e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001672:	9401      	str	r4, [sp, #4]
 8001674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	4821      	ldr	r0, [pc, #132]	; (80016fc <HAL_TIM_Encoder_MspInit+0xa8>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
 800167e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001680:	f002 0201 	and.w	r2, r2, #1
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	9402      	str	r4, [sp, #8]
 800168a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800169c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f7fe ffd1 	bl	8000654 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80016b2:	4622      	mov	r2, r4
 80016b4:	4621      	mov	r1, r4
 80016b6:	2018      	movs	r0, #24
 80016b8:	f7fe ff76 	bl	80005a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016bc:	2018      	movs	r0, #24
 80016be:	f7fe ffa7 	bl	8000610 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016c2:	4622      	mov	r2, r4
 80016c4:	4621      	mov	r1, r4
 80016c6:	2019      	movs	r0, #25
 80016c8:	f7fe ff6e 	bl	80005a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016cc:	2019      	movs	r0, #25
 80016ce:	f7fe ff9f 	bl	8000610 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80016d2:	4622      	mov	r2, r4
 80016d4:	4621      	mov	r1, r4
 80016d6:	201a      	movs	r0, #26
 80016d8:	f7fe ff66 	bl	80005a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016dc:	201a      	movs	r0, #26
 80016de:	f7fe ff97 	bl	8000610 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016e2:	201b      	movs	r0, #27
 80016e4:	4622      	mov	r2, r4
 80016e6:	4621      	mov	r1, r4
 80016e8:	f7fe ff5e 	bl	80005a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016ec:	201b      	movs	r0, #27
 80016ee:	f7fe ff8f 	bl	8000610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016f2:	b008      	add	sp, #32
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	bf00      	nop
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40020000 	.word	0x40020000

08001700 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001700:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001702:	480b      	ldr	r0, [pc, #44]	; (8001730 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <MX_USART2_UART_Init+0x34>)
 8001706:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800170a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800170e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001710:	2300      	movs	r3, #0
 8001712:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001714:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171e:	f7ff fda5 	bl	800126c <HAL_UART_Init>
 8001722:	b118      	cbz	r0, 800172c <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001728:	f7ff bf06 	b.w	8001538 <Error_Handler>
 800172c:	bd08      	pop	{r3, pc}
 800172e:	bf00      	nop
 8001730:	20000068 	.word	0x20000068
 8001734:	40004400 	.word	0x40004400

08001738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001738:	b510      	push	{r4, lr}
 800173a:	4604      	mov	r4, r0
 800173c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	2214      	movs	r2, #20
 8001740:	2100      	movs	r1, #0
 8001742:	a803      	add	r0, sp, #12
 8001744:	f000 f87a 	bl	800183c <memset>
  if(uartHandle->Instance==USART2)
 8001748:	6822      	ldr	r2, [r4, #0]
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_UART_MspInit+0x60>)
 800174c:	429a      	cmp	r2, r3
 800174e:	d120      	bne.n	8001792 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001754:	2100      	movs	r1, #0
 8001756:	9101      	str	r1, [sp, #4]
 8001758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	4810      	ldr	r0, [pc, #64]	; (800179c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800175c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
 8001762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001764:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	9102      	str	r1, [sp, #8]
 800176e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	9302      	str	r3, [sp, #8]
 800177e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001780:	230c      	movs	r3, #12
 8001782:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178a:	2307      	movs	r3, #7
 800178c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f7fe ff61 	bl	8000654 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001792:	b008      	add	sp, #32
 8001794:	bd10      	pop	{r4, pc}
 8001796:	bf00      	nop
 8001798:	40004400 	.word	0x40004400
 800179c:	40020000 	.word	0x40020000

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017a6:	e003      	b.n	80017b0 <LoopCopyDataInit>

080017a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ae:	3104      	adds	r1, #4

080017b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017b8:	d3f6      	bcc.n	80017a8 <CopyDataInit>
  ldr  r2, =_sbss
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017bc:	e002      	b.n	80017c4 <LoopFillZerobss>

080017be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017c0:	f842 3b04 	str.w	r3, [r2], #4

080017c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017c8:	d3f9      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ca:	f7ff feed 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f000 f811 	bl	80017f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff fe77 	bl	80014c4 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017d8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80017dc:	08001898 	.word	0x08001898
  ldr  r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017e4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80017e8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80017ec:	200000a8 	.word	0x200000a8

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>
	...

080017f4 <__libc_init_array>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	4e0d      	ldr	r6, [pc, #52]	; (800182c <__libc_init_array+0x38>)
 80017f8:	4c0d      	ldr	r4, [pc, #52]	; (8001830 <__libc_init_array+0x3c>)
 80017fa:	1ba4      	subs	r4, r4, r6
 80017fc:	10a4      	asrs	r4, r4, #2
 80017fe:	2500      	movs	r5, #0
 8001800:	42a5      	cmp	r5, r4
 8001802:	d109      	bne.n	8001818 <__libc_init_array+0x24>
 8001804:	4e0b      	ldr	r6, [pc, #44]	; (8001834 <__libc_init_array+0x40>)
 8001806:	4c0c      	ldr	r4, [pc, #48]	; (8001838 <__libc_init_array+0x44>)
 8001808:	f000 f820 	bl	800184c <_init>
 800180c:	1ba4      	subs	r4, r4, r6
 800180e:	10a4      	asrs	r4, r4, #2
 8001810:	2500      	movs	r5, #0
 8001812:	42a5      	cmp	r5, r4
 8001814:	d105      	bne.n	8001822 <__libc_init_array+0x2e>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800181c:	4798      	blx	r3
 800181e:	3501      	adds	r5, #1
 8001820:	e7ee      	b.n	8001800 <__libc_init_array+0xc>
 8001822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001826:	4798      	blx	r3
 8001828:	3501      	adds	r5, #1
 800182a:	e7f2      	b.n	8001812 <__libc_init_array+0x1e>
 800182c:	08001890 	.word	0x08001890
 8001830:	08001890 	.word	0x08001890
 8001834:	08001890 	.word	0x08001890
 8001838:	08001894 	.word	0x08001894

0800183c <memset>:
 800183c:	4402      	add	r2, r0
 800183e:	4603      	mov	r3, r0
 8001840:	4293      	cmp	r3, r2
 8001842:	d100      	bne.n	8001846 <memset+0xa>
 8001844:	4770      	bx	lr
 8001846:	f803 1b01 	strb.w	r1, [r3], #1
 800184a:	e7f9      	b.n	8001840 <memset+0x4>

0800184c <_init>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	bf00      	nop
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr

08001858 <_fini>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	bf00      	nop
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr
