
pwm_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08005800  08005800  00015800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000684  20000000  08005aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  20000684  0800612c  00020684  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007f4  0800612c  000207f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020684  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013b70  00000000  00000000  000206b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026d3  00000000  00000000  00034224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b22  00000000  00000000  000368f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008d0  00000000  00000000  0003c420  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ad0  00000000  00000000  0003ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004be9  00000000  00000000  0003d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000036d1  00000000  00000000  000423a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00045a7a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000023c0  00000000  00000000  00045af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000684 	.word	0x20000684
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057e4 	.word	0x080057e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000688 	.word	0x20000688
 80001dc:	080057e4 	.word	0x080057e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_InitTick+0x3c>)
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_InitTick+0x40>)
{
 8000ec6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	7818      	ldrb	r0, [r3, #0]
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ed2:	6810      	ldr	r0, [r2, #0]
 8000ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ed8:	f000 f8a8 	bl	800102c <HAL_SYSTICK_Config>
 8000edc:	4604      	mov	r4, r0
 8000ede:	b958      	cbnz	r0, 8000ef8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	2d0f      	cmp	r5, #15
 8000ee2:	d809      	bhi.n	8000ef8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eec:	f000 f85e 	bl	8000fac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_InitTick+0x44>)
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	601d      	str	r5, [r3, #0]
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	20000010 	.word	0x20000010
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_Init>:
{
 8000f08:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x30>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f82f 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ffc8 	bl	8000ec0 <HAL_InitTick>
  HAL_MspInit();
 8000f30:	f001 fafc 	bl	800252c <HAL_MspInit>
}
 8000f34:	2000      	movs	r0, #0
 8000f36:	bd08      	pop	{r3, pc}
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x10>)
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_IncTick+0x14>)
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	440b      	add	r3, r1
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200006ec 	.word	0x200006ec
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f54:	4b01      	ldr	r3, [pc, #4]	; (8000f5c <HAL_GetTick+0x8>)
 8000f56:	6818      	ldr	r0, [r3, #0]
}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200006ec 	.word	0x200006ec

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff6 	bl	8000f54 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f68:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	bf1c      	itt	ne
 8000f6c:	4b05      	ldrne	r3, [pc, #20]	; (8000f84 <HAL_Delay+0x24>)
 8000f6e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f72:	bf18      	it	ne
 8000f74:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	f7ff ffed 	bl	8000f54 <HAL_GetTick>
 8000f7a:	1b40      	subs	r0, r0, r5
 8000f7c:	4284      	cmp	r4, r0
 8000f7e:	d8fa      	bhi.n	8000f76 <HAL_Delay+0x16>
  {
  }
}
 8000f80:	bd38      	pop	{r3, r4, r5, pc}
 8000f82:	bf00      	nop
 8000f84:	20000000 	.word	0x20000000

08000f88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	0c1b      	lsrs	r3, r3, #16
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f98:	0200      	lsls	r0, r0, #8
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fa2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fa4:	60d3      	str	r3, [r2, #12]
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b530      	push	{r4, r5, lr}
 8000fb0:	68dc      	ldr	r4, [r3, #12]
 8000fb2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	bf28      	it	cs
 8000fc0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 0501 	mov.w	r5, #1
 8000fc8:	fa05 f303 	lsl.w	r3, r5, r3
 8000fcc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd0:	bf8c      	ite	hi
 8000fd2:	3c03      	subhi	r4, #3
 8000fd4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fda:	fa05 f404 	lsl.w	r4, r5, r4
 8000fde:	3c01      	subs	r4, #1
 8000fe0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fe2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	ea42 0201 	orr.w	r2, r2, r1
 8000fe8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	bfaf      	iteee	ge
 8000fee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	f000 000f 	andlt.w	r0, r0, #15
 8000ff6:	4b06      	ldrlt	r3, [pc, #24]	; (8001010 <HAL_NVIC_SetPriority+0x64>)
 8000ff8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	bfa5      	ittet	ge
 8000ffc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001000:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	e000ed14 	.word	0xe000ed14

08001014 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001014:	0942      	lsrs	r2, r0, #5
 8001016:	2301      	movs	r3, #1
 8001018:	f000 001f 	and.w	r0, r0, #31
 800101c:	fa03 f000 	lsl.w	r0, r3, r0
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_NVIC_EnableIRQ+0x14>)
 8001022:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100

0800102c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	3801      	subs	r0, #1
 800102e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001032:	d20a      	bcs.n	800104a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001038:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	21f0      	movs	r1, #240	; 0xf0
 800103c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800105c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001200 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4a64      	ldr	r2, [pc, #400]	; (80011f8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001068:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001070:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001074:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001078:	42b7      	cmp	r7, r6
 800107a:	f040 80ad 	bne.w	80011d8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	684c      	ldr	r4, [r1, #4]
 8001080:	f024 0a10 	bic.w	sl, r4, #16
 8001084:	f1ba 0f02 	cmp.w	sl, #2
 8001088:	d116      	bne.n	80010b8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800108a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800108e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001096:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800109e:	f04f 0e0f 	mov.w	lr, #15
 80010a2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80010a6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010aa:	690d      	ldr	r5, [r1, #16]
 80010ac:	fa05 f50b 	lsl.w	r5, r5, fp
 80010b0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010b4:	f8cc 5020 	str.w	r5, [ip, #32]
 80010b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010bc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010be:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	fa05 f50c 	lsl.w	r5, r5, ip
 80010c6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010cc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010dc:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80010e2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e6:	d815      	bhi.n	8001114 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80010e8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f0:	68cd      	ldr	r5, [r1, #12]
 80010f2:	fa05 fa0c 	lsl.w	sl, r5, ip
 80010f6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80010fa:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80010fe:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001102:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001106:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800110a:	fa0e fe03 	lsl.w	lr, lr, r3
 800110e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001112:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001114:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	9d00      	ldr	r5, [sp, #0]
 8001118:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111a:	688f      	ldr	r7, [r1, #8]
 800111c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001120:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001122:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001124:	00e5      	lsls	r5, r4, #3
 8001126:	d557      	bpl.n	80011d8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	f04f 0b00 	mov.w	fp, #0
 800112c:	f8cd b00c 	str.w	fp, [sp, #12]
 8001130:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001134:	4d31      	ldr	r5, [pc, #196]	; (80011fc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800113a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800113e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001142:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001146:	9703      	str	r7, [sp, #12]
 8001148:	9f03      	ldr	r7, [sp, #12]
 800114a:	f023 0703 	bic.w	r7, r3, #3
 800114e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001152:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001156:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800115a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001162:	f04f 0e0f 	mov.w	lr, #15
 8001166:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001170:	d039      	beq.n	80011e6 <HAL_GPIO_Init+0x18e>
 8001172:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001176:	42a8      	cmp	r0, r5
 8001178:	d037      	beq.n	80011ea <HAL_GPIO_Init+0x192>
 800117a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800117e:	42a8      	cmp	r0, r5
 8001180:	d035      	beq.n	80011ee <HAL_GPIO_Init+0x196>
 8001182:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001186:	42a8      	cmp	r0, r5
 8001188:	d033      	beq.n	80011f2 <HAL_GPIO_Init+0x19a>
 800118a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800118e:	42a8      	cmp	r0, r5
 8001190:	bf14      	ite	ne
 8001192:	2507      	movne	r5, #7
 8001194:	2504      	moveq	r5, #4
 8001196:	fa05 f50c 	lsl.w	r5, r5, ip
 800119a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80011a0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011a8:	bf0c      	ite	eq
 80011aa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011ac:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80011ae:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80011b0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011b6:	bf0c      	ite	eq
 80011b8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011ba:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80011bc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011c4:	bf0c      	ite	eq
 80011c6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011c8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80011ca:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ce:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80011d0:	bf54      	ite	pl
 80011d2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80011d4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80011d6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d8:	3301      	adds	r3, #1
 80011da:	2b10      	cmp	r3, #16
 80011dc:	f47f af47 	bne.w	800106e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80011e0:	b005      	add	sp, #20
 80011e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	465d      	mov	r5, fp
 80011e8:	e7d5      	b.n	8001196 <HAL_GPIO_Init+0x13e>
 80011ea:	2501      	movs	r5, #1
 80011ec:	e7d3      	b.n	8001196 <HAL_GPIO_Init+0x13e>
 80011ee:	2502      	movs	r5, #2
 80011f0:	e7d1      	b.n	8001196 <HAL_GPIO_Init+0x13e>
 80011f2:	2503      	movs	r5, #3
 80011f4:	e7cf      	b.n	8001196 <HAL_GPIO_Init+0x13e>
 80011f6:	bf00      	nop
 80011f8:	40013c00 	.word	0x40013c00
 80011fc:	40020000 	.word	0x40020000
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	b10a      	cbz	r2, 800120a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	6181      	str	r1, [r0, #24]
 8001208:	4770      	bx	lr
 800120a:	0409      	lsls	r1, r1, #16
 800120c:	e7fb      	b.n	8001206 <HAL_GPIO_WritePin+0x2>
	...

08001210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	4604      	mov	r4, r0
 8001216:	b918      	cbnz	r0, 8001220 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800121a:	b002      	add	sp, #8
 800121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	07dd      	lsls	r5, r3, #31
 8001224:	d410      	bmi.n	8001248 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	0798      	lsls	r0, r3, #30
 800122a:	d458      	bmi.n	80012de <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	071a      	lsls	r2, r3, #28
 8001230:	f100 809a 	bmi.w	8001368 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	075b      	lsls	r3, r3, #29
 8001238:	f100 80b8 	bmi.w	80013ac <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123c:	69a2      	ldr	r2, [r4, #24]
 800123e:	2a00      	cmp	r2, #0
 8001240:	f040 8119 	bne.w	8001476 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001244:	2000      	movs	r0, #0
 8001246:	e7e8      	b.n	800121a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001248:	4ba6      	ldr	r3, [pc, #664]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	f002 020c 	and.w	r2, r2, #12
 8001250:	2a04      	cmp	r2, #4
 8001252:	d007      	beq.n	8001264 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	2a08      	cmp	r2, #8
 800125c:	d10a      	bne.n	8001274 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	0259      	lsls	r1, r3, #9
 8001262:	d507      	bpl.n	8001274 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	4b9f      	ldr	r3, [pc, #636]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	039a      	lsls	r2, r3, #14
 800126a:	d5dc      	bpl.n	8001226 <HAL_RCC_OscConfig+0x16>
 800126c:	6863      	ldr	r3, [r4, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1d9      	bne.n	8001226 <HAL_RCC_OscConfig+0x16>
 8001272:	e7d1      	b.n	8001218 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	4d9b      	ldr	r5, [pc, #620]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d111      	bne.n	80012a2 <HAL_RCC_OscConfig+0x92>
 800127e:	682b      	ldr	r3, [r5, #0]
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001286:	f7ff fe65 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4d96      	ldr	r5, [pc, #600]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800128c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	039b      	lsls	r3, r3, #14
 8001292:	d4c8      	bmi.n	8001226 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fe5e 	bl	8000f54 <HAL_GetTick>
 8001298:	1b80      	subs	r0, r0, r6
 800129a:	2864      	cmp	r0, #100	; 0x64
 800129c:	d9f7      	bls.n	800128e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800129e:	2003      	movs	r0, #3
 80012a0:	e7bb      	b.n	800121a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a6:	d104      	bne.n	80012b2 <HAL_RCC_OscConfig+0xa2>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ae:	602b      	str	r3, [r5, #0]
 80012b0:	e7e5      	b.n	800127e <HAL_RCC_OscConfig+0x6e>
 80012b2:	682a      	ldr	r2, [r5, #0]
 80012b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012b8:	602a      	str	r2, [r5, #0]
 80012ba:	682a      	ldr	r2, [r5, #0]
 80012bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012c0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1df      	bne.n	8001286 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80012c6:	f7ff fe45 	bl	8000f54 <HAL_GetTick>
 80012ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	039f      	lsls	r7, r3, #14
 80012d0:	d5a9      	bpl.n	8001226 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d2:	f7ff fe3f 	bl	8000f54 <HAL_GetTick>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	2864      	cmp	r0, #100	; 0x64
 80012da:	d9f7      	bls.n	80012cc <HAL_RCC_OscConfig+0xbc>
 80012dc:	e7df      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012de:	4b81      	ldr	r3, [pc, #516]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	f012 0f0c 	tst.w	r2, #12
 80012e6:	d007      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	2a08      	cmp	r2, #8
 80012f0:	d111      	bne.n	8001316 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	025e      	lsls	r6, r3, #9
 80012f6:	d40e      	bmi.n	8001316 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f8:	4b7a      	ldr	r3, [pc, #488]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	0795      	lsls	r5, r2, #30
 80012fe:	d502      	bpl.n	8001306 <HAL_RCC_OscConfig+0xf6>
 8001300:	68e2      	ldr	r2, [r4, #12]
 8001302:	2a01      	cmp	r2, #1
 8001304:	d188      	bne.n	8001218 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	6921      	ldr	r1, [r4, #16]
 800130a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800130e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001312:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001314:	e78a      	b.n	800122c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001316:	68e2      	ldr	r2, [r4, #12]
 8001318:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <HAL_RCC_OscConfig+0x2d8>)
 800131a:	b1b2      	cbz	r2, 800134a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001320:	f7ff fe18 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4d6f      	ldr	r5, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001326:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	0798      	lsls	r0, r3, #30
 800132c:	d507      	bpl.n	800133e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	6922      	ldr	r2, [r4, #16]
 8001332:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001336:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800133a:	602b      	str	r3, [r5, #0]
 800133c:	e776      	b.n	800122c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fe09 	bl	8000f54 <HAL_GetTick>
 8001342:	1b80      	subs	r0, r0, r6
 8001344:	2802      	cmp	r0, #2
 8001346:	d9ef      	bls.n	8001328 <HAL_RCC_OscConfig+0x118>
 8001348:	e7a9      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800134a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800134c:	f7ff fe02 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001350:	4d64      	ldr	r5, [pc, #400]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001352:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	0799      	lsls	r1, r3, #30
 8001358:	f57f af68 	bpl.w	800122c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fdfa 	bl	8000f54 <HAL_GetTick>
 8001360:	1b80      	subs	r0, r0, r6
 8001362:	2802      	cmp	r0, #2
 8001364:	d9f6      	bls.n	8001354 <HAL_RCC_OscConfig+0x144>
 8001366:	e79a      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001368:	6962      	ldr	r2, [r4, #20]
 800136a:	4b60      	ldr	r3, [pc, #384]	; (80014ec <HAL_RCC_OscConfig+0x2dc>)
 800136c:	b17a      	cbz	r2, 800138e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001372:	f7ff fdef 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	4d5b      	ldr	r5, [pc, #364]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001378:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800137c:	079f      	lsls	r7, r3, #30
 800137e:	f53f af59 	bmi.w	8001234 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fde7 	bl	8000f54 <HAL_GetTick>
 8001386:	1b80      	subs	r0, r0, r6
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f6      	bls.n	800137a <HAL_RCC_OscConfig+0x16a>
 800138c:	e787      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800138e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001390:	f7ff fde0 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	4d53      	ldr	r5, [pc, #332]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001396:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800139a:	0798      	lsls	r0, r3, #30
 800139c:	f57f af4a 	bpl.w	8001234 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fdd8 	bl	8000f54 <HAL_GetTick>
 80013a4:	1b80      	subs	r0, r0, r6
 80013a6:	2802      	cmp	r0, #2
 80013a8:	d9f6      	bls.n	8001398 <HAL_RCC_OscConfig+0x188>
 80013aa:	e778      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ac:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80013b4:	d128      	bne.n	8001408 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013ca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4d48      	ldr	r5, [pc, #288]	; (80014f0 <HAL_RCC_OscConfig+0x2e0>)
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	05d9      	lsls	r1, r3, #23
 80013d2:	d51b      	bpl.n	800140c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	68a3      	ldr	r3, [r4, #8]
 80013d6:	4d43      	ldr	r5, [pc, #268]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d127      	bne.n	800142c <HAL_RCC_OscConfig+0x21c>
 80013dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013e4:	f7ff fdb6 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	4d3e      	ldr	r5, [pc, #248]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80013ea:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f2:	079b      	lsls	r3, r3, #30
 80013f4:	d539      	bpl.n	800146a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80013f6:	2e00      	cmp	r6, #0
 80013f8:	f43f af20 	beq.w	800123c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fc:	4a39      	ldr	r2, [pc, #228]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 80013fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	e719      	b.n	800123c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001408:	2600      	movs	r6, #0
 800140a:	e7df      	b.n	80013cc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001412:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001414:	f7ff fd9e 	bl	8000f54 <HAL_GetTick>
 8001418:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	05da      	lsls	r2, r3, #23
 800141e:	d4d9      	bmi.n	80013d4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001420:	f7ff fd98 	bl	8000f54 <HAL_GetTick>
 8001424:	1bc0      	subs	r0, r0, r7
 8001426:	2802      	cmp	r0, #2
 8001428:	d9f7      	bls.n	800141a <HAL_RCC_OscConfig+0x20a>
 800142a:	e738      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	2b05      	cmp	r3, #5
 800142e:	d104      	bne.n	800143a <HAL_RCC_OscConfig+0x22a>
 8001430:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	672b      	str	r3, [r5, #112]	; 0x70
 8001438:	e7d0      	b.n	80013dc <HAL_RCC_OscConfig+0x1cc>
 800143a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	672a      	str	r2, [r5, #112]	; 0x70
 8001442:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001444:	f022 0204 	bic.w	r2, r2, #4
 8001448:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ca      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800144e:	f7ff fd81 	bl	8000f54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001456:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800145a:	0798      	lsls	r0, r3, #30
 800145c:	d5cb      	bpl.n	80013f6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff fd79 	bl	8000f54 <HAL_GetTick>
 8001462:	1bc0      	subs	r0, r0, r7
 8001464:	4540      	cmp	r0, r8
 8001466:	d9f7      	bls.n	8001458 <HAL_RCC_OscConfig+0x248>
 8001468:	e719      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fd73 	bl	8000f54 <HAL_GetTick>
 800146e:	1bc0      	subs	r0, r0, r7
 8001470:	4540      	cmp	r0, r8
 8001472:	d9bd      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1e0>
 8001474:	e713      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001476:	4d1b      	ldr	r5, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
 8001478:	68ab      	ldr	r3, [r5, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b08      	cmp	r3, #8
 8001480:	f43f aeca 	beq.w	8001218 <HAL_RCC_OscConfig+0x8>
 8001484:	4e1b      	ldr	r6, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001486:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001488:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800148a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148c:	d134      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800148e:	f7ff fd61 	bl	8000f54 <HAL_GetTick>
 8001492:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	0199      	lsls	r1, r3, #6
 8001498:	d41e      	bmi.n	80014d8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800149a:	6a22      	ldr	r2, [r4, #32]
 800149c:	69e3      	ldr	r3, [r4, #28]
 800149e:	4313      	orrs	r3, r2
 80014a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	4c0d      	ldr	r4, [pc, #52]	; (80014e4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b0:	0852      	lsrs	r2, r2, #1
 80014b2:	3a01      	subs	r2, #1
 80014b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014b8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014ba:	2301      	movs	r3, #1
 80014bc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014be:	f7ff fd49 	bl	8000f54 <HAL_GetTick>
 80014c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	019a      	lsls	r2, r3, #6
 80014c8:	f53f aebc 	bmi.w	8001244 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fd42 	bl	8000f54 <HAL_GetTick>
 80014d0:	1b40      	subs	r0, r0, r5
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d9f6      	bls.n	80014c4 <HAL_RCC_OscConfig+0x2b4>
 80014d6:	e6e2      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fd3c 	bl	8000f54 <HAL_GetTick>
 80014dc:	1bc0      	subs	r0, r0, r7
 80014de:	2802      	cmp	r0, #2
 80014e0:	d9d8      	bls.n	8001494 <HAL_RCC_OscConfig+0x284>
 80014e2:	e6dc      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
 80014f0:	40007000 	.word	0x40007000
 80014f4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80014f8:	f7ff fd2c 	bl	8000f54 <HAL_GetTick>
 80014fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fe:	682b      	ldr	r3, [r5, #0]
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	f57f ae9f 	bpl.w	8001244 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fd25 	bl	8000f54 <HAL_GetTick>
 800150a:	1b00      	subs	r0, r0, r4
 800150c:	2802      	cmp	r0, #2
 800150e:	d9f6      	bls.n	80014fe <HAL_RCC_OscConfig+0x2ee>
 8001510:	e6c5      	b.n	800129e <HAL_RCC_OscConfig+0x8e>
 8001512:	bf00      	nop

08001514 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001514:	4913      	ldr	r1, [pc, #76]	; (8001564 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001516:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001518:	688b      	ldr	r3, [r1, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d003      	beq.n	800152a <HAL_RCC_GetSysClockFreq+0x16>
 8001522:	2b08      	cmp	r3, #8
 8001524:	d003      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001528:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <HAL_RCC_GetSysClockFreq+0x58>)
 800152c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001530:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001532:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001534:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001538:	bf14      	ite	ne
 800153a:	480c      	ldrne	r0, [pc, #48]	; (800156c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153c:	480a      	ldreq	r0, [pc, #40]	; (8001568 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001542:	bf18      	it	ne
 8001544:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001546:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154a:	fba1 0100 	umull	r0, r1, r1, r0
 800154e:	f7ff fb2f 	bl	8000bb0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <HAL_RCC_GetSysClockFreq+0x50>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800155e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001562:	bd08      	pop	{r3, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	00f42400 	.word	0x00f42400
 800156c:	007a1200 	.word	0x007a1200

08001570 <HAL_RCC_ClockConfig>:
{
 8001570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001574:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001576:	4604      	mov	r4, r0
 8001578:	b910      	cbnz	r0, 8001580 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800157a:	2001      	movs	r0, #1
 800157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001580:	4b44      	ldr	r3, [pc, #272]	; (8001694 <HAL_RCC_ClockConfig+0x124>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f002 020f 	and.w	r2, r2, #15
 8001588:	428a      	cmp	r2, r1
 800158a:	d328      	bcc.n	80015de <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	6821      	ldr	r1, [r4, #0]
 800158e:	078f      	lsls	r7, r1, #30
 8001590:	d42d      	bmi.n	80015ee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001592:	07c8      	lsls	r0, r1, #31
 8001594:	d440      	bmi.n	8001618 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_RCC_ClockConfig+0x124>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	f002 020f 	and.w	r2, r2, #15
 800159e:	4295      	cmp	r5, r2
 80015a0:	d366      	bcc.n	8001670 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	0751      	lsls	r1, r2, #29
 80015a6:	d46c      	bmi.n	8001682 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	0713      	lsls	r3, r2, #28
 80015aa:	d507      	bpl.n	80015bc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ac:	4a3a      	ldr	r2, [pc, #232]	; (8001698 <HAL_RCC_ClockConfig+0x128>)
 80015ae:	6921      	ldr	r1, [r4, #16]
 80015b0:	6893      	ldr	r3, [r2, #8]
 80015b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80015b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015bc:	f7ff ffaa 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_RCC_ClockConfig+0x128>)
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <HAL_RCC_ClockConfig+0x12c>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	40d8      	lsrs	r0, r3
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_ClockConfig+0x130>)
 80015d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff fc74 	bl	8000ec0 <HAL_InitTick>
  return HAL_OK;
 80015d8:	2000      	movs	r0, #0
 80015da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	4299      	cmp	r1, r3
 80015ea:	d1c6      	bne.n	800157a <HAL_RCC_ClockConfig+0xa>
 80015ec:	e7ce      	b.n	800158c <HAL_RCC_ClockConfig+0x1c>
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	bf1e      	ittt	ne
 80015f6:	689a      	ldrne	r2, [r3, #8]
 80015f8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015fc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	bf42      	ittt	mi
 8001602:	689a      	ldrmi	r2, [r3, #8]
 8001604:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001608:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	68a0      	ldr	r0, [r4, #8]
 800160e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001612:	4302      	orrs	r2, r0
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	e7bc      	b.n	8001592 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001618:	6862      	ldr	r2, [r4, #4]
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_RCC_ClockConfig+0x128>)
 800161c:	2a01      	cmp	r2, #1
 800161e:	d11d      	bne.n	800165c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	d0a8      	beq.n	800157a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001628:	4e1b      	ldr	r6, [pc, #108]	; (8001698 <HAL_RCC_ClockConfig+0x128>)
 800162a:	68b3      	ldr	r3, [r6, #8]
 800162c:	f023 0303 	bic.w	r3, r3, #3
 8001630:	4313      	orrs	r3, r2
 8001632:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001634:	f7ff fc8e 	bl	8000f54 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800163c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	68b3      	ldr	r3, [r6, #8]
 8001640:	6862      	ldr	r2, [r4, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800164a:	d0a4      	beq.n	8001596 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff fc82 	bl	8000f54 <HAL_GetTick>
 8001650:	1bc0      	subs	r0, r0, r7
 8001652:	4540      	cmp	r0, r8
 8001654:	d9f3      	bls.n	800163e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001656:	2003      	movs	r0, #3
}
 8001658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165c:	1e91      	subs	r1, r2, #2
 800165e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001662:	d802      	bhi.n	800166a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001668:	e7dd      	b.n	8001626 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	f013 0f02 	tst.w	r3, #2
 800166e:	e7da      	b.n	8001626 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001670:	b2ea      	uxtb	r2, r5
 8001672:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	429d      	cmp	r5, r3
 800167c:	f47f af7d 	bne.w	800157a <HAL_RCC_ClockConfig+0xa>
 8001680:	e78f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001682:	4905      	ldr	r1, [pc, #20]	; (8001698 <HAL_RCC_ClockConfig+0x128>)
 8001684:	68e0      	ldr	r0, [r4, #12]
 8001686:	688b      	ldr	r3, [r1, #8]
 8001688:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800168c:	4303      	orrs	r3, r0
 800168e:	608b      	str	r3, [r1, #8]
 8001690:	e78a      	b.n	80015a8 <HAL_RCC_ClockConfig+0x38>
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00
 8001698:	40023800 	.word	0x40023800
 800169c:	08005817 	.word	0x08005817
 80016a0:	20000010 	.word	0x20000010

080016a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016b2:	6810      	ldr	r0, [r2, #0]
}
 80016b4:	40d8      	lsrs	r0, r3
 80016b6:	4770      	bx	lr
 80016b8:	40023800 	.word	0x40023800
 80016bc:	08005827 	.word	0x08005827
 80016c0:	20000010 	.word	0x20000010

080016c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016d2:	6810      	ldr	r0, [r2, #0]
}
 80016d4:	40d8      	lsrs	r0, r3
 80016d6:	4770      	bx	lr
 80016d8:	40023800 	.word	0x40023800
 80016dc:	08005827 	.word	0x08005827
 80016e0:	20000010 	.word	0x20000010

080016e4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016e4:	6a03      	ldr	r3, [r0, #32]
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016ec:	6a03      	ldr	r3, [r0, #32]
{
 80016ee:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80016f0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016f2:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80016f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80016fa:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80016fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80016fe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001702:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001704:	4d0a      	ldr	r5, [pc, #40]	; (8001730 <TIM_OC1_SetConfig+0x4c>)
 8001706:	42a8      	cmp	r0, r5
 8001708:	d10b      	bne.n	8001722 <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800170a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800170c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 800170e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001712:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001714:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001716:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800171a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800171c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001720:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001722:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001724:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001726:	684a      	ldr	r2, [r1, #4]
 8001728:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800172a:	6203      	str	r3, [r0, #32]
 800172c:	bd70      	pop	{r4, r5, r6, pc}
 800172e:	bf00      	nop
 8001730:	40010000 	.word	0x40010000

08001734 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001734:	6a03      	ldr	r3, [r0, #32]
 8001736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800173a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800173c:	6a03      	ldr	r3, [r0, #32]
{
 800173e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001740:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001742:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001744:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001746:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800174a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800174c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800174e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001752:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001756:	4d0b      	ldr	r5, [pc, #44]	; (8001784 <TIM_OC3_SetConfig+0x50>)
 8001758:	42a8      	cmp	r0, r5
 800175a:	d10d      	bne.n	8001778 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800175c:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800175e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001764:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001768:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800176a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800176e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001774:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001778:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800177a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800177c:	684a      	ldr	r2, [r1, #4]
 800177e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001780:	6203      	str	r3, [r0, #32]
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	40010000 	.word	0x40010000

08001788 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001788:	6a03      	ldr	r3, [r0, #32]
 800178a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800178e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001790:	6a03      	ldr	r3, [r0, #32]
{
 8001792:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001794:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001796:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001798:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800179a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800179e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80017a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80017ac:	4d06      	ldr	r5, [pc, #24]	; (80017c8 <TIM_OC4_SetConfig+0x40>)
 80017ae:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80017b0:	bf02      	ittt	eq
 80017b2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80017b4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80017b8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017bc:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80017be:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80017c0:	684a      	ldr	r2, [r1, #4]
 80017c2:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017c4:	6203      	str	r3, [r0, #32]
 80017c6:	bd30      	pop	{r4, r5, pc}
 80017c8:	40010000 	.word	0x40010000

080017cc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017cc:	6803      	ldr	r3, [r0, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	2000      	movs	r0, #0
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_Encoder_Start>:
{
 80017e2:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 80017e4:	b189      	cbz	r1, 800180a <HAL_TIM_Encoder_Start+0x28>
 80017e6:	2904      	cmp	r1, #4
 80017e8:	d007      	beq.n	80017fa <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	f022 0210 	bic.w	r2, r2, #16
 8001800:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	f042 0210 	orr.w	r2, r2, #16
 8001808:	e006      	b.n	8001818 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
}
 8001822:	2000      	movs	r0, #0
 8001824:	4770      	bx	lr

08001826 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001826:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800182a:	2b01      	cmp	r3, #1
{
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001832:	d01c      	beq.n	800186e <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001834:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001838:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800183a:	2201      	movs	r2, #1
 800183c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001840:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001842:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001846:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800184a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800184c:	680a      	ldr	r2, [r1, #0]
 800184e:	2a40      	cmp	r2, #64	; 0x40
 8001850:	d079      	beq.n	8001946 <HAL_TIM_ConfigClockSource+0x120>
 8001852:	d819      	bhi.n	8001888 <HAL_TIM_ConfigClockSource+0x62>
 8001854:	2a10      	cmp	r2, #16
 8001856:	f000 8093 	beq.w	8001980 <HAL_TIM_ConfigClockSource+0x15a>
 800185a:	d80a      	bhi.n	8001872 <HAL_TIM_ConfigClockSource+0x4c>
 800185c:	2a00      	cmp	r2, #0
 800185e:	f000 8089 	beq.w	8001974 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001862:	2301      	movs	r3, #1
 8001864:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001868:	2300      	movs	r3, #0
 800186a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800186e:	4618      	mov	r0, r3
}
 8001870:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001872:	2a20      	cmp	r2, #32
 8001874:	f000 808a 	beq.w	800198c <HAL_TIM_ConfigClockSource+0x166>
 8001878:	2a30      	cmp	r2, #48	; 0x30
 800187a:	d1f2      	bne.n	8001862 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800187c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800187e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001882:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001886:	e036      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001888:	2a70      	cmp	r2, #112	; 0x70
 800188a:	d036      	beq.n	80018fa <HAL_TIM_ConfigClockSource+0xd4>
 800188c:	d81b      	bhi.n	80018c6 <HAL_TIM_ConfigClockSource+0xa0>
 800188e:	2a50      	cmp	r2, #80	; 0x50
 8001890:	d042      	beq.n	8001918 <HAL_TIM_ConfigClockSource+0xf2>
 8001892:	2a60      	cmp	r2, #96	; 0x60
 8001894:	d1e5      	bne.n	8001862 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001896:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001898:	684d      	ldr	r5, [r1, #4]
 800189a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800189c:	f024 0410 	bic.w	r4, r4, #16
 80018a0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018a2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80018a4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018a6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80018ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018b2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80018b6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80018b8:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80018ba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018c0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80018c4:	e017      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80018c6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018ca:	d011      	beq.n	80018f0 <HAL_TIM_ConfigClockSource+0xca>
 80018cc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80018d0:	d1c7      	bne.n	8001862 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80018d2:	688a      	ldr	r2, [r1, #8]
 80018d4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80018d6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80018d8:	68c9      	ldr	r1, [r1, #12]
 80018da:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018dc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80018e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018e4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018e6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018ee:	e002      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	e7b3      	b.n	8001862 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80018fa:	688a      	ldr	r2, [r1, #8]
 80018fc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80018fe:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001900:	68c9      	ldr	r1, [r1, #12]
 8001902:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001904:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001908:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800190c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800190e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001910:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001912:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001916:	e7ee      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001918:	684c      	ldr	r4, [r1, #4]
 800191a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800191c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800191e:	6a1d      	ldr	r5, [r3, #32]
 8001920:	f025 0501 	bic.w	r5, r5, #1
 8001924:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001926:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001928:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800192c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001930:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001934:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001938:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800193a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800193c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001940:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001944:	e7d7      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001946:	684c      	ldr	r4, [r1, #4]
 8001948:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800194a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800194c:	6a1d      	ldr	r5, [r3, #32]
 800194e:	f025 0501 	bic.w	r5, r5, #1
 8001952:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001954:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001956:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800195a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800195e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001962:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001966:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001968:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800196a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800196e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001972:	e7c0      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001974:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800197a:	f042 0207 	orr.w	r2, r2, #7
 800197e:	e7ba      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001980:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001982:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001986:	f042 0217 	orr.w	r2, r2, #23
 800198a:	e7b4      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800198c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800198e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001992:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001996:	e7ae      	b.n	80018f6 <HAL_TIM_ConfigClockSource+0xd0>

08001998 <HAL_TIM_OC_DelayElapsedCallback>:
 8001998:	4770      	bx	lr

0800199a <HAL_TIM_IC_CaptureCallback>:
 800199a:	4770      	bx	lr

0800199c <HAL_TIM_PWM_PulseFinishedCallback>:
 800199c:	4770      	bx	lr

0800199e <HAL_TIM_TriggerCallback>:
 800199e:	4770      	bx	lr

080019a0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a0:	6803      	ldr	r3, [r0, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	0791      	lsls	r1, r2, #30
{
 80019a6:	b510      	push	{r4, lr}
 80019a8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019aa:	d50e      	bpl.n	80019ca <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	0792      	lsls	r2, r2, #30
 80019b0:	d50b      	bpl.n	80019ca <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019b2:	f06f 0202 	mvn.w	r2, #2
 80019b6:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019b8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ba:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019bc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019be:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019c0:	d077      	beq.n	8001ab2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80019c2:	f7ff ffea 	bl	800199a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c6:	2300      	movs	r3, #0
 80019c8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	0750      	lsls	r0, r2, #29
 80019d0:	d510      	bpl.n	80019f4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	0751      	lsls	r1, r2, #29
 80019d6:	d50d      	bpl.n	80019f4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019d8:	f06f 0204 	mvn.w	r2, #4
 80019dc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019de:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019e2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80019e8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ea:	d068      	beq.n	8001abe <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80019ec:	f7ff ffd5 	bl	800199a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f0:	2300      	movs	r3, #0
 80019f2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	0712      	lsls	r2, r2, #28
 80019fa:	d50f      	bpl.n	8001a1c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	0710      	lsls	r0, r2, #28
 8001a00:	d50c      	bpl.n	8001a1c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a02:	f06f 0208 	mvn.w	r2, #8
 8001a06:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a08:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a0a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a0c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a0e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a10:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a12:	d05a      	beq.n	8001aca <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a14:	f7ff ffc1 	bl	800199a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	06d2      	lsls	r2, r2, #27
 8001a22:	d510      	bpl.n	8001a46 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	06d0      	lsls	r0, r2, #27
 8001a28:	d50d      	bpl.n	8001a46 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a2a:	f06f 0210 	mvn.w	r2, #16
 8001a2e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a30:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a32:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a34:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a38:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a3c:	d04b      	beq.n	8001ad6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	f7ff ffac 	bl	800199a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	2300      	movs	r3, #0
 8001a44:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	07d1      	lsls	r1, r2, #31
 8001a4c:	d508      	bpl.n	8001a60 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	07d2      	lsls	r2, r2, #31
 8001a52:	d505      	bpl.n	8001a60 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a54:	f06f 0201 	mvn.w	r2, #1
 8001a58:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f000 fce8 	bl	8002430 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	0610      	lsls	r0, r2, #24
 8001a66:	d508      	bpl.n	8001a7a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	0611      	lsls	r1, r2, #24
 8001a6c:	d505      	bpl.n	8001a7a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a74:	4620      	mov	r0, r4
 8001a76:	f000 f9d2 	bl	8001e1e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	0652      	lsls	r2, r2, #25
 8001a80:	d508      	bpl.n	8001a94 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	0650      	lsls	r0, r2, #25
 8001a86:	d505      	bpl.n	8001a94 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a8c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff ff85 	bl	800199e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	0691      	lsls	r1, r2, #26
 8001a9a:	d522      	bpl.n	8001ae2 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	0692      	lsls	r2, r2, #26
 8001aa0:	d51f      	bpl.n	8001ae2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001aa2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001aa6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001aa8:	611a      	str	r2, [r3, #16]
}
 8001aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001aae:	f000 b9b5 	b.w	8001e1c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab2:	f7ff ff71 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff ff70 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001abc:	e783      	b.n	80019c6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001abe:	f7ff ff6b 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff ff6a 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001ac8:	e792      	b.n	80019f0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	f7ff ff65 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff ff64 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001ad4:	e7a0      	b.n	8001a18 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad6:	f7ff ff5f 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7ff ff5e 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001ae0:	e7af      	b.n	8001a42 <HAL_TIM_IRQHandler+0xa2>
 8001ae2:	bd10      	pop	{r4, pc}

08001ae4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8001ae6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001ae8:	4290      	cmp	r0, r2
 8001aea:	d00e      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001aec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001af0:	d00b      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001af2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001af6:	4290      	cmp	r0, r2
 8001af8:	d007      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001afa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001afe:	4290      	cmp	r0, r2
 8001b00:	d003      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b06:	4290      	cmp	r0, r2
 8001b08:	d119      	bne.n	8001b3e <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8001b0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b10:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <TIM_Base_SetConfig+0x8c>)
 8001b14:	4290      	cmp	r0, r2
 8001b16:	d104      	bne.n	8001b22 <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b18:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	e018      	b.n	8001b54 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b26:	d0f7      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b28:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <TIM_Base_SetConfig+0x90>)
 8001b2a:	4290      	cmp	r0, r2
 8001b2c:	d0f4      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b32:	4290      	cmp	r0, r2
 8001b34:	d0f0      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b3a:	4290      	cmp	r0, r2
 8001b3c:	d0ec      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <TIM_Base_SetConfig+0x94>)
 8001b40:	4290      	cmp	r0, r2
 8001b42:	d0e9      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b48:	4290      	cmp	r0, r2
 8001b4a:	d0e5      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b50:	4290      	cmp	r0, r2
 8001b52:	d0e1      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 8001b54:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b56:	688b      	ldr	r3, [r1, #8]
 8001b58:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b5a:	680b      	ldr	r3, [r1, #0]
 8001b5c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <TIM_Base_SetConfig+0x8c>)
 8001b60:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001b62:	bf04      	itt	eq
 8001b64:	690b      	ldreq	r3, [r1, #16]
 8001b66:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	6143      	str	r3, [r0, #20]
}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40000400 	.word	0x40000400
 8001b78:	40014000 	.word	0x40014000

08001b7c <HAL_TIM_Base_Init>:
{ 
 8001b7c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001b7e:	4604      	mov	r4, r0
 8001b80:	b1a0      	cbz	r0, 8001bac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b8a:	b91b      	cbnz	r3, 8001b94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001b90:	f000 fdfe 	bl	8002790 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b94:	2302      	movs	r3, #2
 8001b96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b9a:	6820      	ldr	r0, [r4, #0]
 8001b9c:	1d21      	adds	r1, r4, #4
 8001b9e:	f7ff ffa1 	bl	8001ae4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001ba8:	2000      	movs	r0, #0
 8001baa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bac:	2001      	movs	r0, #1
}
 8001bae:	bd10      	pop	{r4, pc}

08001bb0 <HAL_TIM_PWM_Init>:
{
 8001bb0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	b1a0      	cbz	r0, 8001be0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001bba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bbe:	b91b      	cbnz	r3, 8001bc8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bc0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001bc4:	f000 fdce 	bl	8002764 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001bce:	6820      	ldr	r0, [r4, #0]
 8001bd0:	1d21      	adds	r1, r4, #4
 8001bd2:	f7ff ff87 	bl	8001ae4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001be0:	2001      	movs	r0, #1
}  
 8001be2:	bd10      	pop	{r4, pc}

08001be4 <HAL_TIM_Encoder_Init>:
{
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	460c      	mov	r4, r1
  if(htim == NULL)
 8001be8:	4605      	mov	r5, r0
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d041      	beq.n	8001c72 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001bee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001bf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bf6:	b91b      	cbnz	r3, 8001c00 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001bf8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8001bfc:	f000 fd5c 	bl	80026b8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c00:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8001c02:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c04:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8001c08:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c0c:	6883      	ldr	r3, [r0, #8]
 8001c0e:	f023 0307 	bic.w	r3, r3, #7
 8001c12:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001c14:	f7ff ff66 	bl	8001ae4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001c18:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001c1a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001c1c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001c1e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001c20:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8001c22:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001c24:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001c26:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001c28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c2c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001c30:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001c34:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001c36:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001c3a:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001c3c:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c44:	68e1      	ldr	r1, [r4, #12]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001c4a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001c4e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001c52:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c54:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001c56:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c5a:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001c5c:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c5e:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001c62:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c64:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 8001c66:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001c68:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8001c6a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8001c6e:	2000      	movs	r0, #0
 8001c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
}
 8001c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c78 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c78:	6a03      	ldr	r3, [r0, #32]
 8001c7a:	f023 0310 	bic.w	r3, r3, #16
 8001c7e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c80:	6a03      	ldr	r3, [r0, #32]
{
 8001c82:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 8001c84:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c86:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c8a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001c94:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c9c:	4d0b      	ldr	r5, [pc, #44]	; (8001ccc <TIM_OC2_SetConfig+0x54>)
 8001c9e:	42a8      	cmp	r0, r5
 8001ca0:	d10d      	bne.n	8001cbe <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ca2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ca4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001caa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cae:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cb0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cb4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cba:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001cbe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001cc0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001cc2:	684a      	ldr	r2, [r1, #4]
 8001cc4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001cc6:	6203      	str	r3, [r0, #32]
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
 8001cca:	bf00      	nop
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <HAL_TIM_PWM_ConfigChannel>:
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001cd2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cd6:	2b01      	cmp	r3, #1
{
 8001cd8:	4604      	mov	r4, r0
 8001cda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001cde:	d025      	beq.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001cea:	2a0c      	cmp	r2, #12
 8001cec:	d818      	bhi.n	8001d20 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001cee:	e8df f002 	tbb	[pc, r2]
 8001cf2:	1707      	.short	0x1707
 8001cf4:	171e1717 	.word	0x171e1717
 8001cf8:	172f1717 	.word	0x172f1717
 8001cfc:	1717      	.short	0x1717
 8001cfe:	40          	.byte	0x40
 8001cff:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d00:	6820      	ldr	r0, [r4, #0]
 8001d02:	f7ff fcef 	bl	80016e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d06:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d08:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	f042 0208 	orr.w	r2, r2, #8
 8001d10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	f022 0204 	bic.w	r2, r2, #4
 8001d18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d1e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d22:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001d28:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001d2c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d2e:	6820      	ldr	r0, [r4, #0]
 8001d30:	f7ff ffa2 	bl	8001c78 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d34:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d36:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d4e:	e7e6      	b.n	8001d1e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d50:	6820      	ldr	r0, [r4, #0]
 8001d52:	f7ff fcef 	bl	8001734 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d56:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d58:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	f042 0208 	orr.w	r2, r2, #8
 8001d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	f022 0204 	bic.w	r2, r2, #4
 8001d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d6e:	61da      	str	r2, [r3, #28]
    break;
 8001d70:	e7d6      	b.n	8001d20 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d72:	6820      	ldr	r0, [r4, #0]
 8001d74:	f7ff fd08 	bl	8001788 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d78:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d7a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d92:	e7ec      	b.n	8001d6e <HAL_TIM_PWM_ConfigChannel+0x9e>

08001d94 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001d94:	6a03      	ldr	r3, [r0, #32]
{
 8001d96:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001d98:	2401      	movs	r4, #1
 8001d9a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001d9c:	ea23 0304 	bic.w	r3, r3, r4
 8001da0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001da2:	6a03      	ldr	r3, [r0, #32]
 8001da4:	408a      	lsls	r2, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	6202      	str	r2, [r0, #32]
 8001daa:	bd10      	pop	{r4, pc}

08001dac <HAL_TIM_PWM_Start>:
{
 8001dac:	b510      	push	{r4, lr}
 8001dae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001db0:	2201      	movs	r2, #1
 8001db2:	6800      	ldr	r0, [r0, #0]
 8001db4:	f7ff ffee 	bl	8001d94 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <HAL_TIM_PWM_Start+0x28>)
 8001dbc:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001dbe:	bf02      	ittt	eq
 8001dc0:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001dc2:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001dc6:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
} 
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	bd10      	pop	{r4, pc}
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001dd8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ddc:	2b01      	cmp	r3, #1
{
 8001dde:	b510      	push	{r4, lr}
 8001de0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001de4:	d018      	beq.n	8001e18 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001de6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001dea:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001dec:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001dee:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001df0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001df2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001df6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001e12:	2300      	movs	r3, #0
 8001e14:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001e18:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001e1a:	bd10      	pop	{r4, pc}

08001e1c <HAL_TIMEx_CommutationCallback>:
 8001e1c:	4770      	bx	lr

08001e1e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e1e:	4770      	bx	lr

08001e20 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001e24:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e26:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001e28:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e2a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e30:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001e32:	6133      	str	r3, [r6, #16]
{
 8001e34:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e36:	6883      	ldr	r3, [r0, #8]
 8001e38:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001e3a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e3c:	4303      	orrs	r3, r0
 8001e3e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e40:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e44:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e46:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001e4e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001e50:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001e52:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001e58:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001e5e:	6173      	str	r3, [r6, #20]
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e62:	d17c      	bne.n	8001f5e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e64:	429e      	cmp	r6, r3
 8001e66:	d003      	beq.n	8001e70 <UART_SetConfig+0x50>
 8001e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6c:	429e      	cmp	r6, r3
 8001e6e:	d144      	bne.n	8001efa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e70:	f7ff fc28 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001e74:	2519      	movs	r5, #25
 8001e76:	fb05 f300 	mul.w	r3, r5, r0
 8001e7a:	6860      	ldr	r0, [r4, #4]
 8001e7c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e80:	0040      	lsls	r0, r0, #1
 8001e82:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e86:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e8e:	f7ff fc19 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001e92:	6863      	ldr	r3, [r4, #4]
 8001e94:	4368      	muls	r0, r5
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fbb0 f7f3 	udiv	r7, r0, r3
 8001e9c:	f7ff fc12 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001ea0:	6863      	ldr	r3, [r4, #4]
 8001ea2:	4368      	muls	r0, r5
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eaa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001eae:	fb09 7313 	mls	r3, r9, r3, r7
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	3332      	adds	r3, #50	; 0x32
 8001eb6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001ec0:	f7ff fc00 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001ec4:	6862      	ldr	r2, [r4, #4]
 8001ec6:	4368      	muls	r0, r5
 8001ec8:	0052      	lsls	r2, r2, #1
 8001eca:	fbb0 faf2 	udiv	sl, r0, r2
 8001ece:	f7ff fbf9 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ed2:	6863      	ldr	r3, [r4, #4]
 8001ed4:	4368      	muls	r0, r5
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001edc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ee0:	fb09 a313 	mls	r3, r9, r3, sl
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	3332      	adds	r3, #50	; 0x32
 8001ee8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ef2:	443b      	add	r3, r7
 8001ef4:	60b3      	str	r3, [r6, #8]
 8001ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001efa:	f7ff fbd3 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001efe:	2519      	movs	r5, #25
 8001f00:	fb05 f300 	mul.w	r3, r5, r0
 8001f04:	6860      	ldr	r0, [r4, #4]
 8001f06:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f0a:	0040      	lsls	r0, r0, #1
 8001f0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f10:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f18:	f7ff fbc4 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001f1c:	6863      	ldr	r3, [r4, #4]
 8001f1e:	4368      	muls	r0, r5
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f26:	f7ff fbbd 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	4368      	muls	r0, r5
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f34:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f38:	fb09 7313 	mls	r3, r9, r3, r7
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	3332      	adds	r3, #50	; 0x32
 8001f40:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001f4a:	f7ff fbab 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001f4e:	6862      	ldr	r2, [r4, #4]
 8001f50:	4368      	muls	r0, r5
 8001f52:	0052      	lsls	r2, r2, #1
 8001f54:	fbb0 faf2 	udiv	sl, r0, r2
 8001f58:	f7ff fba4 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001f5c:	e7b9      	b.n	8001ed2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f5e:	429e      	cmp	r6, r3
 8001f60:	d002      	beq.n	8001f68 <UART_SetConfig+0x148>
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <UART_SetConfig+0x230>)
 8001f64:	429e      	cmp	r6, r3
 8001f66:	d140      	bne.n	8001fea <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f68:	f7ff fbac 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001f6c:	6867      	ldr	r7, [r4, #4]
 8001f6e:	2519      	movs	r5, #25
 8001f70:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f74:	fb05 f300 	mul.w	r3, r5, r0
 8001f78:	00bf      	lsls	r7, r7, #2
 8001f7a:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f82:	011f      	lsls	r7, r3, #4
 8001f84:	f7ff fb9e 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	4368      	muls	r0, r5
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001f92:	f7ff fb97 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001f96:	6863      	ldr	r3, [r4, #4]
 8001f98:	4368      	muls	r0, r5
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fa4:	fb09 8313 	mls	r3, r9, r3, r8
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	3332      	adds	r3, #50	; 0x32
 8001fac:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fb0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001fb4:	f7ff fb86 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	6862      	ldr	r2, [r4, #4]
 8001fba:	4368      	muls	r0, r5
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	fbb0 faf2 	udiv	sl, r0, r2
 8001fc2:	f7ff fb7f 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fc6:	6863      	ldr	r3, [r4, #4]
 8001fc8:	4368      	muls	r0, r5
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fd4:	fb09 a313 	mls	r3, r9, r3, sl
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	3332      	adds	r3, #50	; 0x32
 8001fdc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	ea43 0308 	orr.w	r3, r3, r8
 8001fe8:	e783      	b.n	8001ef2 <UART_SetConfig+0xd2>
 8001fea:	f7ff fb5b 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001fee:	6867      	ldr	r7, [r4, #4]
 8001ff0:	2519      	movs	r5, #25
 8001ff2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ff6:	fb05 f300 	mul.w	r3, r5, r0
 8001ffa:	00bf      	lsls	r7, r7, #2
 8001ffc:	fbb3 f3f7 	udiv	r3, r3, r7
 8002000:	fbb3 f3f9 	udiv	r3, r3, r9
 8002004:	011f      	lsls	r7, r3, #4
 8002006:	f7ff fb4d 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 800200a:	6863      	ldr	r3, [r4, #4]
 800200c:	4368      	muls	r0, r5
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fbb0 f8f3 	udiv	r8, r0, r3
 8002014:	f7ff fb46 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8002018:	6863      	ldr	r3, [r4, #4]
 800201a:	4368      	muls	r0, r5
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	fbb3 f3f9 	udiv	r3, r3, r9
 8002026:	fb09 8313 	mls	r3, r9, r3, r8
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	3332      	adds	r3, #50	; 0x32
 800202e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002032:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002036:	f7ff fb35 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 800203a:	6862      	ldr	r2, [r4, #4]
 800203c:	4368      	muls	r0, r5
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	fbb0 faf2 	udiv	sl, r0, r2
 8002044:	f7ff fb2e 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8002048:	e7bd      	b.n	8001fc6 <UART_SetConfig+0x1a6>
 800204a:	bf00      	nop
 800204c:	40011000 	.word	0x40011000
 8002050:	40011400 	.word	0x40011400

08002054 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	4604      	mov	r4, r0
 8002058:	460e      	mov	r6, r1
 800205a:	4617      	mov	r7, r2
 800205c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800205e:	6821      	ldr	r1, [r4, #0]
 8002060:	680b      	ldr	r3, [r1, #0]
 8002062:	ea36 0303 	bics.w	r3, r6, r3
 8002066:	d101      	bne.n	800206c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002068:	2000      	movs	r0, #0
}
 800206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800206c:	1c6b      	adds	r3, r5, #1
 800206e:	d0f7      	beq.n	8002060 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002070:	b995      	cbnz	r5, 8002098 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800207a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002084:	2320      	movs	r3, #32
 8002086:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800208a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800208e:	2300      	movs	r3, #0
 8002090:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002094:	2003      	movs	r0, #3
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002098:	f7fe ff5c 	bl	8000f54 <HAL_GetTick>
 800209c:	1bc0      	subs	r0, r0, r7
 800209e:	4285      	cmp	r5, r0
 80020a0:	d2dd      	bcs.n	800205e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80020a2:	e7e6      	b.n	8002072 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080020a4 <HAL_UART_Init>:
{
 80020a4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80020a6:	4604      	mov	r4, r0
 80020a8:	b340      	cbz	r0, 80020fc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80020aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b2:	b91b      	cbnz	r3, 80020bc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80020b8:	f000 fc04 	bl	80028c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020be:	2324      	movs	r3, #36	; 0x24
 80020c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020c4:	68d3      	ldr	r3, [r2, #12]
 80020c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020ca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7ff fea7 	bl	8001e20 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ec:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80020ee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80020f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80020f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80020fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
}
 80020fe:	bd10      	pop	{r4, pc}

08002100 <HAL_UART_Transmit>:
{
 8002100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002104:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002106:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800210a:	2b20      	cmp	r3, #32
{
 800210c:	4604      	mov	r4, r0
 800210e:	460d      	mov	r5, r1
 8002110:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002112:	d14f      	bne.n	80021b4 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002114:	2900      	cmp	r1, #0
 8002116:	d04a      	beq.n	80021ae <HAL_UART_Transmit+0xae>
 8002118:	2a00      	cmp	r2, #0
 800211a:	d048      	beq.n	80021ae <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800211c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002120:	2b01      	cmp	r3, #1
 8002122:	d047      	beq.n	80021b4 <HAL_UART_Transmit+0xb4>
 8002124:	2301      	movs	r3, #1
 8002126:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212a:	2300      	movs	r3, #0
 800212c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800212e:	2321      	movs	r3, #33	; 0x21
 8002130:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002134:	f7fe ff0e 	bl	8000f54 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002138:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800213c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800213e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002142:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002144:	b29b      	uxth	r3, r3
 8002146:	b96b      	cbnz	r3, 8002164 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4632      	mov	r2, r6
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff ff80 	bl	8002054 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002154:	b9b0      	cbnz	r0, 8002184 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002156:	2320      	movs	r3, #32
 8002158:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800215c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002164:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002166:	3b01      	subs	r3, #1
 8002168:	b29b      	uxth	r3, r3
 800216a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002172:	4632      	mov	r2, r6
 8002174:	463b      	mov	r3, r7
 8002176:	f04f 0180 	mov.w	r1, #128	; 0x80
 800217a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800217c:	d10e      	bne.n	800219c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800217e:	f7ff ff69 	bl	8002054 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002182:	b110      	cbz	r0, 800218a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002184:	2003      	movs	r0, #3
 8002186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800218a:	882b      	ldrh	r3, [r5, #0]
 800218c:	6822      	ldr	r2, [r4, #0]
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002194:	6923      	ldr	r3, [r4, #16]
 8002196:	b943      	cbnz	r3, 80021aa <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002198:	3502      	adds	r5, #2
 800219a:	e7d2      	b.n	8002142 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800219c:	f7ff ff5a 	bl	8002054 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d1ef      	bne.n	8002184 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	782a      	ldrb	r2, [r5, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	3501      	adds	r5, #1
 80021ac:	e7c9      	b.n	8002142 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
 80021b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80021b4:	2002      	movs	r0, #2
}
 80021b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080021bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021bc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021be:	2214      	movs	r2, #20
{
 80021c0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	eb0d 0002 	add.w	r0, sp, r2
 80021c6:	2100      	movs	r1, #0
 80021c8:	f000 fc02 	bl	80029d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021cc:	2400      	movs	r4, #0
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <MX_GPIO_Init+0x9c>)
 80021d0:	9401      	str	r4, [sp, #4]
 80021d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INB1_Pin|INA1_Pin, GPIO_PIN_RESET);
 80021d4:	4d21      	ldr	r5, [pc, #132]	; (800225c <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	f042 0204 	orr.w	r2, r2, #4
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
 80021dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021de:	f002 0204 	and.w	r2, r2, #4
 80021e2:	9201      	str	r2, [sp, #4]
 80021e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021e6:	9402      	str	r4, [sp, #8]
 80021e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
 80021f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80021f6:	9202      	str	r2, [sp, #8]
 80021f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	9403      	str	r4, [sp, #12]
 80021fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
 8002204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002206:	f002 0201 	and.w	r2, r2, #1
 800220a:	9203      	str	r2, [sp, #12]
 800220c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	9404      	str	r4, [sp, #16]
 8002210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002212:	f042 0202 	orr.w	r2, r2, #2
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, INB1_Pin|INA1_Pin, GPIO_PIN_RESET);
 800221e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002220:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, INB1_Pin|INA1_Pin, GPIO_PIN_RESET);
 8002222:	4628      	mov	r0, r5
 8002224:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, INB1_Pin|INA1_Pin, GPIO_PIN_RESET);
 8002228:	f7fe ffec 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800222c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002230:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <MX_GPIO_Init+0xa4>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	480b      	ldr	r0, [pc, #44]	; (8002264 <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002238:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223c:	f7fe ff0c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INB1_Pin|INA1_Pin;
 8002240:	23c0      	movs	r3, #192	; 0xc0
 8002242:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f7fe ff02 	bl	8001058 <HAL_GPIO_Init>

}
 8002254:	b00b      	add	sp, #44	; 0x2c
 8002256:	bd30      	pop	{r4, r5, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	40020000 	.word	0x40020000
 8002260:	10110000 	.word	0x10110000
 8002264:	40020800 	.word	0x40020800

08002268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002268:	b530      	push	{r4, r5, lr}
 800226a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226c:	2230      	movs	r2, #48	; 0x30
 800226e:	2100      	movs	r1, #0
 8002270:	a808      	add	r0, sp, #32
 8002272:	f000 fbad 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002276:	2100      	movs	r1, #0
 8002278:	2214      	movs	r2, #20
 800227a:	a803      	add	r0, sp, #12
 800227c:	f000 fba8 	bl	80029d0 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	2400      	movs	r4, #0
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <SystemClock_Config+0x8c>)
 8002284:	9401      	str	r4, [sp, #4]
 8002286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800229a:	9402      	str	r4, [sp, #8]
 800229c:	6813      	ldr	r3, [r2, #0]
 800229e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022aa:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022b4:	2301      	movs	r3, #1
 80022b6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b8:	2310      	movs	r3, #16
 80022ba:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022bc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022be:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022c2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022c4:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022cc:	2307      	movs	r3, #7
 80022ce:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d2:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d4:	f7fe ff9c 	bl	8001210 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d8:	230f      	movs	r3, #15
 80022da:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022dc:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022e8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ea:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ec:	f7ff f940 	bl	8001570 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80022f0:	b015      	add	sp, #84	; 0x54
 80022f2:	bd30      	pop	{r4, r5, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000
 80022fc:	00000000 	.word	0x00000000

08002300 <main>:
{
 8002300:	b5d0      	push	{r4, r6, r7, lr}
 8002302:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8002304:	f7fe fe00 	bl	8000f08 <HAL_Init>
  SystemClock_Config();
 8002308:	f7ff ffae 	bl	8002268 <SystemClock_Config>
  MX_GPIO_Init();
 800230c:	f7ff ff56 	bl	80021bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002310:	f000 fabc 	bl	800288c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002314:	f000 f96c 	bl	80025f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002318:	f000 f99a 	bl	8002650 <MX_TIM3_Init>
  MX_TIM2_Init();
 800231c:	f000 fa7e 	bl	800281c <MX_TIM2_Init>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8002320:	2100      	movs	r1, #0
 8002322:	4837      	ldr	r0, [pc, #220]	; (8002400 <main+0x100>)
 8002324:	f7ff fa5d 	bl	80017e2 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8002328:	2104      	movs	r1, #4
 800232a:	4835      	ldr	r0, [pc, #212]	; (8002400 <main+0x100>)
 800232c:	f7ff fa59 	bl	80017e2 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002330:	2100      	movs	r1, #0
 8002332:	4834      	ldr	r0, [pc, #208]	; (8002404 <main+0x104>)
 8002334:	f7ff fd3a 	bl	8001dac <HAL_TIM_PWM_Start>
	TIM1->CNT = DEFAULT_ENC_COUNTER_VALUE;
 8002338:	4b33      	ldr	r3, [pc, #204]	; (8002408 <main+0x108>)
	HAL_TIM_Base_Start_IT(&htim3);
 800233a:	4834      	ldr	r0, [pc, #208]	; (800240c <main+0x10c>)
	TIM1->CNT = DEFAULT_ENC_COUNTER_VALUE;
 800233c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
	ki = 0;	//kp / Ti;
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <main+0x110>)
	char p[30] = "";
 8002344:	2400      	movs	r4, #0
	ki = 0;	//kp / Ti;
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 800234a:	f7ff fa3f 	bl	80017cc <HAL_TIM_Base_Start_IT>
	char p[30] = "";
 800234e:	4621      	mov	r1, r4
 8002350:	221a      	movs	r2, #26
 8002352:	a803      	add	r0, sp, #12
 8002354:	9402      	str	r4, [sp, #8]
 8002356:	f000 fb3b 	bl	80029d0 <memset>
	char a[30] = "";
 800235a:	4621      	mov	r1, r4
 800235c:	221a      	movs	r2, #26
 800235e:	a80b      	add	r0, sp, #44	; 0x2c
 8002360:	940a      	str	r4, [sp, #40]	; 0x28
 8002362:	f000 fb35 	bl	80029d0 <memset>
	char c[30] = "";
 8002366:	221a      	movs	r2, #26
 8002368:	4621      	mov	r1, r4
 800236a:	a813      	add	r0, sp, #76	; 0x4c
 800236c:	9412      	str	r4, [sp, #72]	; 0x48
		snprintf(a, sizeof(a), "\n\r%f", ((float) error * INC_TO_DEG_COEFF));
 800236e:	a722      	add	r7, pc, #136	; (adr r7, 80023f8 <main+0xf8>)
 8002370:	e9d7 6700 	ldrd	r6, r7, [r7]
	char c[30] = "";
 8002374:	f000 fb2c 	bl	80029d0 <memset>
	reference = (int32_t) (angle * DEG_TO_INC_COEFF);
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <main+0x114>)
		HAL_UART_Transmit(&huart2, p, sizeof(p), 50);
 800237a:	4c27      	ldr	r4, [pc, #156]	; (8002418 <main+0x118>)
	reference = (int32_t) (angle * DEG_TO_INC_COEFF);
 800237c:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8002380:	601a      	str	r2, [r3, #0]
		snprintf(p, sizeof(p), "\n\ru: %d", u);
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <main+0x11c>)
 8002384:	4a26      	ldr	r2, [pc, #152]	; (8002420 <main+0x120>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	211e      	movs	r1, #30
 800238a:	a802      	add	r0, sp, #8
 800238c:	f000 fb28 	bl	80029e0 <snprintf>
		HAL_UART_Transmit(&huart2, p, sizeof(p), 50);
 8002390:	221e      	movs	r2, #30
 8002392:	a902      	add	r1, sp, #8
 8002394:	2332      	movs	r3, #50	; 0x32
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff feb2 	bl	8002100 <HAL_UART_Transmit>
		snprintf(a, sizeof(a), "\n\r%f", ((float) error * INC_TO_DEG_COEFF));
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <main+0x124>)
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	ee07 0a90 	vmov	s15, r0
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	ee17 0a90 	vmov	r0, s15
 80023ac:	f7fe f8d4 	bl	8000558 <__aeabi_f2d>
 80023b0:	463b      	mov	r3, r7
 80023b2:	4632      	mov	r2, r6
 80023b4:	f7fe f924 	bl	8000600 <__aeabi_dmul>
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <main+0x128>)
 80023ba:	e9cd 0100 	strd	r0, r1, [sp]
 80023be:	211e      	movs	r1, #30
 80023c0:	a80a      	add	r0, sp, #40	; 0x28
 80023c2:	f000 fb0d 	bl	80029e0 <snprintf>
		HAL_UART_Transmit(&huart2, a, sizeof(a), 50);
 80023c6:	a90a      	add	r1, sp, #40	; 0x28
 80023c8:	2332      	movs	r3, #50	; 0x32
 80023ca:	221e      	movs	r2, #30
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff fe97 	bl	8002100 <HAL_UART_Transmit>
		snprintf(c, sizeof(c), "\n\rcnt: %d", TIM1->CNT);
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <main+0x108>)
 80023d4:	4a15      	ldr	r2, [pc, #84]	; (800242c <main+0x12c>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	211e      	movs	r1, #30
 80023da:	a812      	add	r0, sp, #72	; 0x48
 80023dc:	f000 fb00 	bl	80029e0 <snprintf>
		HAL_UART_Transmit(&huart2, c, sizeof(c), 50);
 80023e0:	2332      	movs	r3, #50	; 0x32
 80023e2:	221e      	movs	r2, #30
 80023e4:	a912      	add	r1, sp, #72	; 0x48
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7ff fe8a 	bl	8002100 <HAL_UART_Transmit>
		HAL_Delay(200);
 80023ec:	20c8      	movs	r0, #200	; 0xc8
 80023ee:	f7fe fdb7 	bl	8000f60 <HAL_Delay>
 80023f2:	e7c6      	b.n	8002382 <main+0x82>
 80023f4:	f3af 8000 	nop.w
 80023f8:	13246ab1 	.word	0x13246ab1
 80023fc:	3fb9a87d 	.word	0x3fb9a87d
 8002400:	2000072c 	.word	0x2000072c
 8002404:	20000768 	.word	0x20000768
 8002408:	40010000 	.word	0x40010000
 800240c:	200006f0 	.word	0x200006f0
 8002410:	200006a4 	.word	0x200006a4
 8002414:	2000000c 	.word	0x2000000c
 8002418:	200007a4 	.word	0x200007a4
 800241c:	200006ac 	.word	0x200006ac
 8002420:	08005800 	.word	0x08005800
 8002424:	200006a0 	.word	0x200006a0
 8002428:	08005808 	.word	0x08005808
 800242c:	0800580d 	.word	0x0800580d

08002430 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

#define DIR_CHANGE_VALUES_QUANTITY 3

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b508      	push	{r3, lr}
	static uint8_t dir_changing_flag = 0;
	static uint8_t dir_change_counter = 0;
	static uint16_t encoder_values[DIR_CHANGE_VALUES_QUANTITY];
	static int temp=0;

	if (htim->Instance == TIM3)
 8002432:	6802      	ldr	r2, [r0, #0]
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002436:	429a      	cmp	r2, r3
 8002438:	d15c      	bne.n	80024f4 <HAL_TIM_PeriodElapsedCallback+0xc4>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, u);

		//prev_direction = direction;
*/

		HAL_GPIO_WritePin(GPIOA, INA1_Pin, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	482f      	ldr	r0, [pc, #188]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002440:	f7fe fee0 	bl	8001204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, INB1_Pin, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	482c      	ldr	r0, [pc, #176]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800244a:	f7fe fedb 	bl	8001204 <HAL_GPIO_WritePin>
		int32_t count = 0;

		//count = __HAL_TIM_GET_COUNTER(&htim1);
		//__HAL_TIM_SET_COUNTER(&htim1, 0);

		count = __HAL_TIM_GET_COUNTER(&htim1);
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0xd0>)
		//snprintf(p, sizeof(p), "\n\r%d", error);
		//HAL_UART_Transmit(&huart2, p, sizeof(p), 50);

		error = reference - position;

		ui = ui + (int32_t) (ki * Ts * error);
 8002450:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002504 <HAL_TIM_PeriodElapsedCallback+0xd4>
		count = __HAL_TIM_GET_COUNTER(&htim1);
 8002454:	681a      	ldr	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, DEFAULT_ENC_COUNTER_VALUE);
 8002456:	f644 6120 	movw	r1, #20000	; 0x4e20
		count = __HAL_TIM_GET_COUNTER(&htim1);
 800245a:	6a53      	ldr	r3, [r2, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim1, DEFAULT_ENC_COUNTER_VALUE);
 800245c:	6251      	str	r1, [r2, #36]	; 0x24
		position += count;
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0xd8>)
		count = count - DEFAULT_ENC_COUNTER_VALUE;
 8002460:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
		position += count;
 8002464:	6811      	ldr	r1, [r2, #0]
		count = count - DEFAULT_ENC_COUNTER_VALUE;
 8002466:	3b20      	subs	r3, #32
		position += count;
 8002468:	440b      	add	r3, r1
 800246a:	6013      	str	r3, [r2, #0]
		error = reference - position;
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800246e:	4928      	ldr	r1, [pc, #160]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	600b      	str	r3, [r1, #0]
		ui = ui + (int32_t) (ki * Ts * error);
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800247a:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800247c:	ed93 7a00 	vldr	s14, [r3]
 8002480:	edd1 7a00 	vldr	s15, [r1]
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	ee27 7a26 	vmul.f32	s14, s14, s13
 800248a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002496:	ee17 0a90 	vmov	r0, s15
 800249a:	4418      	add	r0, r3
 800249c:	6010      	str	r0, [r2, #0]

		if (ui > 200)
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	2bc8      	cmp	r3, #200	; 0xc8
			ui = 200;
 80024a2:	bfc4      	itt	gt
 80024a4:	23c8      	movgt	r3, #200	; 0xc8
 80024a6:	6013      	strgt	r3, [r2, #0]

		u = (int32_t) (kp * error) + ui;
 80024a8:	edd1 7a00 	vldr	s15, [r1]
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b2:	ed93 7a00 	vldr	s14, [r3]
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c0:	ee17 2a90 	vmov	r2, s15
 80024c4:	441a      	add	r2, r3
 80024c6:	4613      	mov	r3, r2
 80024c8:	4a15      	ldr	r2, [pc, #84]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80024ca:	6013      	str	r3, [r2, #0]

		if (u > 500)
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024d2:	4613      	mov	r3, r2
			u = 500;
 80024d4:	bfc4      	itt	gt
 80024d6:	f44f 72fa 	movgt.w	r2, #500	; 0x1f4
 80024da:	601a      	strgt	r2, [r3, #0]

		if (u < 30) {
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2a1d      	cmp	r2, #29
			u = 0;
 80024e0:	bfdc      	itt	le
 80024e2:	2200      	movle	r2, #0
 80024e4:	601a      	strle	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
		else if (u > 0)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
			*/
		//if (abs(error) > ERROR_TOLERANCE_INC)
__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, abs(u));
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	bfb8      	it	lt
 80024f0:	425b      	neglt	r3, r3
 80024f2:	6353      	str	r3, [r2, #52]	; 0x34
 80024f4:	bd08      	pop	{r3, pc}
 80024f6:	bf00      	nop
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40020000 	.word	0x40020000
 8002500:	2000072c 	.word	0x2000072c
 8002504:	3a83126f 	.word	0x3a83126f
 8002508:	200006a8 	.word	0x200006a8
 800250c:	2000000c 	.word	0x2000000c
 8002510:	200006a0 	.word	0x200006a0
 8002514:	200006a4 	.word	0x200006a4
 8002518:	200006b0 	.word	0x200006b0
 800251c:	20000008 	.word	0x20000008
 8002520:	200006ac 	.word	0x200006ac
 8002524:	20000768 	.word	0x20000768

08002528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002528:	4770      	bx	lr
	...

0800252c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800252c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_MspInit+0x3c>)
 8002530:	2100      	movs	r1, #0
 8002532:	9100      	str	r1, [sp, #0]
 8002534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
 800253c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800253e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002542:	9200      	str	r2, [sp, #0]
 8002544:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	9101      	str	r1, [sp, #4]
 8002548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002558:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800255c:	f7fe fd14 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002560:	b003      	add	sp, #12
 8002562:	f85d fb04 	ldr.w	pc, [sp], #4
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <NMI_Handler>:
 800256c:	4770      	bx	lr

0800256e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256e:	e7fe      	b.n	800256e <HardFault_Handler>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	e7fe      	b.n	8002574 <UsageFault_Handler>

08002576 <SVC_Handler>:
 8002576:	4770      	bx	lr

08002578 <DebugMon_Handler>:
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	4770      	bx	lr

0800257c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f7fe bcde 	b.w	8000f3c <HAL_IncTick>

08002580 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002580:	4801      	ldr	r0, [pc, #4]	; (8002588 <TIM1_CC_IRQHandler+0x8>)
 8002582:	f7ff ba0d 	b.w	80019a0 <HAL_TIM_IRQHandler>
 8002586:	bf00      	nop
 8002588:	2000072c 	.word	0x2000072c

0800258c <TIM1_TRG_COM_TIM11_IRQHandler>:
 800258c:	f7ff bff8 	b.w	8002580 <TIM1_CC_IRQHandler>

08002590 <TIM1_UP_TIM10_IRQHandler>:
 8002590:	f7ff bff6 	b.w	8002580 <TIM1_CC_IRQHandler>

08002594 <TIM1_BRK_TIM9_IRQHandler>:
 8002594:	f7ff bff4 	b.w	8002580 <TIM1_CC_IRQHandler>

08002598 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002598:	4801      	ldr	r0, [pc, #4]	; (80025a0 <TIM3_IRQHandler+0x8>)
 800259a:	f7ff ba01 	b.w	80019a0 <HAL_TIM_IRQHandler>
 800259e:	bf00      	nop
 80025a0:	200006f0 	.word	0x200006f0

080025a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a4:	490f      	ldr	r1, [pc, #60]	; (80025e4 <SystemInit+0x40>)
 80025a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <SystemInit+0x44>)
 80025b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80025be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80025c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <SystemInit+0x48>)
 80025ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025de:	608b      	str	r3, [r1, #8]
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	24003010 	.word	0x24003010

080025f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025f0:	b510      	push	{r4, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 80025f4:	2100      	movs	r1, #0
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	a803      	add	r0, sp, #12
 80025fa:	f000 f9e9 	bl	80029d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
 80025fe:	4812      	ldr	r0, [pc, #72]	; (8002648 <MX_TIM1_Init+0x58>)
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <MX_TIM1_Init+0x5c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002602:	2400      	movs	r4, #0
  htim1.Init.Prescaler = 0;
 8002604:	e880 0018 	stmia.w	r0, {r3, r4}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 8002608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800260e:	2303      	movs	r3, #3
 8002610:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002612:	2301      	movs	r3, #1
 8002614:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002616:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 6;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002618:	a903      	add	r1, sp, #12
  sConfig.IC2Filter = 6;
 800261a:	2306      	movs	r3, #6
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	9401      	str	r4, [sp, #4]
 800261e:	9402      	str	r4, [sp, #8]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002624:	6144      	str	r4, [r0, #20]
  sConfig.IC2Filter = 6;
 8002626:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002628:	f7ff fadc 	bl	8001be4 <HAL_TIM_Encoder_Init>
 800262c:	b108      	cbz	r0, 8002632 <MX_TIM1_Init+0x42>
  {
    Error_Handler();
 800262e:	f7ff ff7b 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002632:	a901      	add	r1, sp, #4
 8002634:	4804      	ldr	r0, [pc, #16]	; (8002648 <MX_TIM1_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002638:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800263a:	f7ff fbcd 	bl	8001dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800263e:	b108      	cbz	r0, 8002644 <MX_TIM1_Init+0x54>
  {
    Error_Handler();
 8002640:	f7ff ff72 	bl	8002528 <Error_Handler>
  }

}
 8002644:	b00c      	add	sp, #48	; 0x30
 8002646:	bd10      	pop	{r4, pc}
 8002648:	2000072c 	.word	0x2000072c
 800264c:	40010000 	.word	0x40010000

08002650 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002650:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002652:	2210      	movs	r2, #16
 8002654:	2100      	movs	r1, #0
 8002656:	a802      	add	r0, sp, #8
 8002658:	f000 f9ba 	bl	80029d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
 800265c:	4814      	ldr	r0, [pc, #80]	; (80026b0 <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 21;
 800265e:	4915      	ldr	r1, [pc, #84]	; (80026b4 <MX_TIM3_Init+0x64>)
 8002660:	2215      	movs	r2, #21
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002662:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 21;
 8002664:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4000;
 8002668:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002670:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 4000;
 8002672:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002674:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002676:	f7ff fa81 	bl	8001b7c <HAL_TIM_Base_Init>
 800267a:	b108      	cbz	r0, 8002680 <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 800267c:	f7ff ff54 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002684:	a902      	add	r1, sp, #8
 8002686:	480a      	ldr	r0, [pc, #40]	; (80026b0 <MX_TIM3_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002688:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800268a:	f7ff f8cc 	bl	8001826 <HAL_TIM_ConfigClockSource>
 800268e:	b108      	cbz	r0, 8002694 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 8002690:	f7ff ff4a 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002694:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002696:	4669      	mov	r1, sp
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800269e:	f7ff fb9b 	bl	8001dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	b108      	cbz	r0, 80026a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80026a4:	f7ff ff40 	bl	8002528 <Error_Handler>
  }

}
 80026a8:	b007      	add	sp, #28
 80026aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ae:	bf00      	nop
 80026b0:	200006f0 	.word	0x200006f0
 80026b4:	40000400 	.word	0x40000400

080026b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026b8:	b510      	push	{r4, lr}
 80026ba:	4604      	mov	r4, r0
 80026bc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026be:	2214      	movs	r2, #20
 80026c0:	2100      	movs	r1, #0
 80026c2:	a803      	add	r0, sp, #12
 80026c4:	f000 f984 	bl	80029d0 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_TIM_Encoder_MspInit+0xa4>)
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d142      	bne.n	8002756 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026d0:	2400      	movs	r4, #0
 80026d2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80026d6:	9401      	str	r4, [sp, #4]
 80026d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	4821      	ldr	r0, [pc, #132]	; (8002760 <HAL_TIM_Encoder_MspInit+0xa8>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
 80026e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e4:	f002 0201 	and.w	r2, r2, #1
 80026e8:	9201      	str	r2, [sp, #4]
 80026ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	9402      	str	r4, [sp, #8]
 80026ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002704:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270c:	2301      	movs	r3, #1
 800270e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002710:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f7fe fca1 	bl	8001058 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002716:	4622      	mov	r2, r4
 8002718:	4621      	mov	r1, r4
 800271a:	2018      	movs	r0, #24
 800271c:	f7fe fc46 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002720:	2018      	movs	r0, #24
 8002722:	f7fe fc77 	bl	8001014 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002726:	4622      	mov	r2, r4
 8002728:	4621      	mov	r1, r4
 800272a:	2019      	movs	r0, #25
 800272c:	f7fe fc3e 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002730:	2019      	movs	r0, #25
 8002732:	f7fe fc6f 	bl	8001014 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002736:	4622      	mov	r2, r4
 8002738:	4621      	mov	r1, r4
 800273a:	201a      	movs	r0, #26
 800273c:	f7fe fc36 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002740:	201a      	movs	r0, #26
 8002742:	f7fe fc67 	bl	8001014 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002746:	201b      	movs	r0, #27
 8002748:	4622      	mov	r2, r4
 800274a:	4621      	mov	r1, r4
 800274c:	f7fe fc2e 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002750:	201b      	movs	r0, #27
 8002752:	f7fe fc5f 	bl	8001014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002756:	b008      	add	sp, #32
 8002758:	bd10      	pop	{r4, pc}
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8002764:	6803      	ldr	r3, [r0, #0]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800276a:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM2)
 800276c:	d10b      	bne.n	8002786 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_TIM_PWM_MspInit+0x28>)
 8002774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002786:	b002      	add	sp, #8
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002790:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_TIM_Base_MspInit+0x38>)
 8002794:	6802      	ldr	r2, [r0, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d113      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800279a:	2200      	movs	r2, #0
 800279c:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027a4:	f041 0102 	orr.w	r1, r1, #2
 80027a8:	6419      	str	r1, [r3, #64]	; 0x40
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	9301      	str	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027b2:	201d      	movs	r0, #29
 80027b4:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027b8:	f7fe fbf8 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027bc:	201d      	movs	r0, #29
 80027be:	f7fe fc29 	bl	8001014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027c2:	b003      	add	sp, #12
 80027c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027c8:	40000400 	.word	0x40000400

080027cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027cc:	b510      	push	{r4, lr}
 80027ce:	4604      	mov	r4, r0
 80027d0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d2:	2214      	movs	r2, #20
 80027d4:	2100      	movs	r1, #0
 80027d6:	a801      	add	r0, sp, #4
 80027d8:	f000 f8fa 	bl	80029d0 <memset>
  if(timHandle->Instance==TIM2)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e2:	d115      	bne.n	8002810 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	480b      	ldr	r0, [pc, #44]	; (8002818 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027fe:	2320      	movs	r3, #32
 8002800:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002808:	2301      	movs	r3, #1
 800280a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f7fe fc24 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002810:	b006      	add	sp, #24
 8002812:	bd10      	pop	{r4, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000

0800281c <MX_TIM2_Init>:
{
 800281c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281e:	2400      	movs	r4, #0
{
 8002820:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002822:	221c      	movs	r2, #28
 8002824:	4621      	mov	r1, r4
 8002826:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002828:	9401      	str	r4, [sp, #4]
 800282a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800282c:	f000 f8d0 	bl	80029d0 <memset>
  htim2.Instance = TIM2;
 8002830:	4815      	ldr	r0, [pc, #84]	; (8002888 <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 3;
 8002832:	2303      	movs	r3, #3
 8002834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002838:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 1050;
 800283c:	f240 431a 	movw	r3, #1050	; 0x41a
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 1050;
 8002842:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002846:	f7ff f9b3 	bl	8001bb0 <HAL_TIM_PWM_Init>
 800284a:	b108      	cbz	r0, 8002850 <MX_TIM2_Init+0x34>
    Error_Handler();
 800284c:	f7ff fe6c 	bl	8002528 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002850:	a901      	add	r1, sp, #4
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002854:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002858:	f7ff fabe 	bl	8001dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800285c:	b108      	cbz	r0, 8002862 <MX_TIM2_Init+0x46>
    Error_Handler();
 800285e:	f7ff fe63 	bl	8002528 <Error_Handler>
  sConfigOC.Pulse = 0;
 8002862:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002864:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002866:	a903      	add	r1, sp, #12
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <MX_TIM2_Init+0x6c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800286a:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 800286c:	9204      	str	r2, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800286e:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002870:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002872:	f7ff fa2d 	bl	8001cd0 <HAL_TIM_PWM_ConfigChannel>
 8002876:	b108      	cbz	r0, 800287c <MX_TIM2_Init+0x60>
    Error_Handler();
 8002878:	f7ff fe56 	bl	8002528 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <MX_TIM2_Init+0x6c>)
 800287e:	f7ff ffa5 	bl	80027cc <HAL_TIM_MspPostInit>
}
 8002882:	b00a      	add	sp, #40	; 0x28
 8002884:	bd10      	pop	{r4, pc}
 8002886:	bf00      	nop
 8002888:	20000768 	.word	0x20000768

0800288c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800288c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800288e:	480b      	ldr	r0, [pc, #44]	; (80028bc <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_USART2_UART_Init+0x34>)
 8002892:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002896:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800289a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800289c:	2300      	movs	r3, #0
 800289e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028a0:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028aa:	f7ff fbfb 	bl	80020a4 <HAL_UART_Init>
 80028ae:	b118      	cbz	r0, 80028b8 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80028b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80028b4:	f7ff be38 	b.w	8002528 <Error_Handler>
 80028b8:	bd08      	pop	{r3, pc}
 80028ba:	bf00      	nop
 80028bc:	200007a4 	.word	0x200007a4
 80028c0:	40004400 	.word	0x40004400

080028c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028c4:	b510      	push	{r4, lr}
 80028c6:	4604      	mov	r4, r0
 80028c8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	2214      	movs	r2, #20
 80028cc:	2100      	movs	r1, #0
 80028ce:	a803      	add	r0, sp, #12
 80028d0:	f000 f87e 	bl	80029d0 <memset>
  if(uartHandle->Instance==USART2)
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_UART_MspInit+0x68>)
 80028d8:	429a      	cmp	r2, r3
 80028da:	d124      	bne.n	8002926 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028dc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80028e0:	2100      	movs	r1, #0
 80028e2:	9101      	str	r1, [sp, #4]
 80028e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	4812      	ldr	r0, [pc, #72]	; (8002930 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80028f4:	9201      	str	r2, [sp, #4]
 80028f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	9102      	str	r1, [sp, #8]
 80028fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	9302      	str	r3, [sp, #8]
 800290a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800290c:	230c      	movs	r3, #12
 800290e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002914:	2301      	movs	r3, #1
 8002916:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800291e:	2307      	movs	r3, #7
 8002920:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f7fe fb99 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002926:	b008      	add	sp, #32
 8002928:	bd10      	pop	{r4, pc}
 800292a:	bf00      	nop
 800292c:	40004400 	.word	0x40004400
 8002930:	40020000 	.word	0x40020000

08002934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800296c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002938:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800293a:	e003      	b.n	8002944 <LoopCopyDataInit>

0800293c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800293e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002940:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002942:	3104      	adds	r1, #4

08002944 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002944:	480b      	ldr	r0, [pc, #44]	; (8002974 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002948:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800294a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800294c:	d3f6      	bcc.n	800293c <CopyDataInit>
  ldr  r2, =_sbss
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002950:	e002      	b.n	8002958 <LoopFillZerobss>

08002952 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002952:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002954:	f842 3b04 	str.w	r3, [r2], #4

08002958 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800295a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800295c:	d3f9      	bcc.n	8002952 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800295e:	f7ff fe21 	bl	80025a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002962:	f000 f811 	bl	8002988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002966:	f7ff fccb 	bl	8002300 <main>
  bx  lr    
 800296a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800296c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002970:	08005aa8 	.word	0x08005aa8
  ldr  r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002978:	20000684 	.word	0x20000684
  ldr  r2, =_sbss
 800297c:	20000684 	.word	0x20000684
  ldr  r3, = _ebss
 8002980:	200007f4 	.word	0x200007f4

08002984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC_IRQHandler>
	...

08002988 <__libc_init_array>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	4e0d      	ldr	r6, [pc, #52]	; (80029c0 <__libc_init_array+0x38>)
 800298c:	4c0d      	ldr	r4, [pc, #52]	; (80029c4 <__libc_init_array+0x3c>)
 800298e:	1ba4      	subs	r4, r4, r6
 8002990:	10a4      	asrs	r4, r4, #2
 8002992:	2500      	movs	r5, #0
 8002994:	42a5      	cmp	r5, r4
 8002996:	d109      	bne.n	80029ac <__libc_init_array+0x24>
 8002998:	4e0b      	ldr	r6, [pc, #44]	; (80029c8 <__libc_init_array+0x40>)
 800299a:	4c0c      	ldr	r4, [pc, #48]	; (80029cc <__libc_init_array+0x44>)
 800299c:	f002 ff22 	bl	80057e4 <_init>
 80029a0:	1ba4      	subs	r4, r4, r6
 80029a2:	10a4      	asrs	r4, r4, #2
 80029a4:	2500      	movs	r5, #0
 80029a6:	42a5      	cmp	r5, r4
 80029a8:	d105      	bne.n	80029b6 <__libc_init_array+0x2e>
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029b0:	4798      	blx	r3
 80029b2:	3501      	adds	r5, #1
 80029b4:	e7ee      	b.n	8002994 <__libc_init_array+0xc>
 80029b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ba:	4798      	blx	r3
 80029bc:	3501      	adds	r5, #1
 80029be:	e7f2      	b.n	80029a6 <__libc_init_array+0x1e>
 80029c0:	08005aa0 	.word	0x08005aa0
 80029c4:	08005aa0 	.word	0x08005aa0
 80029c8:	08005aa0 	.word	0x08005aa0
 80029cc:	08005aa4 	.word	0x08005aa4

080029d0 <memset>:
 80029d0:	4402      	add	r2, r0
 80029d2:	4603      	mov	r3, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <snprintf>:
 80029e0:	b40c      	push	{r2, r3}
 80029e2:	b530      	push	{r4, r5, lr}
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <snprintf+0x64>)
 80029e6:	1e0c      	subs	r4, r1, #0
 80029e8:	b09d      	sub	sp, #116	; 0x74
 80029ea:	681d      	ldr	r5, [r3, #0]
 80029ec:	da08      	bge.n	8002a00 <snprintf+0x20>
 80029ee:	238b      	movs	r3, #139	; 0x8b
 80029f0:	602b      	str	r3, [r5, #0]
 80029f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f6:	b01d      	add	sp, #116	; 0x74
 80029f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029fc:	b002      	add	sp, #8
 80029fe:	4770      	bx	lr
 8002a00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002a04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a08:	bf14      	ite	ne
 8002a0a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002a0e:	4623      	moveq	r3, r4
 8002a10:	9304      	str	r3, [sp, #16]
 8002a12:	9307      	str	r3, [sp, #28]
 8002a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a18:	9002      	str	r0, [sp, #8]
 8002a1a:	9006      	str	r0, [sp, #24]
 8002a1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002a22:	ab21      	add	r3, sp, #132	; 0x84
 8002a24:	a902      	add	r1, sp, #8
 8002a26:	4628      	mov	r0, r5
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f000 f80d 	bl	8002a48 <_svfprintf_r>
 8002a2e:	1c43      	adds	r3, r0, #1
 8002a30:	bfbc      	itt	lt
 8002a32:	238b      	movlt	r3, #139	; 0x8b
 8002a34:	602b      	strlt	r3, [r5, #0]
 8002a36:	2c00      	cmp	r4, #0
 8002a38:	d0dd      	beq.n	80029f6 <snprintf+0x16>
 8002a3a:	9b02      	ldr	r3, [sp, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e7d9      	b.n	80029f6 <snprintf+0x16>
 8002a42:	bf00      	nop
 8002a44:	20000014 	.word	0x20000014

08002a48 <_svfprintf_r>:
 8002a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4c:	b0bd      	sub	sp, #244	; 0xf4
 8002a4e:	468a      	mov	sl, r1
 8002a50:	4615      	mov	r5, r2
 8002a52:	461f      	mov	r7, r3
 8002a54:	4683      	mov	fp, r0
 8002a56:	f001 fe25 	bl	80046a4 <_localeconv_r>
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fc0e 	bl	8000280 <strlen>
 8002a64:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002a68:	9008      	str	r0, [sp, #32]
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	d518      	bpl.n	8002aa0 <_svfprintf_r+0x58>
 8002a6e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002a72:	b9ab      	cbnz	r3, 8002aa0 <_svfprintf_r+0x58>
 8002a74:	2140      	movs	r1, #64	; 0x40
 8002a76:	4658      	mov	r0, fp
 8002a78:	f001 fe2a 	bl	80046d0 <_malloc_r>
 8002a7c:	f8ca 0000 	str.w	r0, [sl]
 8002a80:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a84:	b948      	cbnz	r0, 8002a9a <_svfprintf_r+0x52>
 8002a86:	230c      	movs	r3, #12
 8002a88:	f8cb 3000 	str.w	r3, [fp]
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a90:	9309      	str	r3, [sp, #36]	; 0x24
 8002a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a94:	b03d      	add	sp, #244	; 0xf4
 8002a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9a:	2340      	movs	r3, #64	; 0x40
 8002a9c:	f8ca 3014 	str.w	r3, [sl, #20]
 8002aa0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002d08 <_svfprintf_r+0x2c0>
 8002aa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	ac2c      	add	r4, sp, #176	; 0xb0
 8002aac:	941f      	str	r4, [sp, #124]	; 0x7c
 8002aae:	9321      	str	r3, [sp, #132]	; 0x84
 8002ab0:	9320      	str	r3, [sp, #128]	; 0x80
 8002ab2:	9505      	str	r5, [sp, #20]
 8002ab4:	9303      	str	r3, [sp, #12]
 8002ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8002ab8:	9310      	str	r3, [sp, #64]	; 0x40
 8002aba:	9309      	str	r3, [sp, #36]	; 0x24
 8002abc:	9d05      	ldr	r5, [sp, #20]
 8002abe:	462b      	mov	r3, r5
 8002ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ac4:	b112      	cbz	r2, 8002acc <_svfprintf_r+0x84>
 8002ac6:	2a25      	cmp	r2, #37	; 0x25
 8002ac8:	f040 8083 	bne.w	8002bd2 <_svfprintf_r+0x18a>
 8002acc:	9b05      	ldr	r3, [sp, #20]
 8002ace:	1aee      	subs	r6, r5, r3
 8002ad0:	d00d      	beq.n	8002aee <_svfprintf_r+0xa6>
 8002ad2:	e884 0048 	stmia.w	r4, {r3, r6}
 8002ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ad8:	4433      	add	r3, r6
 8002ada:	9321      	str	r3, [sp, #132]	; 0x84
 8002adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ade:	3301      	adds	r3, #1
 8002ae0:	2b07      	cmp	r3, #7
 8002ae2:	9320      	str	r3, [sp, #128]	; 0x80
 8002ae4:	dc77      	bgt.n	8002bd6 <_svfprintf_r+0x18e>
 8002ae6:	3408      	adds	r4, #8
 8002ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aea:	4433      	add	r3, r6
 8002aec:	9309      	str	r3, [sp, #36]	; 0x24
 8002aee:	782b      	ldrb	r3, [r5, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8729 	beq.w	8003948 <_svfprintf_r+0xf00>
 8002af6:	2300      	movs	r3, #0
 8002af8:	1c69      	adds	r1, r5, #1
 8002afa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002afe:	461a      	mov	r2, r3
 8002b00:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8002b04:	930a      	str	r3, [sp, #40]	; 0x28
 8002b06:	461d      	mov	r5, r3
 8002b08:	200a      	movs	r0, #10
 8002b0a:	1c4e      	adds	r6, r1, #1
 8002b0c:	7809      	ldrb	r1, [r1, #0]
 8002b0e:	9605      	str	r6, [sp, #20]
 8002b10:	9102      	str	r1, [sp, #8]
 8002b12:	9902      	ldr	r1, [sp, #8]
 8002b14:	3920      	subs	r1, #32
 8002b16:	2958      	cmp	r1, #88	; 0x58
 8002b18:	f200 8418 	bhi.w	800334c <_svfprintf_r+0x904>
 8002b1c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002b20:	041600a6 	.word	0x041600a6
 8002b24:	00ab0416 	.word	0x00ab0416
 8002b28:	04160416 	.word	0x04160416
 8002b2c:	04160416 	.word	0x04160416
 8002b30:	04160416 	.word	0x04160416
 8002b34:	006500ae 	.word	0x006500ae
 8002b38:	00b70416 	.word	0x00b70416
 8002b3c:	041600ba 	.word	0x041600ba
 8002b40:	00da00d7 	.word	0x00da00d7
 8002b44:	00da00da 	.word	0x00da00da
 8002b48:	00da00da 	.word	0x00da00da
 8002b4c:	00da00da 	.word	0x00da00da
 8002b50:	00da00da 	.word	0x00da00da
 8002b54:	04160416 	.word	0x04160416
 8002b58:	04160416 	.word	0x04160416
 8002b5c:	04160416 	.word	0x04160416
 8002b60:	04160416 	.word	0x04160416
 8002b64:	04160416 	.word	0x04160416
 8002b68:	012b0115 	.word	0x012b0115
 8002b6c:	012b0416 	.word	0x012b0416
 8002b70:	04160416 	.word	0x04160416
 8002b74:	04160416 	.word	0x04160416
 8002b78:	041600ed 	.word	0x041600ed
 8002b7c:	03400416 	.word	0x03400416
 8002b80:	04160416 	.word	0x04160416
 8002b84:	04160416 	.word	0x04160416
 8002b88:	03a80416 	.word	0x03a80416
 8002b8c:	04160416 	.word	0x04160416
 8002b90:	04160086 	.word	0x04160086
 8002b94:	04160416 	.word	0x04160416
 8002b98:	04160416 	.word	0x04160416
 8002b9c:	04160416 	.word	0x04160416
 8002ba0:	04160416 	.word	0x04160416
 8002ba4:	01070416 	.word	0x01070416
 8002ba8:	012b006b 	.word	0x012b006b
 8002bac:	012b012b 	.word	0x012b012b
 8002bb0:	006b00f0 	.word	0x006b00f0
 8002bb4:	04160416 	.word	0x04160416
 8002bb8:	041600fa 	.word	0x041600fa
 8002bbc:	03420322 	.word	0x03420322
 8002bc0:	01010376 	.word	0x01010376
 8002bc4:	03870416 	.word	0x03870416
 8002bc8:	03aa0416 	.word	0x03aa0416
 8002bcc:	04160416 	.word	0x04160416
 8002bd0:	03c2      	.short	0x03c2
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	e773      	b.n	8002abe <_svfprintf_r+0x76>
 8002bd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8002bd8:	4651      	mov	r1, sl
 8002bda:	4658      	mov	r0, fp
 8002bdc:	f002 fa7e 	bl	80050dc <__ssprint_r>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f040 8692 	bne.w	800390a <_svfprintf_r+0xec2>
 8002be6:	ac2c      	add	r4, sp, #176	; 0xb0
 8002be8:	e77e      	b.n	8002ae8 <_svfprintf_r+0xa0>
 8002bea:	2301      	movs	r3, #1
 8002bec:	222b      	movs	r2, #43	; 0x2b
 8002bee:	9905      	ldr	r1, [sp, #20]
 8002bf0:	e78b      	b.n	8002b0a <_svfprintf_r+0xc2>
 8002bf2:	460f      	mov	r7, r1
 8002bf4:	e7fb      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002bf6:	b10b      	cbz	r3, 8002bfc <_svfprintf_r+0x1b4>
 8002bf8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002bfc:	06ae      	lsls	r6, r5, #26
 8002bfe:	f140 80aa 	bpl.w	8002d56 <_svfprintf_r+0x30e>
 8002c02:	3707      	adds	r7, #7
 8002c04:	f027 0707 	bic.w	r7, r7, #7
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c10:	9304      	str	r3, [sp, #16]
 8002c12:	2e00      	cmp	r6, #0
 8002c14:	f177 0300 	sbcs.w	r3, r7, #0
 8002c18:	da06      	bge.n	8002c28 <_svfprintf_r+0x1e0>
 8002c1a:	4276      	negs	r6, r6
 8002c1c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002c20:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002c24:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e2ca      	b.n	80031c2 <_svfprintf_r+0x77a>
 8002c2c:	b10b      	cbz	r3, 8002c32 <_svfprintf_r+0x1ea>
 8002c2e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <_svfprintf_r+0x2c8>)
 8002c34:	9311      	str	r3, [sp, #68]	; 0x44
 8002c36:	06ab      	lsls	r3, r5, #26
 8002c38:	f140 8339 	bpl.w	80032ae <_svfprintf_r+0x866>
 8002c3c:	3707      	adds	r7, #7
 8002c3e:	f027 0707 	bic.w	r7, r7, #7
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c4a:	9304      	str	r3, [sp, #16]
 8002c4c:	07e8      	lsls	r0, r5, #31
 8002c4e:	d50b      	bpl.n	8002c68 <_svfprintf_r+0x220>
 8002c50:	ea56 0307 	orrs.w	r3, r6, r7
 8002c54:	d008      	beq.n	8002c68 <_svfprintf_r+0x220>
 8002c56:	2330      	movs	r3, #48	; 0x30
 8002c58:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002c5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002c60:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002c64:	f045 0502 	orr.w	r5, r5, #2
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e2a7      	b.n	80031bc <_svfprintf_r+0x774>
 8002c6c:	2a00      	cmp	r2, #0
 8002c6e:	d1be      	bne.n	8002bee <_svfprintf_r+0x1a6>
 8002c70:	2301      	movs	r3, #1
 8002c72:	2220      	movs	r2, #32
 8002c74:	e7bb      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002c76:	f045 0501 	orr.w	r5, r5, #1
 8002c7a:	e7b8      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002c7c:	683e      	ldr	r6, [r7, #0]
 8002c7e:	960a      	str	r6, [sp, #40]	; 0x28
 8002c80:	2e00      	cmp	r6, #0
 8002c82:	f107 0104 	add.w	r1, r7, #4
 8002c86:	dab4      	bge.n	8002bf2 <_svfprintf_r+0x1aa>
 8002c88:	4276      	negs	r6, r6
 8002c8a:	960a      	str	r6, [sp, #40]	; 0x28
 8002c8c:	460f      	mov	r7, r1
 8002c8e:	f045 0504 	orr.w	r5, r5, #4
 8002c92:	e7ac      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002c94:	9905      	ldr	r1, [sp, #20]
 8002c96:	1c4e      	adds	r6, r1, #1
 8002c98:	7809      	ldrb	r1, [r1, #0]
 8002c9a:	9102      	str	r1, [sp, #8]
 8002c9c:	292a      	cmp	r1, #42	; 0x2a
 8002c9e:	d010      	beq.n	8002cc2 <_svfprintf_r+0x27a>
 8002ca0:	f04f 0900 	mov.w	r9, #0
 8002ca4:	9605      	str	r6, [sp, #20]
 8002ca6:	9902      	ldr	r1, [sp, #8]
 8002ca8:	3930      	subs	r1, #48	; 0x30
 8002caa:	2909      	cmp	r1, #9
 8002cac:	f63f af31 	bhi.w	8002b12 <_svfprintf_r+0xca>
 8002cb0:	fb00 1909 	mla	r9, r0, r9, r1
 8002cb4:	9905      	ldr	r1, [sp, #20]
 8002cb6:	460e      	mov	r6, r1
 8002cb8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002cbc:	9102      	str	r1, [sp, #8]
 8002cbe:	9605      	str	r6, [sp, #20]
 8002cc0:	e7f1      	b.n	8002ca6 <_svfprintf_r+0x25e>
 8002cc2:	6839      	ldr	r1, [r7, #0]
 8002cc4:	9605      	str	r6, [sp, #20]
 8002cc6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002cca:	3704      	adds	r7, #4
 8002ccc:	e78f      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002cce:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002cd2:	e78c      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	910a      	str	r1, [sp, #40]	; 0x28
 8002cd8:	9902      	ldr	r1, [sp, #8]
 8002cda:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002cdc:	3930      	subs	r1, #48	; 0x30
 8002cde:	fb00 1106 	mla	r1, r0, r6, r1
 8002ce2:	910a      	str	r1, [sp, #40]	; 0x28
 8002ce4:	9905      	ldr	r1, [sp, #20]
 8002ce6:	460e      	mov	r6, r1
 8002ce8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002cec:	9102      	str	r1, [sp, #8]
 8002cee:	9902      	ldr	r1, [sp, #8]
 8002cf0:	9605      	str	r6, [sp, #20]
 8002cf2:	3930      	subs	r1, #48	; 0x30
 8002cf4:	2909      	cmp	r1, #9
 8002cf6:	d9ef      	bls.n	8002cd8 <_svfprintf_r+0x290>
 8002cf8:	e70b      	b.n	8002b12 <_svfprintf_r+0xca>
 8002cfa:	f045 0508 	orr.w	r5, r5, #8
 8002cfe:	e776      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002d00:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002d04:	e773      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002d06:	bf00      	nop
	...
 8002d10:	0800583f 	.word	0x0800583f
 8002d14:	9905      	ldr	r1, [sp, #20]
 8002d16:	7809      	ldrb	r1, [r1, #0]
 8002d18:	296c      	cmp	r1, #108	; 0x6c
 8002d1a:	d105      	bne.n	8002d28 <_svfprintf_r+0x2e0>
 8002d1c:	9905      	ldr	r1, [sp, #20]
 8002d1e:	3101      	adds	r1, #1
 8002d20:	9105      	str	r1, [sp, #20]
 8002d22:	f045 0520 	orr.w	r5, r5, #32
 8002d26:	e762      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002d28:	f045 0510 	orr.w	r5, r5, #16
 8002d2c:	e75f      	b.n	8002bee <_svfprintf_r+0x1a6>
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	9304      	str	r3, [sp, #16]
 8002d32:	2600      	movs	r6, #0
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002d3a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002d3e:	f04f 0901 	mov.w	r9, #1
 8002d42:	4637      	mov	r7, r6
 8002d44:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002d48:	e11b      	b.n	8002f82 <_svfprintf_r+0x53a>
 8002d4a:	b10b      	cbz	r3, 8002d50 <_svfprintf_r+0x308>
 8002d4c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002d50:	f045 0510 	orr.w	r5, r5, #16
 8002d54:	e752      	b.n	8002bfc <_svfprintf_r+0x1b4>
 8002d56:	f015 0f10 	tst.w	r5, #16
 8002d5a:	f107 0304 	add.w	r3, r7, #4
 8002d5e:	d003      	beq.n	8002d68 <_svfprintf_r+0x320>
 8002d60:	683e      	ldr	r6, [r7, #0]
 8002d62:	9304      	str	r3, [sp, #16]
 8002d64:	17f7      	asrs	r7, r6, #31
 8002d66:	e754      	b.n	8002c12 <_svfprintf_r+0x1ca>
 8002d68:	683e      	ldr	r6, [r7, #0]
 8002d6a:	9304      	str	r3, [sp, #16]
 8002d6c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d70:	bf18      	it	ne
 8002d72:	b236      	sxthne	r6, r6
 8002d74:	e7f6      	b.n	8002d64 <_svfprintf_r+0x31c>
 8002d76:	b10b      	cbz	r3, 8002d7c <_svfprintf_r+0x334>
 8002d78:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002d7c:	3707      	adds	r7, #7
 8002d7e:	f027 0707 	bic.w	r7, r7, #7
 8002d82:	f107 0308 	add.w	r3, r7, #8
 8002d86:	9304      	str	r3, [sp, #16]
 8002d88:	ed97 7b00 	vldr	d7, [r7]
 8002d8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d90:	9b06      	ldr	r3, [sp, #24]
 8002d92:	9312      	str	r3, [sp, #72]	; 0x48
 8002d94:	9b07      	ldr	r3, [sp, #28]
 8002d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <_svfprintf_r+0x484>)
 8002da2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002da6:	f7fd fec5 	bl	8000b34 <__aeabi_dcmpun>
 8002daa:	2800      	cmp	r0, #0
 8002dac:	f040 85d5 	bne.w	800395a <_svfprintf_r+0xf12>
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002db4:	4b45      	ldr	r3, [pc, #276]	; (8002ecc <_svfprintf_r+0x484>)
 8002db6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002dba:	f7fd fe9d 	bl	8000af8 <__aeabi_dcmple>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	f040 85cb 	bne.w	800395a <_svfprintf_r+0xf12>
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dcc:	f7fd fe8a 	bl	8000ae4 <__aeabi_dcmplt>
 8002dd0:	b110      	cbz	r0, 8002dd8 <_svfprintf_r+0x390>
 8002dd2:	232d      	movs	r3, #45	; 0x2d
 8002dd4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002dd8:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <_svfprintf_r+0x488>)
 8002dda:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <_svfprintf_r+0x48c>)
 8002ddc:	9902      	ldr	r1, [sp, #8]
 8002dde:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002de2:	2947      	cmp	r1, #71	; 0x47
 8002de4:	bfcc      	ite	gt
 8002de6:	4690      	movgt	r8, r2
 8002de8:	4698      	movle	r8, r3
 8002dea:	f04f 0903 	mov.w	r9, #3
 8002dee:	2600      	movs	r6, #0
 8002df0:	4637      	mov	r7, r6
 8002df2:	e0c6      	b.n	8002f82 <_svfprintf_r+0x53a>
 8002df4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002df8:	d022      	beq.n	8002e40 <_svfprintf_r+0x3f8>
 8002dfa:	9b02      	ldr	r3, [sp, #8]
 8002dfc:	f023 0320 	bic.w	r3, r3, #32
 8002e00:	2b47      	cmp	r3, #71	; 0x47
 8002e02:	d104      	bne.n	8002e0e <_svfprintf_r+0x3c6>
 8002e04:	f1b9 0f00 	cmp.w	r9, #0
 8002e08:	bf08      	it	eq
 8002e0a:	f04f 0901 	moveq.w	r9, #1
 8002e0e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002e12:	930c      	str	r3, [sp, #48]	; 0x30
 8002e14:	9b07      	ldr	r3, [sp, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da15      	bge.n	8002e46 <_svfprintf_r+0x3fe>
 8002e1a:	9b06      	ldr	r3, [sp, #24]
 8002e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8002e1e:	9b07      	ldr	r3, [sp, #28]
 8002e20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e26:	232d      	movs	r3, #45	; 0x2d
 8002e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	f023 0720 	bic.w	r7, r3, #32
 8002e30:	2f46      	cmp	r7, #70	; 0x46
 8002e32:	d00e      	beq.n	8002e52 <_svfprintf_r+0x40a>
 8002e34:	2f45      	cmp	r7, #69	; 0x45
 8002e36:	d146      	bne.n	8002ec6 <_svfprintf_r+0x47e>
 8002e38:	f109 0601 	add.w	r6, r9, #1
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	e00a      	b.n	8002e56 <_svfprintf_r+0x40e>
 8002e40:	f04f 0906 	mov.w	r9, #6
 8002e44:	e7e3      	b.n	8002e0e <_svfprintf_r+0x3c6>
 8002e46:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002e50:	e7ea      	b.n	8002e28 <_svfprintf_r+0x3e0>
 8002e52:	464e      	mov	r6, r9
 8002e54:	2103      	movs	r1, #3
 8002e56:	ab1d      	add	r3, sp, #116	; 0x74
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	ab1a      	add	r3, sp, #104	; 0x68
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	4632      	mov	r2, r6
 8002e60:	ab19      	add	r3, sp, #100	; 0x64
 8002e62:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002e66:	4658      	mov	r0, fp
 8002e68:	f000 fe4e 	bl	8003b08 <_dtoa_r>
 8002e6c:	2f47      	cmp	r7, #71	; 0x47
 8002e6e:	4680      	mov	r8, r0
 8002e70:	d102      	bne.n	8002e78 <_svfprintf_r+0x430>
 8002e72:	07e8      	lsls	r0, r5, #31
 8002e74:	f140 857e 	bpl.w	8003974 <_svfprintf_r+0xf2c>
 8002e78:	eb08 0306 	add.w	r3, r8, r6
 8002e7c:	2f46      	cmp	r7, #70	; 0x46
 8002e7e:	9303      	str	r3, [sp, #12]
 8002e80:	d111      	bne.n	8002ea6 <_svfprintf_r+0x45e>
 8002e82:	f898 3000 	ldrb.w	r3, [r8]
 8002e86:	2b30      	cmp	r3, #48	; 0x30
 8002e88:	d109      	bne.n	8002e9e <_svfprintf_r+0x456>
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002e92:	f7fd fe1d 	bl	8000ad0 <__aeabi_dcmpeq>
 8002e96:	b910      	cbnz	r0, 8002e9e <_svfprintf_r+0x456>
 8002e98:	f1c6 0601 	rsb	r6, r6, #1
 8002e9c:	9619      	str	r6, [sp, #100]	; 0x64
 8002e9e:	9a03      	ldr	r2, [sp, #12]
 8002ea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ea2:	441a      	add	r2, r3
 8002ea4:	9203      	str	r2, [sp, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002eae:	f7fd fe0f 	bl	8000ad0 <__aeabi_dcmpeq>
 8002eb2:	b988      	cbnz	r0, 8002ed8 <_svfprintf_r+0x490>
 8002eb4:	2230      	movs	r2, #48	; 0x30
 8002eb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002eb8:	9903      	ldr	r1, [sp, #12]
 8002eba:	4299      	cmp	r1, r3
 8002ebc:	d90e      	bls.n	8002edc <_svfprintf_r+0x494>
 8002ebe:	1c59      	adds	r1, r3, #1
 8002ec0:	911d      	str	r1, [sp, #116]	; 0x74
 8002ec2:	701a      	strb	r2, [r3, #0]
 8002ec4:	e7f7      	b.n	8002eb6 <_svfprintf_r+0x46e>
 8002ec6:	464e      	mov	r6, r9
 8002ec8:	e7b8      	b.n	8002e3c <_svfprintf_r+0x3f4>
 8002eca:	bf00      	nop
 8002ecc:	7fefffff 	.word	0x7fefffff
 8002ed0:	0800582f 	.word	0x0800582f
 8002ed4:	08005833 	.word	0x08005833
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	931d      	str	r3, [sp, #116]	; 0x74
 8002edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002ede:	2f47      	cmp	r7, #71	; 0x47
 8002ee0:	eba3 0308 	sub.w	r3, r3, r8
 8002ee4:	9303      	str	r3, [sp, #12]
 8002ee6:	f040 80fa 	bne.w	80030de <_svfprintf_r+0x696>
 8002eea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002eec:	1cd9      	adds	r1, r3, #3
 8002eee:	db02      	blt.n	8002ef6 <_svfprintf_r+0x4ae>
 8002ef0:	4599      	cmp	r9, r3
 8002ef2:	f280 8120 	bge.w	8003136 <_svfprintf_r+0x6ee>
 8002ef6:	9b02      	ldr	r3, [sp, #8]
 8002ef8:	3b02      	subs	r3, #2
 8002efa:	9302      	str	r3, [sp, #8]
 8002efc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002efe:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002f02:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8002f06:	1e53      	subs	r3, r2, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	9319      	str	r3, [sp, #100]	; 0x64
 8002f0c:	bfb6      	itet	lt
 8002f0e:	f1c2 0301 	rsblt	r3, r2, #1
 8002f12:	222b      	movge	r2, #43	; 0x2b
 8002f14:	222d      	movlt	r2, #45	; 0x2d
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002f1c:	f340 80fb 	ble.w	8003116 <_svfprintf_r+0x6ce>
 8002f20:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8002f24:	260a      	movs	r6, #10
 8002f26:	fb93 f0f6 	sdiv	r0, r3, r6
 8002f2a:	fb06 3310 	mls	r3, r6, r0, r3
 8002f2e:	3330      	adds	r3, #48	; 0x30
 8002f30:	2809      	cmp	r0, #9
 8002f32:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002f36:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f300 80e4 	bgt.w	8003108 <_svfprintf_r+0x6c0>
 8002f40:	3330      	adds	r3, #48	; 0x30
 8002f42:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002f46:	3a02      	subs	r2, #2
 8002f48:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002f4c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002f50:	4282      	cmp	r2, r0
 8002f52:	4619      	mov	r1, r3
 8002f54:	f0c0 80da 	bcc.w	800310c <_svfprintf_r+0x6c4>
 8002f58:	9a03      	ldr	r2, [sp, #12]
 8002f5a:	ab1b      	add	r3, sp, #108	; 0x6c
 8002f5c:	1acb      	subs	r3, r1, r3
 8002f5e:	2a01      	cmp	r2, #1
 8002f60:	9310      	str	r3, [sp, #64]	; 0x40
 8002f62:	eb03 0902 	add.w	r9, r3, r2
 8002f66:	dc02      	bgt.n	8002f6e <_svfprintf_r+0x526>
 8002f68:	f015 0701 	ands.w	r7, r5, #1
 8002f6c:	d002      	beq.n	8002f74 <_svfprintf_r+0x52c>
 8002f6e:	9b08      	ldr	r3, [sp, #32]
 8002f70:	2700      	movs	r7, #0
 8002f72:	4499      	add	r9, r3
 8002f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f76:	b113      	cbz	r3, 8002f7e <_svfprintf_r+0x536>
 8002f78:	232d      	movs	r3, #45	; 0x2d
 8002f7a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f80:	2600      	movs	r6, #0
 8002f82:	454e      	cmp	r6, r9
 8002f84:	4633      	mov	r3, r6
 8002f86:	bfb8      	it	lt
 8002f88:	464b      	movlt	r3, r9
 8002f8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f8c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002f90:	b113      	cbz	r3, 8002f98 <_svfprintf_r+0x550>
 8002f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f94:	3301      	adds	r3, #1
 8002f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f98:	f015 0302 	ands.w	r3, r5, #2
 8002f9c:	9314      	str	r3, [sp, #80]	; 0x50
 8002f9e:	bf1e      	ittt	ne
 8002fa0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002fa2:	3302      	addne	r3, #2
 8002fa4:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002fa6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002faa:	9315      	str	r3, [sp, #84]	; 0x54
 8002fac:	d118      	bne.n	8002fe0 <_svfprintf_r+0x598>
 8002fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8002fb8:	dd12      	ble.n	8002fe0 <_svfprintf_r+0x598>
 8002fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	4ba9      	ldr	r3, [pc, #676]	; (8003264 <_svfprintf_r+0x81c>)
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	f300 81d5 	bgt.w	8003370 <_svfprintf_r+0x928>
 8002fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002fce:	4413      	add	r3, r2
 8002fd0:	9321      	str	r3, [sp, #132]	; 0x84
 8002fd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	2b07      	cmp	r3, #7
 8002fd8:	9320      	str	r3, [sp, #128]	; 0x80
 8002fda:	f300 81e2 	bgt.w	80033a2 <_svfprintf_r+0x95a>
 8002fde:	3408      	adds	r4, #8
 8002fe0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002fe4:	b173      	cbz	r3, 8003004 <_svfprintf_r+0x5bc>
 8002fe6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002fea:	6023      	str	r3, [r4, #0]
 8002fec:	2301      	movs	r3, #1
 8002fee:	6063      	str	r3, [r4, #4]
 8002ff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	9321      	str	r3, [sp, #132]	; 0x84
 8002ff6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	9320      	str	r3, [sp, #128]	; 0x80
 8002ffe:	f300 81da 	bgt.w	80033b6 <_svfprintf_r+0x96e>
 8003002:	3408      	adds	r4, #8
 8003004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003006:	b16b      	cbz	r3, 8003024 <_svfprintf_r+0x5dc>
 8003008:	ab18      	add	r3, sp, #96	; 0x60
 800300a:	6023      	str	r3, [r4, #0]
 800300c:	2302      	movs	r3, #2
 800300e:	6063      	str	r3, [r4, #4]
 8003010:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003012:	3302      	adds	r3, #2
 8003014:	9321      	str	r3, [sp, #132]	; 0x84
 8003016:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003018:	3301      	adds	r3, #1
 800301a:	2b07      	cmp	r3, #7
 800301c:	9320      	str	r3, [sp, #128]	; 0x80
 800301e:	f300 81d4 	bgt.w	80033ca <_svfprintf_r+0x982>
 8003022:	3408      	adds	r4, #8
 8003024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d114      	bne.n	8003054 <_svfprintf_r+0x60c>
 800302a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800302c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	dd0f      	ble.n	8003054 <_svfprintf_r+0x60c>
 8003034:	4a8c      	ldr	r2, [pc, #560]	; (8003268 <_svfprintf_r+0x820>)
 8003036:	6022      	str	r2, [r4, #0]
 8003038:	2b10      	cmp	r3, #16
 800303a:	f300 81d0 	bgt.w	80033de <_svfprintf_r+0x996>
 800303e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	4413      	add	r3, r2
 8003044:	9321      	str	r3, [sp, #132]	; 0x84
 8003046:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003048:	3301      	adds	r3, #1
 800304a:	2b07      	cmp	r3, #7
 800304c:	9320      	str	r3, [sp, #128]	; 0x80
 800304e:	f300 81df 	bgt.w	8003410 <_svfprintf_r+0x9c8>
 8003052:	3408      	adds	r4, #8
 8003054:	eba6 0609 	sub.w	r6, r6, r9
 8003058:	2e00      	cmp	r6, #0
 800305a:	dd0f      	ble.n	800307c <_svfprintf_r+0x634>
 800305c:	4b82      	ldr	r3, [pc, #520]	; (8003268 <_svfprintf_r+0x820>)
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	2e10      	cmp	r6, #16
 8003062:	f300 81df 	bgt.w	8003424 <_svfprintf_r+0x9dc>
 8003066:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003068:	9821      	ldr	r0, [sp, #132]	; 0x84
 800306a:	6066      	str	r6, [r4, #4]
 800306c:	3301      	adds	r3, #1
 800306e:	4406      	add	r6, r0
 8003070:	2b07      	cmp	r3, #7
 8003072:	9621      	str	r6, [sp, #132]	; 0x84
 8003074:	9320      	str	r3, [sp, #128]	; 0x80
 8003076:	f300 81ec 	bgt.w	8003452 <_svfprintf_r+0xa0a>
 800307a:	3408      	adds	r4, #8
 800307c:	05eb      	lsls	r3, r5, #23
 800307e:	f100 81f2 	bmi.w	8003466 <_svfprintf_r+0xa1e>
 8003082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003084:	e884 0300 	stmia.w	r4, {r8, r9}
 8003088:	444b      	add	r3, r9
 800308a:	9321      	str	r3, [sp, #132]	; 0x84
 800308c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800308e:	3301      	adds	r3, #1
 8003090:	2b07      	cmp	r3, #7
 8003092:	9320      	str	r3, [sp, #128]	; 0x80
 8003094:	f340 8419 	ble.w	80038ca <_svfprintf_r+0xe82>
 8003098:	aa1f      	add	r2, sp, #124	; 0x7c
 800309a:	4651      	mov	r1, sl
 800309c:	4658      	mov	r0, fp
 800309e:	f002 f81d 	bl	80050dc <__ssprint_r>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	f040 8431 	bne.w	800390a <_svfprintf_r+0xec2>
 80030a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80030aa:	076b      	lsls	r3, r5, #29
 80030ac:	f100 8410 	bmi.w	80038d0 <_svfprintf_r+0xe88>
 80030b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030b6:	428a      	cmp	r2, r1
 80030b8:	bfac      	ite	ge
 80030ba:	189b      	addge	r3, r3, r2
 80030bc:	185b      	addlt	r3, r3, r1
 80030be:	9309      	str	r3, [sp, #36]	; 0x24
 80030c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030c2:	b13b      	cbz	r3, 80030d4 <_svfprintf_r+0x68c>
 80030c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80030c6:	4651      	mov	r1, sl
 80030c8:	4658      	mov	r0, fp
 80030ca:	f002 f807 	bl	80050dc <__ssprint_r>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	f040 841b 	bne.w	800390a <_svfprintf_r+0xec2>
 80030d4:	2300      	movs	r3, #0
 80030d6:	9320      	str	r3, [sp, #128]	; 0x80
 80030d8:	9f04      	ldr	r7, [sp, #16]
 80030da:	ac2c      	add	r4, sp, #176	; 0xb0
 80030dc:	e4ee      	b.n	8002abc <_svfprintf_r+0x74>
 80030de:	9b02      	ldr	r3, [sp, #8]
 80030e0:	2b65      	cmp	r3, #101	; 0x65
 80030e2:	f77f af0b 	ble.w	8002efc <_svfprintf_r+0x4b4>
 80030e6:	9b02      	ldr	r3, [sp, #8]
 80030e8:	2b66      	cmp	r3, #102	; 0x66
 80030ea:	d124      	bne.n	8003136 <_svfprintf_r+0x6ee>
 80030ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	dd19      	ble.n	8003126 <_svfprintf_r+0x6de>
 80030f2:	f1b9 0f00 	cmp.w	r9, #0
 80030f6:	d101      	bne.n	80030fc <_svfprintf_r+0x6b4>
 80030f8:	07ea      	lsls	r2, r5, #31
 80030fa:	d502      	bpl.n	8003102 <_svfprintf_r+0x6ba>
 80030fc:	9a08      	ldr	r2, [sp, #32]
 80030fe:	4413      	add	r3, r2
 8003100:	444b      	add	r3, r9
 8003102:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8003104:	4699      	mov	r9, r3
 8003106:	e735      	b.n	8002f74 <_svfprintf_r+0x52c>
 8003108:	460a      	mov	r2, r1
 800310a:	e70c      	b.n	8002f26 <_svfprintf_r+0x4de>
 800310c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003110:	f803 1b01 	strb.w	r1, [r3], #1
 8003114:	e71c      	b.n	8002f50 <_svfprintf_r+0x508>
 8003116:	2230      	movs	r2, #48	; 0x30
 8003118:	4413      	add	r3, r2
 800311a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800311e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8003122:	a91c      	add	r1, sp, #112	; 0x70
 8003124:	e718      	b.n	8002f58 <_svfprintf_r+0x510>
 8003126:	f1b9 0f00 	cmp.w	r9, #0
 800312a:	d101      	bne.n	8003130 <_svfprintf_r+0x6e8>
 800312c:	07eb      	lsls	r3, r5, #31
 800312e:	d515      	bpl.n	800315c <_svfprintf_r+0x714>
 8003130:	9b08      	ldr	r3, [sp, #32]
 8003132:	3301      	adds	r3, #1
 8003134:	e7e4      	b.n	8003100 <_svfprintf_r+0x6b8>
 8003136:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003138:	9b03      	ldr	r3, [sp, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	db06      	blt.n	800314c <_svfprintf_r+0x704>
 800313e:	07ef      	lsls	r7, r5, #31
 8003140:	d50e      	bpl.n	8003160 <_svfprintf_r+0x718>
 8003142:	9b08      	ldr	r3, [sp, #32]
 8003144:	4413      	add	r3, r2
 8003146:	2267      	movs	r2, #103	; 0x67
 8003148:	9202      	str	r2, [sp, #8]
 800314a:	e7da      	b.n	8003102 <_svfprintf_r+0x6ba>
 800314c:	9b03      	ldr	r3, [sp, #12]
 800314e:	9908      	ldr	r1, [sp, #32]
 8003150:	2a00      	cmp	r2, #0
 8003152:	440b      	add	r3, r1
 8003154:	dcf7      	bgt.n	8003146 <_svfprintf_r+0x6fe>
 8003156:	f1c2 0201 	rsb	r2, r2, #1
 800315a:	e7f3      	b.n	8003144 <_svfprintf_r+0x6fc>
 800315c:	2301      	movs	r3, #1
 800315e:	e7d0      	b.n	8003102 <_svfprintf_r+0x6ba>
 8003160:	4613      	mov	r3, r2
 8003162:	e7f0      	b.n	8003146 <_svfprintf_r+0x6fe>
 8003164:	b10b      	cbz	r3, 800316a <_svfprintf_r+0x722>
 8003166:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800316a:	f015 0f20 	tst.w	r5, #32
 800316e:	f107 0304 	add.w	r3, r7, #4
 8003172:	d008      	beq.n	8003186 <_svfprintf_r+0x73e>
 8003174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	17ce      	asrs	r6, r1, #31
 800317a:	4608      	mov	r0, r1
 800317c:	4631      	mov	r1, r6
 800317e:	e9c2 0100 	strd	r0, r1, [r2]
 8003182:	461f      	mov	r7, r3
 8003184:	e49a      	b.n	8002abc <_svfprintf_r+0x74>
 8003186:	06ee      	lsls	r6, r5, #27
 8003188:	d503      	bpl.n	8003192 <_svfprintf_r+0x74a>
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800318e:	6011      	str	r1, [r2, #0]
 8003190:	e7f7      	b.n	8003182 <_svfprintf_r+0x73a>
 8003192:	0668      	lsls	r0, r5, #25
 8003194:	d5f9      	bpl.n	800318a <_svfprintf_r+0x742>
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800319c:	8011      	strh	r1, [r2, #0]
 800319e:	e7f0      	b.n	8003182 <_svfprintf_r+0x73a>
 80031a0:	f045 0510 	orr.w	r5, r5, #16
 80031a4:	f015 0320 	ands.w	r3, r5, #32
 80031a8:	d022      	beq.n	80031f0 <_svfprintf_r+0x7a8>
 80031aa:	3707      	adds	r7, #7
 80031ac:	f027 0707 	bic.w	r7, r7, #7
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80031b8:	9304      	str	r3, [sp, #16]
 80031ba:	2300      	movs	r3, #0
 80031bc:	2200      	movs	r2, #0
 80031be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80031c2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80031c6:	f000 83db 	beq.w	8003980 <_svfprintf_r+0xf38>
 80031ca:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80031ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80031d0:	ea56 0207 	orrs.w	r2, r6, r7
 80031d4:	f040 83d9 	bne.w	800398a <_svfprintf_r+0xf42>
 80031d8:	f1b9 0f00 	cmp.w	r9, #0
 80031dc:	f000 80aa 	beq.w	8003334 <_svfprintf_r+0x8ec>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d076      	beq.n	80032d2 <_svfprintf_r+0x88a>
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	f000 8091 	beq.w	800330c <_svfprintf_r+0x8c4>
 80031ea:	2600      	movs	r6, #0
 80031ec:	2700      	movs	r7, #0
 80031ee:	e3d2      	b.n	8003996 <_svfprintf_r+0xf4e>
 80031f0:	1d3a      	adds	r2, r7, #4
 80031f2:	f015 0110 	ands.w	r1, r5, #16
 80031f6:	9204      	str	r2, [sp, #16]
 80031f8:	d002      	beq.n	8003200 <_svfprintf_r+0x7b8>
 80031fa:	683e      	ldr	r6, [r7, #0]
 80031fc:	2700      	movs	r7, #0
 80031fe:	e7dd      	b.n	80031bc <_svfprintf_r+0x774>
 8003200:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003204:	d0f9      	beq.n	80031fa <_svfprintf_r+0x7b2>
 8003206:	883e      	ldrh	r6, [r7, #0]
 8003208:	2700      	movs	r7, #0
 800320a:	e7d6      	b.n	80031ba <_svfprintf_r+0x772>
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	2330      	movs	r3, #48	; 0x30
 8003212:	2278      	movs	r2, #120	; 0x78
 8003214:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <_svfprintf_r+0x824>)
 800321a:	683e      	ldr	r6, [r7, #0]
 800321c:	9311      	str	r3, [sp, #68]	; 0x44
 800321e:	2700      	movs	r7, #0
 8003220:	f045 0502 	orr.w	r5, r5, #2
 8003224:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003228:	2302      	movs	r3, #2
 800322a:	9202      	str	r2, [sp, #8]
 800322c:	e7c6      	b.n	80031bc <_svfprintf_r+0x774>
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	2600      	movs	r6, #0
 8003232:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8003236:	9304      	str	r3, [sp, #16]
 8003238:	f8d7 8000 	ldr.w	r8, [r7]
 800323c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003240:	d00a      	beq.n	8003258 <_svfprintf_r+0x810>
 8003242:	464a      	mov	r2, r9
 8003244:	4631      	mov	r1, r6
 8003246:	4640      	mov	r0, r8
 8003248:	f7fc ffca 	bl	80001e0 <memchr>
 800324c:	2800      	cmp	r0, #0
 800324e:	f000 808d 	beq.w	800336c <_svfprintf_r+0x924>
 8003252:	eba0 0908 	sub.w	r9, r0, r8
 8003256:	e5cb      	b.n	8002df0 <_svfprintf_r+0x3a8>
 8003258:	4640      	mov	r0, r8
 800325a:	f7fd f811 	bl	8000280 <strlen>
 800325e:	4681      	mov	r9, r0
 8003260:	e5c6      	b.n	8002df0 <_svfprintf_r+0x3a8>
 8003262:	bf00      	nop
 8003264:	08005863 	.word	0x08005863
 8003268:	08005873 	.word	0x08005873
 800326c:	08005850 	.word	0x08005850
 8003270:	f045 0510 	orr.w	r5, r5, #16
 8003274:	06a9      	lsls	r1, r5, #26
 8003276:	d509      	bpl.n	800328c <_svfprintf_r+0x844>
 8003278:	3707      	adds	r7, #7
 800327a:	f027 0707 	bic.w	r7, r7, #7
 800327e:	f107 0308 	add.w	r3, r7, #8
 8003282:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003286:	9304      	str	r3, [sp, #16]
 8003288:	2301      	movs	r3, #1
 800328a:	e797      	b.n	80031bc <_svfprintf_r+0x774>
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	f015 0f10 	tst.w	r5, #16
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	d001      	beq.n	800329a <_svfprintf_r+0x852>
 8003296:	683e      	ldr	r6, [r7, #0]
 8003298:	e002      	b.n	80032a0 <_svfprintf_r+0x858>
 800329a:	066a      	lsls	r2, r5, #25
 800329c:	d5fb      	bpl.n	8003296 <_svfprintf_r+0x84e>
 800329e:	883e      	ldrh	r6, [r7, #0]
 80032a0:	2700      	movs	r7, #0
 80032a2:	e7f1      	b.n	8003288 <_svfprintf_r+0x840>
 80032a4:	b10b      	cbz	r3, 80032aa <_svfprintf_r+0x862>
 80032a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80032aa:	4ba3      	ldr	r3, [pc, #652]	; (8003538 <_svfprintf_r+0xaf0>)
 80032ac:	e4c2      	b.n	8002c34 <_svfprintf_r+0x1ec>
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	f015 0f10 	tst.w	r5, #16
 80032b4:	9304      	str	r3, [sp, #16]
 80032b6:	d001      	beq.n	80032bc <_svfprintf_r+0x874>
 80032b8:	683e      	ldr	r6, [r7, #0]
 80032ba:	e002      	b.n	80032c2 <_svfprintf_r+0x87a>
 80032bc:	066e      	lsls	r6, r5, #25
 80032be:	d5fb      	bpl.n	80032b8 <_svfprintf_r+0x870>
 80032c0:	883e      	ldrh	r6, [r7, #0]
 80032c2:	2700      	movs	r7, #0
 80032c4:	e4c2      	b.n	8002c4c <_svfprintf_r+0x204>
 80032c6:	4643      	mov	r3, r8
 80032c8:	e366      	b.n	8003998 <_svfprintf_r+0xf50>
 80032ca:	2f00      	cmp	r7, #0
 80032cc:	bf08      	it	eq
 80032ce:	2e0a      	cmpeq	r6, #10
 80032d0:	d205      	bcs.n	80032de <_svfprintf_r+0x896>
 80032d2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80032d6:	3630      	adds	r6, #48	; 0x30
 80032d8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80032dc:	e377      	b.n	80039ce <_svfprintf_r+0xf86>
 80032de:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80032e2:	4630      	mov	r0, r6
 80032e4:	4639      	mov	r1, r7
 80032e6:	220a      	movs	r2, #10
 80032e8:	2300      	movs	r3, #0
 80032ea:	f7fd fc61 	bl	8000bb0 <__aeabi_uldivmod>
 80032ee:	3230      	adds	r2, #48	; 0x30
 80032f0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80032f4:	2300      	movs	r3, #0
 80032f6:	4630      	mov	r0, r6
 80032f8:	4639      	mov	r1, r7
 80032fa:	220a      	movs	r2, #10
 80032fc:	f7fd fc58 	bl	8000bb0 <__aeabi_uldivmod>
 8003300:	4606      	mov	r6, r0
 8003302:	460f      	mov	r7, r1
 8003304:	ea56 0307 	orrs.w	r3, r6, r7
 8003308:	d1eb      	bne.n	80032e2 <_svfprintf_r+0x89a>
 800330a:	e360      	b.n	80039ce <_svfprintf_r+0xf86>
 800330c:	2600      	movs	r6, #0
 800330e:	2700      	movs	r7, #0
 8003310:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003314:	f006 030f 	and.w	r3, r6, #15
 8003318:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003320:	0933      	lsrs	r3, r6, #4
 8003322:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003326:	093a      	lsrs	r2, r7, #4
 8003328:	461e      	mov	r6, r3
 800332a:	4617      	mov	r7, r2
 800332c:	ea56 0307 	orrs.w	r3, r6, r7
 8003330:	d1f0      	bne.n	8003314 <_svfprintf_r+0x8cc>
 8003332:	e34c      	b.n	80039ce <_svfprintf_r+0xf86>
 8003334:	b93b      	cbnz	r3, 8003346 <_svfprintf_r+0x8fe>
 8003336:	07ea      	lsls	r2, r5, #31
 8003338:	d505      	bpl.n	8003346 <_svfprintf_r+0x8fe>
 800333a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800333e:	2330      	movs	r3, #48	; 0x30
 8003340:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003344:	e343      	b.n	80039ce <_svfprintf_r+0xf86>
 8003346:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800334a:	e340      	b.n	80039ce <_svfprintf_r+0xf86>
 800334c:	b10b      	cbz	r3, 8003352 <_svfprintf_r+0x90a>
 800334e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003352:	9b02      	ldr	r3, [sp, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 82f7 	beq.w	8003948 <_svfprintf_r+0xf00>
 800335a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800335e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003362:	2600      	movs	r6, #0
 8003364:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003368:	9704      	str	r7, [sp, #16]
 800336a:	e4e8      	b.n	8002d3e <_svfprintf_r+0x2f6>
 800336c:	4606      	mov	r6, r0
 800336e:	e53f      	b.n	8002df0 <_svfprintf_r+0x3a8>
 8003370:	2310      	movs	r3, #16
 8003372:	6063      	str	r3, [r4, #4]
 8003374:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003376:	3310      	adds	r3, #16
 8003378:	9321      	str	r3, [sp, #132]	; 0x84
 800337a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800337c:	3301      	adds	r3, #1
 800337e:	2b07      	cmp	r3, #7
 8003380:	9320      	str	r3, [sp, #128]	; 0x80
 8003382:	dc04      	bgt.n	800338e <_svfprintf_r+0x946>
 8003384:	3408      	adds	r4, #8
 8003386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003388:	3b10      	subs	r3, #16
 800338a:	930c      	str	r3, [sp, #48]	; 0x30
 800338c:	e615      	b.n	8002fba <_svfprintf_r+0x572>
 800338e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003390:	4651      	mov	r1, sl
 8003392:	4658      	mov	r0, fp
 8003394:	f001 fea2 	bl	80050dc <__ssprint_r>
 8003398:	2800      	cmp	r0, #0
 800339a:	f040 82b6 	bne.w	800390a <_svfprintf_r+0xec2>
 800339e:	ac2c      	add	r4, sp, #176	; 0xb0
 80033a0:	e7f1      	b.n	8003386 <_svfprintf_r+0x93e>
 80033a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80033a4:	4651      	mov	r1, sl
 80033a6:	4658      	mov	r0, fp
 80033a8:	f001 fe98 	bl	80050dc <__ssprint_r>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	f040 82ac 	bne.w	800390a <_svfprintf_r+0xec2>
 80033b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80033b4:	e614      	b.n	8002fe0 <_svfprintf_r+0x598>
 80033b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80033b8:	4651      	mov	r1, sl
 80033ba:	4658      	mov	r0, fp
 80033bc:	f001 fe8e 	bl	80050dc <__ssprint_r>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f040 82a2 	bne.w	800390a <_svfprintf_r+0xec2>
 80033c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80033c8:	e61c      	b.n	8003004 <_svfprintf_r+0x5bc>
 80033ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80033cc:	4651      	mov	r1, sl
 80033ce:	4658      	mov	r0, fp
 80033d0:	f001 fe84 	bl	80050dc <__ssprint_r>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	f040 8298 	bne.w	800390a <_svfprintf_r+0xec2>
 80033da:	ac2c      	add	r4, sp, #176	; 0xb0
 80033dc:	e622      	b.n	8003024 <_svfprintf_r+0x5dc>
 80033de:	2210      	movs	r2, #16
 80033e0:	6062      	str	r2, [r4, #4]
 80033e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80033e4:	3210      	adds	r2, #16
 80033e6:	9221      	str	r2, [sp, #132]	; 0x84
 80033e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80033ea:	3201      	adds	r2, #1
 80033ec:	2a07      	cmp	r2, #7
 80033ee:	9220      	str	r2, [sp, #128]	; 0x80
 80033f0:	dc02      	bgt.n	80033f8 <_svfprintf_r+0x9b0>
 80033f2:	3408      	adds	r4, #8
 80033f4:	3b10      	subs	r3, #16
 80033f6:	e61d      	b.n	8003034 <_svfprintf_r+0x5ec>
 80033f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80033fa:	4651      	mov	r1, sl
 80033fc:	4658      	mov	r0, fp
 80033fe:	930c      	str	r3, [sp, #48]	; 0x30
 8003400:	f001 fe6c 	bl	80050dc <__ssprint_r>
 8003404:	2800      	cmp	r0, #0
 8003406:	f040 8280 	bne.w	800390a <_svfprintf_r+0xec2>
 800340a:	ac2c      	add	r4, sp, #176	; 0xb0
 800340c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800340e:	e7f1      	b.n	80033f4 <_svfprintf_r+0x9ac>
 8003410:	aa1f      	add	r2, sp, #124	; 0x7c
 8003412:	4651      	mov	r1, sl
 8003414:	4658      	mov	r0, fp
 8003416:	f001 fe61 	bl	80050dc <__ssprint_r>
 800341a:	2800      	cmp	r0, #0
 800341c:	f040 8275 	bne.w	800390a <_svfprintf_r+0xec2>
 8003420:	ac2c      	add	r4, sp, #176	; 0xb0
 8003422:	e617      	b.n	8003054 <_svfprintf_r+0x60c>
 8003424:	2310      	movs	r3, #16
 8003426:	6063      	str	r3, [r4, #4]
 8003428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800342a:	3310      	adds	r3, #16
 800342c:	9321      	str	r3, [sp, #132]	; 0x84
 800342e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003430:	3301      	adds	r3, #1
 8003432:	2b07      	cmp	r3, #7
 8003434:	9320      	str	r3, [sp, #128]	; 0x80
 8003436:	dc02      	bgt.n	800343e <_svfprintf_r+0x9f6>
 8003438:	3408      	adds	r4, #8
 800343a:	3e10      	subs	r6, #16
 800343c:	e60e      	b.n	800305c <_svfprintf_r+0x614>
 800343e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003440:	4651      	mov	r1, sl
 8003442:	4658      	mov	r0, fp
 8003444:	f001 fe4a 	bl	80050dc <__ssprint_r>
 8003448:	2800      	cmp	r0, #0
 800344a:	f040 825e 	bne.w	800390a <_svfprintf_r+0xec2>
 800344e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003450:	e7f3      	b.n	800343a <_svfprintf_r+0x9f2>
 8003452:	aa1f      	add	r2, sp, #124	; 0x7c
 8003454:	4651      	mov	r1, sl
 8003456:	4658      	mov	r0, fp
 8003458:	f001 fe40 	bl	80050dc <__ssprint_r>
 800345c:	2800      	cmp	r0, #0
 800345e:	f040 8254 	bne.w	800390a <_svfprintf_r+0xec2>
 8003462:	ac2c      	add	r4, sp, #176	; 0xb0
 8003464:	e60a      	b.n	800307c <_svfprintf_r+0x634>
 8003466:	9b02      	ldr	r3, [sp, #8]
 8003468:	2b65      	cmp	r3, #101	; 0x65
 800346a:	f340 81a9 	ble.w	80037c0 <_svfprintf_r+0xd78>
 800346e:	2200      	movs	r2, #0
 8003470:	2300      	movs	r3, #0
 8003472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003476:	f7fd fb2b 	bl	8000ad0 <__aeabi_dcmpeq>
 800347a:	2800      	cmp	r0, #0
 800347c:	d062      	beq.n	8003544 <_svfprintf_r+0xafc>
 800347e:	4b2f      	ldr	r3, [pc, #188]	; (800353c <_svfprintf_r+0xaf4>)
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	2301      	movs	r3, #1
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003488:	3301      	adds	r3, #1
 800348a:	9321      	str	r3, [sp, #132]	; 0x84
 800348c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800348e:	3301      	adds	r3, #1
 8003490:	2b07      	cmp	r3, #7
 8003492:	9320      	str	r3, [sp, #128]	; 0x80
 8003494:	dc25      	bgt.n	80034e2 <_svfprintf_r+0xa9a>
 8003496:	3408      	adds	r4, #8
 8003498:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800349a:	9a03      	ldr	r2, [sp, #12]
 800349c:	4293      	cmp	r3, r2
 800349e:	db02      	blt.n	80034a6 <_svfprintf_r+0xa5e>
 80034a0:	07ee      	lsls	r6, r5, #31
 80034a2:	f57f ae02 	bpl.w	80030aa <_svfprintf_r+0x662>
 80034a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	9b08      	ldr	r3, [sp, #32]
 80034ac:	6063      	str	r3, [r4, #4]
 80034ae:	9a08      	ldr	r2, [sp, #32]
 80034b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034b2:	4413      	add	r3, r2
 80034b4:	9321      	str	r3, [sp, #132]	; 0x84
 80034b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034b8:	3301      	adds	r3, #1
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	9320      	str	r3, [sp, #128]	; 0x80
 80034be:	dc1a      	bgt.n	80034f6 <_svfprintf_r+0xaae>
 80034c0:	3408      	adds	r4, #8
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	1e5e      	subs	r6, r3, #1
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	f77f adef 	ble.w	80030aa <_svfprintf_r+0x662>
 80034cc:	4f1c      	ldr	r7, [pc, #112]	; (8003540 <_svfprintf_r+0xaf8>)
 80034ce:	f04f 0810 	mov.w	r8, #16
 80034d2:	2e10      	cmp	r6, #16
 80034d4:	6027      	str	r7, [r4, #0]
 80034d6:	dc18      	bgt.n	800350a <_svfprintf_r+0xac2>
 80034d8:	6066      	str	r6, [r4, #4]
 80034da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034dc:	441e      	add	r6, r3
 80034de:	9621      	str	r6, [sp, #132]	; 0x84
 80034e0:	e5d4      	b.n	800308c <_svfprintf_r+0x644>
 80034e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80034e4:	4651      	mov	r1, sl
 80034e6:	4658      	mov	r0, fp
 80034e8:	f001 fdf8 	bl	80050dc <__ssprint_r>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	f040 820c 	bne.w	800390a <_svfprintf_r+0xec2>
 80034f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80034f4:	e7d0      	b.n	8003498 <_svfprintf_r+0xa50>
 80034f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80034f8:	4651      	mov	r1, sl
 80034fa:	4658      	mov	r0, fp
 80034fc:	f001 fdee 	bl	80050dc <__ssprint_r>
 8003500:	2800      	cmp	r0, #0
 8003502:	f040 8202 	bne.w	800390a <_svfprintf_r+0xec2>
 8003506:	ac2c      	add	r4, sp, #176	; 0xb0
 8003508:	e7db      	b.n	80034c2 <_svfprintf_r+0xa7a>
 800350a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800350c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003510:	3310      	adds	r3, #16
 8003512:	9321      	str	r3, [sp, #132]	; 0x84
 8003514:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003516:	3301      	adds	r3, #1
 8003518:	2b07      	cmp	r3, #7
 800351a:	9320      	str	r3, [sp, #128]	; 0x80
 800351c:	dc02      	bgt.n	8003524 <_svfprintf_r+0xadc>
 800351e:	3408      	adds	r4, #8
 8003520:	3e10      	subs	r6, #16
 8003522:	e7d6      	b.n	80034d2 <_svfprintf_r+0xa8a>
 8003524:	aa1f      	add	r2, sp, #124	; 0x7c
 8003526:	4651      	mov	r1, sl
 8003528:	4658      	mov	r0, fp
 800352a:	f001 fdd7 	bl	80050dc <__ssprint_r>
 800352e:	2800      	cmp	r0, #0
 8003530:	f040 81eb 	bne.w	800390a <_svfprintf_r+0xec2>
 8003534:	ac2c      	add	r4, sp, #176	; 0xb0
 8003536:	e7f3      	b.n	8003520 <_svfprintf_r+0xad8>
 8003538:	08005850 	.word	0x08005850
 800353c:	08005861 	.word	0x08005861
 8003540:	08005873 	.word	0x08005873
 8003544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003546:	2b00      	cmp	r3, #0
 8003548:	dc7a      	bgt.n	8003640 <_svfprintf_r+0xbf8>
 800354a:	4b9b      	ldr	r3, [pc, #620]	; (80037b8 <_svfprintf_r+0xd70>)
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	2301      	movs	r3, #1
 8003550:	6063      	str	r3, [r4, #4]
 8003552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003554:	3301      	adds	r3, #1
 8003556:	9321      	str	r3, [sp, #132]	; 0x84
 8003558:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800355a:	3301      	adds	r3, #1
 800355c:	2b07      	cmp	r3, #7
 800355e:	9320      	str	r3, [sp, #128]	; 0x80
 8003560:	dc44      	bgt.n	80035ec <_svfprintf_r+0xba4>
 8003562:	3408      	adds	r4, #8
 8003564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003566:	b923      	cbnz	r3, 8003572 <_svfprintf_r+0xb2a>
 8003568:	9b03      	ldr	r3, [sp, #12]
 800356a:	b913      	cbnz	r3, 8003572 <_svfprintf_r+0xb2a>
 800356c:	07e8      	lsls	r0, r5, #31
 800356e:	f57f ad9c 	bpl.w	80030aa <_svfprintf_r+0x662>
 8003572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	9b08      	ldr	r3, [sp, #32]
 8003578:	6063      	str	r3, [r4, #4]
 800357a:	9a08      	ldr	r2, [sp, #32]
 800357c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800357e:	4413      	add	r3, r2
 8003580:	9321      	str	r3, [sp, #132]	; 0x84
 8003582:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003584:	3301      	adds	r3, #1
 8003586:	2b07      	cmp	r3, #7
 8003588:	9320      	str	r3, [sp, #128]	; 0x80
 800358a:	dc39      	bgt.n	8003600 <_svfprintf_r+0xbb8>
 800358c:	f104 0308 	add.w	r3, r4, #8
 8003590:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003592:	2e00      	cmp	r6, #0
 8003594:	da19      	bge.n	80035ca <_svfprintf_r+0xb82>
 8003596:	4f89      	ldr	r7, [pc, #548]	; (80037bc <_svfprintf_r+0xd74>)
 8003598:	4276      	negs	r6, r6
 800359a:	2410      	movs	r4, #16
 800359c:	2e10      	cmp	r6, #16
 800359e:	601f      	str	r7, [r3, #0]
 80035a0:	dc38      	bgt.n	8003614 <_svfprintf_r+0xbcc>
 80035a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80035a4:	605e      	str	r6, [r3, #4]
 80035a6:	4416      	add	r6, r2
 80035a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80035aa:	9621      	str	r6, [sp, #132]	; 0x84
 80035ac:	3201      	adds	r2, #1
 80035ae:	2a07      	cmp	r2, #7
 80035b0:	f103 0308 	add.w	r3, r3, #8
 80035b4:	9220      	str	r2, [sp, #128]	; 0x80
 80035b6:	dd08      	ble.n	80035ca <_svfprintf_r+0xb82>
 80035b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80035ba:	4651      	mov	r1, sl
 80035bc:	4658      	mov	r0, fp
 80035be:	f001 fd8d 	bl	80050dc <__ssprint_r>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f040 81a1 	bne.w	800390a <_svfprintf_r+0xec2>
 80035c8:	ab2c      	add	r3, sp, #176	; 0xb0
 80035ca:	9a03      	ldr	r2, [sp, #12]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	9903      	ldr	r1, [sp, #12]
 80035d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80035d2:	f8c3 8000 	str.w	r8, [r3]
 80035d6:	440a      	add	r2, r1
 80035d8:	9221      	str	r2, [sp, #132]	; 0x84
 80035da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80035dc:	3201      	adds	r2, #1
 80035de:	2a07      	cmp	r2, #7
 80035e0:	9220      	str	r2, [sp, #128]	; 0x80
 80035e2:	f73f ad59 	bgt.w	8003098 <_svfprintf_r+0x650>
 80035e6:	f103 0408 	add.w	r4, r3, #8
 80035ea:	e55e      	b.n	80030aa <_svfprintf_r+0x662>
 80035ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80035ee:	4651      	mov	r1, sl
 80035f0:	4658      	mov	r0, fp
 80035f2:	f001 fd73 	bl	80050dc <__ssprint_r>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	f040 8187 	bne.w	800390a <_svfprintf_r+0xec2>
 80035fc:	ac2c      	add	r4, sp, #176	; 0xb0
 80035fe:	e7b1      	b.n	8003564 <_svfprintf_r+0xb1c>
 8003600:	aa1f      	add	r2, sp, #124	; 0x7c
 8003602:	4651      	mov	r1, sl
 8003604:	4658      	mov	r0, fp
 8003606:	f001 fd69 	bl	80050dc <__ssprint_r>
 800360a:	2800      	cmp	r0, #0
 800360c:	f040 817d 	bne.w	800390a <_svfprintf_r+0xec2>
 8003610:	ab2c      	add	r3, sp, #176	; 0xb0
 8003612:	e7bd      	b.n	8003590 <_svfprintf_r+0xb48>
 8003614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003616:	605c      	str	r4, [r3, #4]
 8003618:	3210      	adds	r2, #16
 800361a:	9221      	str	r2, [sp, #132]	; 0x84
 800361c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800361e:	3201      	adds	r2, #1
 8003620:	2a07      	cmp	r2, #7
 8003622:	9220      	str	r2, [sp, #128]	; 0x80
 8003624:	dc02      	bgt.n	800362c <_svfprintf_r+0xbe4>
 8003626:	3308      	adds	r3, #8
 8003628:	3e10      	subs	r6, #16
 800362a:	e7b7      	b.n	800359c <_svfprintf_r+0xb54>
 800362c:	aa1f      	add	r2, sp, #124	; 0x7c
 800362e:	4651      	mov	r1, sl
 8003630:	4658      	mov	r0, fp
 8003632:	f001 fd53 	bl	80050dc <__ssprint_r>
 8003636:	2800      	cmp	r0, #0
 8003638:	f040 8167 	bne.w	800390a <_svfprintf_r+0xec2>
 800363c:	ab2c      	add	r3, sp, #176	; 0xb0
 800363e:	e7f3      	b.n	8003628 <_svfprintf_r+0xbe0>
 8003640:	9b03      	ldr	r3, [sp, #12]
 8003642:	42bb      	cmp	r3, r7
 8003644:	bfa8      	it	ge
 8003646:	463b      	movge	r3, r7
 8003648:	2b00      	cmp	r3, #0
 800364a:	461e      	mov	r6, r3
 800364c:	dd0b      	ble.n	8003666 <_svfprintf_r+0xc1e>
 800364e:	6063      	str	r3, [r4, #4]
 8003650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003652:	f8c4 8000 	str.w	r8, [r4]
 8003656:	4433      	add	r3, r6
 8003658:	9321      	str	r3, [sp, #132]	; 0x84
 800365a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800365c:	3301      	adds	r3, #1
 800365e:	2b07      	cmp	r3, #7
 8003660:	9320      	str	r3, [sp, #128]	; 0x80
 8003662:	dc5f      	bgt.n	8003724 <_svfprintf_r+0xcdc>
 8003664:	3408      	adds	r4, #8
 8003666:	2e00      	cmp	r6, #0
 8003668:	bfac      	ite	ge
 800366a:	1bbe      	subge	r6, r7, r6
 800366c:	463e      	movlt	r6, r7
 800366e:	2e00      	cmp	r6, #0
 8003670:	dd0f      	ble.n	8003692 <_svfprintf_r+0xc4a>
 8003672:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80037bc <_svfprintf_r+0xd74>
 8003676:	f8c4 9000 	str.w	r9, [r4]
 800367a:	2e10      	cmp	r6, #16
 800367c:	dc5c      	bgt.n	8003738 <_svfprintf_r+0xcf0>
 800367e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003680:	6066      	str	r6, [r4, #4]
 8003682:	441e      	add	r6, r3
 8003684:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003686:	9621      	str	r6, [sp, #132]	; 0x84
 8003688:	3301      	adds	r3, #1
 800368a:	2b07      	cmp	r3, #7
 800368c:	9320      	str	r3, [sp, #128]	; 0x80
 800368e:	dc6a      	bgt.n	8003766 <_svfprintf_r+0xd1e>
 8003690:	3408      	adds	r4, #8
 8003692:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003694:	9a03      	ldr	r2, [sp, #12]
 8003696:	4293      	cmp	r3, r2
 8003698:	db01      	blt.n	800369e <_svfprintf_r+0xc56>
 800369a:	07e9      	lsls	r1, r5, #31
 800369c:	d50d      	bpl.n	80036ba <_svfprintf_r+0xc72>
 800369e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	9b08      	ldr	r3, [sp, #32]
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	9a08      	ldr	r2, [sp, #32]
 80036a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036aa:	4413      	add	r3, r2
 80036ac:	9321      	str	r3, [sp, #132]	; 0x84
 80036ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036b0:	3301      	adds	r3, #1
 80036b2:	2b07      	cmp	r3, #7
 80036b4:	9320      	str	r3, [sp, #128]	; 0x80
 80036b6:	dc60      	bgt.n	800377a <_svfprintf_r+0xd32>
 80036b8:	3408      	adds	r4, #8
 80036ba:	9b03      	ldr	r3, [sp, #12]
 80036bc:	9a03      	ldr	r2, [sp, #12]
 80036be:	1bde      	subs	r6, r3, r7
 80036c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	429e      	cmp	r6, r3
 80036c6:	bfa8      	it	ge
 80036c8:	461e      	movge	r6, r3
 80036ca:	2e00      	cmp	r6, #0
 80036cc:	dd0b      	ble.n	80036e6 <_svfprintf_r+0xc9e>
 80036ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036d0:	6066      	str	r6, [r4, #4]
 80036d2:	4433      	add	r3, r6
 80036d4:	9321      	str	r3, [sp, #132]	; 0x84
 80036d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036d8:	3301      	adds	r3, #1
 80036da:	4447      	add	r7, r8
 80036dc:	2b07      	cmp	r3, #7
 80036de:	6027      	str	r7, [r4, #0]
 80036e0:	9320      	str	r3, [sp, #128]	; 0x80
 80036e2:	dc54      	bgt.n	800378e <_svfprintf_r+0xd46>
 80036e4:	3408      	adds	r4, #8
 80036e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036e8:	9a03      	ldr	r2, [sp, #12]
 80036ea:	2e00      	cmp	r6, #0
 80036ec:	eba2 0303 	sub.w	r3, r2, r3
 80036f0:	bfac      	ite	ge
 80036f2:	1b9e      	subge	r6, r3, r6
 80036f4:	461e      	movlt	r6, r3
 80036f6:	2e00      	cmp	r6, #0
 80036f8:	f77f acd7 	ble.w	80030aa <_svfprintf_r+0x662>
 80036fc:	4f2f      	ldr	r7, [pc, #188]	; (80037bc <_svfprintf_r+0xd74>)
 80036fe:	f04f 0810 	mov.w	r8, #16
 8003702:	2e10      	cmp	r6, #16
 8003704:	6027      	str	r7, [r4, #0]
 8003706:	f77f aee7 	ble.w	80034d8 <_svfprintf_r+0xa90>
 800370a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800370c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003710:	3310      	adds	r3, #16
 8003712:	9321      	str	r3, [sp, #132]	; 0x84
 8003714:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003716:	3301      	adds	r3, #1
 8003718:	2b07      	cmp	r3, #7
 800371a:	9320      	str	r3, [sp, #128]	; 0x80
 800371c:	dc41      	bgt.n	80037a2 <_svfprintf_r+0xd5a>
 800371e:	3408      	adds	r4, #8
 8003720:	3e10      	subs	r6, #16
 8003722:	e7ee      	b.n	8003702 <_svfprintf_r+0xcba>
 8003724:	aa1f      	add	r2, sp, #124	; 0x7c
 8003726:	4651      	mov	r1, sl
 8003728:	4658      	mov	r0, fp
 800372a:	f001 fcd7 	bl	80050dc <__ssprint_r>
 800372e:	2800      	cmp	r0, #0
 8003730:	f040 80eb 	bne.w	800390a <_svfprintf_r+0xec2>
 8003734:	ac2c      	add	r4, sp, #176	; 0xb0
 8003736:	e796      	b.n	8003666 <_svfprintf_r+0xc1e>
 8003738:	2310      	movs	r3, #16
 800373a:	6063      	str	r3, [r4, #4]
 800373c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800373e:	3310      	adds	r3, #16
 8003740:	9321      	str	r3, [sp, #132]	; 0x84
 8003742:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003744:	3301      	adds	r3, #1
 8003746:	2b07      	cmp	r3, #7
 8003748:	9320      	str	r3, [sp, #128]	; 0x80
 800374a:	dc02      	bgt.n	8003752 <_svfprintf_r+0xd0a>
 800374c:	3408      	adds	r4, #8
 800374e:	3e10      	subs	r6, #16
 8003750:	e791      	b.n	8003676 <_svfprintf_r+0xc2e>
 8003752:	aa1f      	add	r2, sp, #124	; 0x7c
 8003754:	4651      	mov	r1, sl
 8003756:	4658      	mov	r0, fp
 8003758:	f001 fcc0 	bl	80050dc <__ssprint_r>
 800375c:	2800      	cmp	r0, #0
 800375e:	f040 80d4 	bne.w	800390a <_svfprintf_r+0xec2>
 8003762:	ac2c      	add	r4, sp, #176	; 0xb0
 8003764:	e7f3      	b.n	800374e <_svfprintf_r+0xd06>
 8003766:	aa1f      	add	r2, sp, #124	; 0x7c
 8003768:	4651      	mov	r1, sl
 800376a:	4658      	mov	r0, fp
 800376c:	f001 fcb6 	bl	80050dc <__ssprint_r>
 8003770:	2800      	cmp	r0, #0
 8003772:	f040 80ca 	bne.w	800390a <_svfprintf_r+0xec2>
 8003776:	ac2c      	add	r4, sp, #176	; 0xb0
 8003778:	e78b      	b.n	8003692 <_svfprintf_r+0xc4a>
 800377a:	aa1f      	add	r2, sp, #124	; 0x7c
 800377c:	4651      	mov	r1, sl
 800377e:	4658      	mov	r0, fp
 8003780:	f001 fcac 	bl	80050dc <__ssprint_r>
 8003784:	2800      	cmp	r0, #0
 8003786:	f040 80c0 	bne.w	800390a <_svfprintf_r+0xec2>
 800378a:	ac2c      	add	r4, sp, #176	; 0xb0
 800378c:	e795      	b.n	80036ba <_svfprintf_r+0xc72>
 800378e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003790:	4651      	mov	r1, sl
 8003792:	4658      	mov	r0, fp
 8003794:	f001 fca2 	bl	80050dc <__ssprint_r>
 8003798:	2800      	cmp	r0, #0
 800379a:	f040 80b6 	bne.w	800390a <_svfprintf_r+0xec2>
 800379e:	ac2c      	add	r4, sp, #176	; 0xb0
 80037a0:	e7a1      	b.n	80036e6 <_svfprintf_r+0xc9e>
 80037a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80037a4:	4651      	mov	r1, sl
 80037a6:	4658      	mov	r0, fp
 80037a8:	f001 fc98 	bl	80050dc <__ssprint_r>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	f040 80ac 	bne.w	800390a <_svfprintf_r+0xec2>
 80037b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80037b4:	e7b4      	b.n	8003720 <_svfprintf_r+0xcd8>
 80037b6:	bf00      	nop
 80037b8:	08005861 	.word	0x08005861
 80037bc:	08005873 	.word	0x08005873
 80037c0:	9b03      	ldr	r3, [sp, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	dc01      	bgt.n	80037ca <_svfprintf_r+0xd82>
 80037c6:	07ea      	lsls	r2, r5, #31
 80037c8:	d576      	bpl.n	80038b8 <_svfprintf_r+0xe70>
 80037ca:	2301      	movs	r3, #1
 80037cc:	6063      	str	r3, [r4, #4]
 80037ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037d0:	f8c4 8000 	str.w	r8, [r4]
 80037d4:	3301      	adds	r3, #1
 80037d6:	9321      	str	r3, [sp, #132]	; 0x84
 80037d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037da:	3301      	adds	r3, #1
 80037dc:	2b07      	cmp	r3, #7
 80037de:	9320      	str	r3, [sp, #128]	; 0x80
 80037e0:	dc36      	bgt.n	8003850 <_svfprintf_r+0xe08>
 80037e2:	3408      	adds	r4, #8
 80037e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	9b08      	ldr	r3, [sp, #32]
 80037ea:	6063      	str	r3, [r4, #4]
 80037ec:	9a08      	ldr	r2, [sp, #32]
 80037ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037f0:	4413      	add	r3, r2
 80037f2:	9321      	str	r3, [sp, #132]	; 0x84
 80037f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037f6:	3301      	adds	r3, #1
 80037f8:	2b07      	cmp	r3, #7
 80037fa:	9320      	str	r3, [sp, #128]	; 0x80
 80037fc:	dc31      	bgt.n	8003862 <_svfprintf_r+0xe1a>
 80037fe:	3408      	adds	r4, #8
 8003800:	2300      	movs	r3, #0
 8003802:	2200      	movs	r2, #0
 8003804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003808:	f7fd f962 	bl	8000ad0 <__aeabi_dcmpeq>
 800380c:	9b03      	ldr	r3, [sp, #12]
 800380e:	1e5e      	subs	r6, r3, #1
 8003810:	2800      	cmp	r0, #0
 8003812:	d12f      	bne.n	8003874 <_svfprintf_r+0xe2c>
 8003814:	f108 0301 	add.w	r3, r8, #1
 8003818:	e884 0048 	stmia.w	r4, {r3, r6}
 800381c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800381e:	9a03      	ldr	r2, [sp, #12]
 8003820:	3b01      	subs	r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	9321      	str	r3, [sp, #132]	; 0x84
 8003826:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003828:	3301      	adds	r3, #1
 800382a:	2b07      	cmp	r3, #7
 800382c:	9320      	str	r3, [sp, #128]	; 0x80
 800382e:	dd4a      	ble.n	80038c6 <_svfprintf_r+0xe7e>
 8003830:	aa1f      	add	r2, sp, #124	; 0x7c
 8003832:	4651      	mov	r1, sl
 8003834:	4658      	mov	r0, fp
 8003836:	f001 fc51 	bl	80050dc <__ssprint_r>
 800383a:	2800      	cmp	r0, #0
 800383c:	d165      	bne.n	800390a <_svfprintf_r+0xec2>
 800383e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003840:	ab1b      	add	r3, sp, #108	; 0x6c
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003846:	6063      	str	r3, [r4, #4]
 8003848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800384a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800384c:	4413      	add	r3, r2
 800384e:	e41c      	b.n	800308a <_svfprintf_r+0x642>
 8003850:	aa1f      	add	r2, sp, #124	; 0x7c
 8003852:	4651      	mov	r1, sl
 8003854:	4658      	mov	r0, fp
 8003856:	f001 fc41 	bl	80050dc <__ssprint_r>
 800385a:	2800      	cmp	r0, #0
 800385c:	d155      	bne.n	800390a <_svfprintf_r+0xec2>
 800385e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003860:	e7c0      	b.n	80037e4 <_svfprintf_r+0xd9c>
 8003862:	aa1f      	add	r2, sp, #124	; 0x7c
 8003864:	4651      	mov	r1, sl
 8003866:	4658      	mov	r0, fp
 8003868:	f001 fc38 	bl	80050dc <__ssprint_r>
 800386c:	2800      	cmp	r0, #0
 800386e:	d14c      	bne.n	800390a <_svfprintf_r+0xec2>
 8003870:	ac2c      	add	r4, sp, #176	; 0xb0
 8003872:	e7c5      	b.n	8003800 <_svfprintf_r+0xdb8>
 8003874:	2e00      	cmp	r6, #0
 8003876:	dde3      	ble.n	8003840 <_svfprintf_r+0xdf8>
 8003878:	4f59      	ldr	r7, [pc, #356]	; (80039e0 <_svfprintf_r+0xf98>)
 800387a:	f04f 0810 	mov.w	r8, #16
 800387e:	2e10      	cmp	r6, #16
 8003880:	6027      	str	r7, [r4, #0]
 8003882:	dc04      	bgt.n	800388e <_svfprintf_r+0xe46>
 8003884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003886:	6066      	str	r6, [r4, #4]
 8003888:	441e      	add	r6, r3
 800388a:	9621      	str	r6, [sp, #132]	; 0x84
 800388c:	e7cb      	b.n	8003826 <_svfprintf_r+0xdde>
 800388e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003890:	f8c4 8004 	str.w	r8, [r4, #4]
 8003894:	3310      	adds	r3, #16
 8003896:	9321      	str	r3, [sp, #132]	; 0x84
 8003898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800389a:	3301      	adds	r3, #1
 800389c:	2b07      	cmp	r3, #7
 800389e:	9320      	str	r3, [sp, #128]	; 0x80
 80038a0:	dc02      	bgt.n	80038a8 <_svfprintf_r+0xe60>
 80038a2:	3408      	adds	r4, #8
 80038a4:	3e10      	subs	r6, #16
 80038a6:	e7ea      	b.n	800387e <_svfprintf_r+0xe36>
 80038a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80038aa:	4651      	mov	r1, sl
 80038ac:	4658      	mov	r0, fp
 80038ae:	f001 fc15 	bl	80050dc <__ssprint_r>
 80038b2:	bb50      	cbnz	r0, 800390a <_svfprintf_r+0xec2>
 80038b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80038b6:	e7f5      	b.n	80038a4 <_svfprintf_r+0xe5c>
 80038b8:	2301      	movs	r3, #1
 80038ba:	6063      	str	r3, [r4, #4]
 80038bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038be:	f8c4 8000 	str.w	r8, [r4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	e7ae      	b.n	8003824 <_svfprintf_r+0xddc>
 80038c6:	3408      	adds	r4, #8
 80038c8:	e7ba      	b.n	8003840 <_svfprintf_r+0xdf8>
 80038ca:	3408      	adds	r4, #8
 80038cc:	f7ff bbed 	b.w	80030aa <_svfprintf_r+0x662>
 80038d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80038d4:	1a9d      	subs	r5, r3, r2
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	f77f abea 	ble.w	80030b0 <_svfprintf_r+0x668>
 80038dc:	2610      	movs	r6, #16
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <_svfprintf_r+0xf9c>)
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	2d10      	cmp	r5, #16
 80038e4:	dc1b      	bgt.n	800391e <_svfprintf_r+0xed6>
 80038e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038e8:	6065      	str	r5, [r4, #4]
 80038ea:	441d      	add	r5, r3
 80038ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038ee:	9521      	str	r5, [sp, #132]	; 0x84
 80038f0:	3301      	adds	r3, #1
 80038f2:	2b07      	cmp	r3, #7
 80038f4:	9320      	str	r3, [sp, #128]	; 0x80
 80038f6:	f77f abdb 	ble.w	80030b0 <_svfprintf_r+0x668>
 80038fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80038fc:	4651      	mov	r1, sl
 80038fe:	4658      	mov	r0, fp
 8003900:	f001 fbec 	bl	80050dc <__ssprint_r>
 8003904:	2800      	cmp	r0, #0
 8003906:	f43f abd3 	beq.w	80030b0 <_svfprintf_r+0x668>
 800390a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800390e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003914:	bf18      	it	ne
 8003916:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800391a:	f7ff b8b9 	b.w	8002a90 <_svfprintf_r+0x48>
 800391e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003920:	6066      	str	r6, [r4, #4]
 8003922:	3310      	adds	r3, #16
 8003924:	9321      	str	r3, [sp, #132]	; 0x84
 8003926:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003928:	3301      	adds	r3, #1
 800392a:	2b07      	cmp	r3, #7
 800392c:	9320      	str	r3, [sp, #128]	; 0x80
 800392e:	dc02      	bgt.n	8003936 <_svfprintf_r+0xeee>
 8003930:	3408      	adds	r4, #8
 8003932:	3d10      	subs	r5, #16
 8003934:	e7d3      	b.n	80038de <_svfprintf_r+0xe96>
 8003936:	aa1f      	add	r2, sp, #124	; 0x7c
 8003938:	4651      	mov	r1, sl
 800393a:	4658      	mov	r0, fp
 800393c:	f001 fbce 	bl	80050dc <__ssprint_r>
 8003940:	2800      	cmp	r0, #0
 8003942:	d1e2      	bne.n	800390a <_svfprintf_r+0xec2>
 8003944:	ac2c      	add	r4, sp, #176	; 0xb0
 8003946:	e7f4      	b.n	8003932 <_svfprintf_r+0xeea>
 8003948:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0dd      	beq.n	800390a <_svfprintf_r+0xec2>
 800394e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003950:	4651      	mov	r1, sl
 8003952:	4658      	mov	r0, fp
 8003954:	f001 fbc2 	bl	80050dc <__ssprint_r>
 8003958:	e7d7      	b.n	800390a <_svfprintf_r+0xec2>
 800395a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f8e7 	bl	8000b34 <__aeabi_dcmpun>
 8003966:	2800      	cmp	r0, #0
 8003968:	f43f aa44 	beq.w	8002df4 <_svfprintf_r+0x3ac>
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <_svfprintf_r+0xfa0>)
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <_svfprintf_r+0xfa4>)
 8003970:	f7ff ba34 	b.w	8002ddc <_svfprintf_r+0x394>
 8003974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003976:	eba3 0308 	sub.w	r3, r3, r8
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	f7ff bab5 	b.w	8002eea <_svfprintf_r+0x4a2>
 8003980:	ea56 0207 	orrs.w	r2, r6, r7
 8003984:	950b      	str	r5, [sp, #44]	; 0x2c
 8003986:	f43f ac2b 	beq.w	80031e0 <_svfprintf_r+0x798>
 800398a:	2b01      	cmp	r3, #1
 800398c:	f43f ac9d 	beq.w	80032ca <_svfprintf_r+0x882>
 8003990:	2b02      	cmp	r3, #2
 8003992:	f43f acbd 	beq.w	8003310 <_svfprintf_r+0x8c8>
 8003996:	ab2c      	add	r3, sp, #176	; 0xb0
 8003998:	08f1      	lsrs	r1, r6, #3
 800399a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800399e:	08f8      	lsrs	r0, r7, #3
 80039a0:	f006 0207 	and.w	r2, r6, #7
 80039a4:	4607      	mov	r7, r0
 80039a6:	460e      	mov	r6, r1
 80039a8:	3230      	adds	r2, #48	; 0x30
 80039aa:	ea56 0107 	orrs.w	r1, r6, r7
 80039ae:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80039b2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80039b6:	f47f ac86 	bne.w	80032c6 <_svfprintf_r+0x87e>
 80039ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039bc:	07c9      	lsls	r1, r1, #31
 80039be:	d506      	bpl.n	80039ce <_svfprintf_r+0xf86>
 80039c0:	2a30      	cmp	r2, #48	; 0x30
 80039c2:	d004      	beq.n	80039ce <_svfprintf_r+0xf86>
 80039c4:	2230      	movs	r2, #48	; 0x30
 80039c6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80039ca:	f1a3 0802 	sub.w	r8, r3, #2
 80039ce:	464e      	mov	r6, r9
 80039d0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80039d4:	eba9 0908 	sub.w	r9, r9, r8
 80039d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80039da:	2700      	movs	r7, #0
 80039dc:	f7ff bad1 	b.w	8002f82 <_svfprintf_r+0x53a>
 80039e0:	08005873 	.word	0x08005873
 80039e4:	08005863 	.word	0x08005863
 80039e8:	08005837 	.word	0x08005837
 80039ec:	0800583b 	.word	0x0800583b

080039f0 <quorem>:
 80039f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	6903      	ldr	r3, [r0, #16]
 80039f6:	690c      	ldr	r4, [r1, #16]
 80039f8:	429c      	cmp	r4, r3
 80039fa:	4680      	mov	r8, r0
 80039fc:	f300 8082 	bgt.w	8003b04 <quorem+0x114>
 8003a00:	3c01      	subs	r4, #1
 8003a02:	f101 0714 	add.w	r7, r1, #20
 8003a06:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003a0a:	f100 0614 	add.w	r6, r0, #20
 8003a0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003a12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a16:	eb06 030e 	add.w	r3, r6, lr
 8003a1a:	3501      	adds	r5, #1
 8003a1c:	eb07 090e 	add.w	r9, r7, lr
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a26:	b395      	cbz	r5, 8003a8e <quorem+0x9e>
 8003a28:	f04f 0a00 	mov.w	sl, #0
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	46b4      	mov	ip, r6
 8003a30:	46d3      	mov	fp, sl
 8003a32:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a36:	b293      	uxth	r3, r2
 8003a38:	fb05 a303 	mla	r3, r5, r3, sl
 8003a3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ebab 0303 	sub.w	r3, fp, r3
 8003a46:	0c12      	lsrs	r2, r2, #16
 8003a48:	f8bc b000 	ldrh.w	fp, [ip]
 8003a4c:	fb05 a202 	mla	r2, r5, r2, sl
 8003a50:	fa13 f38b 	uxtah	r3, r3, fp
 8003a54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003a58:	fa1f fb82 	uxth.w	fp, r2
 8003a5c:	f8dc 2000 	ldr.w	r2, [ip]
 8003a60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a6e:	4581      	cmp	r9, r0
 8003a70:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003a74:	f84c 3b04 	str.w	r3, [ip], #4
 8003a78:	d2db      	bcs.n	8003a32 <quorem+0x42>
 8003a7a:	f856 300e 	ldr.w	r3, [r6, lr]
 8003a7e:	b933      	cbnz	r3, 8003a8e <quorem+0x9e>
 8003a80:	9b01      	ldr	r3, [sp, #4]
 8003a82:	3b04      	subs	r3, #4
 8003a84:	429e      	cmp	r6, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	d330      	bcc.n	8003aec <quorem+0xfc>
 8003a8a:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f001 fa4d 	bl	8004f2e <__mcmp>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	db25      	blt.n	8003ae4 <quorem+0xf4>
 8003a98:	3501      	adds	r5, #1
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f04f 0e00 	mov.w	lr, #0
 8003aa0:	f857 2b04 	ldr.w	r2, [r7], #4
 8003aa4:	f8d0 c000 	ldr.w	ip, [r0]
 8003aa8:	b293      	uxth	r3, r2
 8003aaa:	ebae 0303 	sub.w	r3, lr, r3
 8003aae:	0c12      	lsrs	r2, r2, #16
 8003ab0:	fa13 f38c 	uxtah	r3, r3, ip
 8003ab4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ac2:	45b9      	cmp	r9, r7
 8003ac4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003ac8:	f840 3b04 	str.w	r3, [r0], #4
 8003acc:	d2e8      	bcs.n	8003aa0 <quorem+0xb0>
 8003ace:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003ad2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003ad6:	b92a      	cbnz	r2, 8003ae4 <quorem+0xf4>
 8003ad8:	3b04      	subs	r3, #4
 8003ada:	429e      	cmp	r6, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	d30b      	bcc.n	8003af8 <quorem+0x108>
 8003ae0:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	b003      	add	sp, #12
 8003ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	3b04      	subs	r3, #4
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	d1ca      	bne.n	8003a8a <quorem+0x9a>
 8003af4:	3c01      	subs	r4, #1
 8003af6:	e7c5      	b.n	8003a84 <quorem+0x94>
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	3b04      	subs	r3, #4
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d1ef      	bne.n	8003ae0 <quorem+0xf0>
 8003b00:	3c01      	subs	r4, #1
 8003b02:	e7ea      	b.n	8003ada <quorem+0xea>
 8003b04:	2000      	movs	r0, #0
 8003b06:	e7ee      	b.n	8003ae6 <quorem+0xf6>

08003b08 <_dtoa_r>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	ec57 6b10 	vmov	r6, r7, d0
 8003b10:	b097      	sub	sp, #92	; 0x5c
 8003b12:	e9cd 6700 	strd	r6, r7, [sp]
 8003b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b18:	9107      	str	r1, [sp, #28]
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	920a      	str	r2, [sp, #40]	; 0x28
 8003b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b20:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003b22:	b93e      	cbnz	r6, 8003b34 <_dtoa_r+0x2c>
 8003b24:	2010      	movs	r0, #16
 8003b26:	f000 fdcb 	bl	80046c0 <malloc>
 8003b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8003b2c:	6046      	str	r6, [r0, #4]
 8003b2e:	6086      	str	r6, [r0, #8]
 8003b30:	6006      	str	r6, [r0, #0]
 8003b32:	60c6      	str	r6, [r0, #12]
 8003b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	b151      	cbz	r1, 8003b50 <_dtoa_r+0x48>
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	604a      	str	r2, [r1, #4]
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4093      	lsls	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]
 8003b44:	4620      	mov	r0, r4
 8003b46:	f001 f81d 	bl	8004b84 <_Bfree>
 8003b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	9b01      	ldr	r3, [sp, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfbf      	itttt	lt
 8003b56:	2301      	movlt	r3, #1
 8003b58:	602b      	strlt	r3, [r5, #0]
 8003b5a:	9b01      	ldrlt	r3, [sp, #4]
 8003b5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b60:	bfb2      	itee	lt
 8003b62:	9301      	strlt	r3, [sp, #4]
 8003b64:	2300      	movge	r3, #0
 8003b66:	602b      	strge	r3, [r5, #0]
 8003b68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003b6c:	4ba8      	ldr	r3, [pc, #672]	; (8003e10 <_dtoa_r+0x308>)
 8003b6e:	ea33 0308 	bics.w	r3, r3, r8
 8003b72:	d11b      	bne.n	8003bac <_dtoa_r+0xa4>
 8003b74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b76:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	9b00      	ldr	r3, [sp, #0]
 8003b7e:	b923      	cbnz	r3, 8003b8a <_dtoa_r+0x82>
 8003b80:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003b84:	2800      	cmp	r0, #0
 8003b86:	f000 8578 	beq.w	800467a <_dtoa_r+0xb72>
 8003b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b8c:	b953      	cbnz	r3, 8003ba4 <_dtoa_r+0x9c>
 8003b8e:	4ba1      	ldr	r3, [pc, #644]	; (8003e14 <_dtoa_r+0x30c>)
 8003b90:	e021      	b.n	8003bd6 <_dtoa_r+0xce>
 8003b92:	4ba1      	ldr	r3, [pc, #644]	; (8003e18 <_dtoa_r+0x310>)
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	3308      	adds	r3, #8
 8003b98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	9802      	ldr	r0, [sp, #8]
 8003b9e:	b017      	add	sp, #92	; 0x5c
 8003ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba4:	4b9b      	ldr	r3, [pc, #620]	; (8003e14 <_dtoa_r+0x30c>)
 8003ba6:	9302      	str	r3, [sp, #8]
 8003ba8:	3303      	adds	r3, #3
 8003baa:	e7f5      	b.n	8003b98 <_dtoa_r+0x90>
 8003bac:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	4639      	mov	r1, r7
 8003bb8:	f7fc ff8a 	bl	8000ad0 <__aeabi_dcmpeq>
 8003bbc:	4681      	mov	r9, r0
 8003bbe:	b160      	cbz	r0, 8003bda <_dtoa_r+0xd2>
 8003bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8553 	beq.w	8004674 <_dtoa_r+0xb6c>
 8003bce:	4b93      	ldr	r3, [pc, #588]	; (8003e1c <_dtoa_r+0x314>)
 8003bd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	e7e0      	b.n	8003b9c <_dtoa_r+0x94>
 8003bda:	aa14      	add	r2, sp, #80	; 0x50
 8003bdc:	a915      	add	r1, sp, #84	; 0x54
 8003bde:	ec47 6b10 	vmov	d0, r6, r7
 8003be2:	4620      	mov	r0, r4
 8003be4:	f001 fa1b 	bl	800501e <__d2b>
 8003be8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003bec:	4682      	mov	sl, r0
 8003bee:	2d00      	cmp	r5, #0
 8003bf0:	d07e      	beq.n	8003cf0 <_dtoa_r+0x1e8>
 8003bf2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003bf6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003c00:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c04:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <_dtoa_r+0x318>)
 8003c0c:	f7fc fb44 	bl	8000298 <__aeabi_dsub>
 8003c10:	a379      	add	r3, pc, #484	; (adr r3, 8003df8 <_dtoa_r+0x2f0>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fcf3 	bl	8000600 <__aeabi_dmul>
 8003c1a:	a379      	add	r3, pc, #484	; (adr r3, 8003e00 <_dtoa_r+0x2f8>)
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f7fc fb3c 	bl	800029c <__adddf3>
 8003c24:	4606      	mov	r6, r0
 8003c26:	4628      	mov	r0, r5
 8003c28:	460f      	mov	r7, r1
 8003c2a:	f7fc fc83 	bl	8000534 <__aeabi_i2d>
 8003c2e:	a376      	add	r3, pc, #472	; (adr r3, 8003e08 <_dtoa_r+0x300>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc fce4 	bl	8000600 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	4639      	mov	r1, r7
 8003c40:	f7fc fb2c 	bl	800029c <__adddf3>
 8003c44:	4606      	mov	r6, r0
 8003c46:	460f      	mov	r7, r1
 8003c48:	f7fc ff8a 	bl	8000b60 <__aeabi_d2iz>
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4683      	mov	fp, r0
 8003c50:	2300      	movs	r3, #0
 8003c52:	4630      	mov	r0, r6
 8003c54:	4639      	mov	r1, r7
 8003c56:	f7fc ff45 	bl	8000ae4 <__aeabi_dcmplt>
 8003c5a:	b158      	cbz	r0, 8003c74 <_dtoa_r+0x16c>
 8003c5c:	4658      	mov	r0, fp
 8003c5e:	f7fc fc69 	bl	8000534 <__aeabi_i2d>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4630      	mov	r0, r6
 8003c68:	4639      	mov	r1, r7
 8003c6a:	f7fc ff31 	bl	8000ad0 <__aeabi_dcmpeq>
 8003c6e:	b908      	cbnz	r0, 8003c74 <_dtoa_r+0x16c>
 8003c70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c74:	f1bb 0f16 	cmp.w	fp, #22
 8003c78:	d859      	bhi.n	8003d2e <_dtoa_r+0x226>
 8003c7a:	496a      	ldr	r1, [pc, #424]	; (8003e24 <_dtoa_r+0x31c>)
 8003c7c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c88:	f7fc ff4a 	bl	8000b20 <__aeabi_dcmpgt>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d050      	beq.n	8003d32 <_dtoa_r+0x22a>
 8003c90:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c94:	2300      	movs	r3, #0
 8003c96:	930e      	str	r3, [sp, #56]	; 0x38
 8003c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c9a:	1b5d      	subs	r5, r3, r5
 8003c9c:	1e6b      	subs	r3, r5, #1
 8003c9e:	9306      	str	r3, [sp, #24]
 8003ca0:	bf45      	ittet	mi
 8003ca2:	f1c5 0301 	rsbmi	r3, r5, #1
 8003ca6:	9305      	strmi	r3, [sp, #20]
 8003ca8:	2300      	movpl	r3, #0
 8003caa:	2300      	movmi	r3, #0
 8003cac:	bf4c      	ite	mi
 8003cae:	9306      	strmi	r3, [sp, #24]
 8003cb0:	9305      	strpl	r3, [sp, #20]
 8003cb2:	f1bb 0f00 	cmp.w	fp, #0
 8003cb6:	db3e      	blt.n	8003d36 <_dtoa_r+0x22e>
 8003cb8:	9b06      	ldr	r3, [sp, #24]
 8003cba:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003cbe:	445b      	add	r3, fp
 8003cc0:	9306      	str	r3, [sp, #24]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9308      	str	r3, [sp, #32]
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	f200 80af 	bhi.w	8003e2c <_dtoa_r+0x324>
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	bfc4      	itt	gt
 8003cd2:	3b04      	subgt	r3, #4
 8003cd4:	9307      	strgt	r3, [sp, #28]
 8003cd6:	9b07      	ldr	r3, [sp, #28]
 8003cd8:	f1a3 0302 	sub.w	r3, r3, #2
 8003cdc:	bfcc      	ite	gt
 8003cde:	2600      	movgt	r6, #0
 8003ce0:	2601      	movle	r6, #1
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	f200 80ae 	bhi.w	8003e44 <_dtoa_r+0x33c>
 8003ce8:	e8df f003 	tbb	[pc, r3]
 8003cec:	772f8482 	.word	0x772f8482
 8003cf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cf2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003cf4:	441d      	add	r5, r3
 8003cf6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	dd11      	ble.n	8003d22 <_dtoa_r+0x21a>
 8003cfe:	9a00      	ldr	r2, [sp, #0]
 8003d00:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003d04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003d08:	fa22 f000 	lsr.w	r0, r2, r0
 8003d0c:	fa08 f303 	lsl.w	r3, r8, r3
 8003d10:	4318      	orrs	r0, r3
 8003d12:	f7fc fbff 	bl	8000514 <__aeabi_ui2d>
 8003d16:	2301      	movs	r3, #1
 8003d18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003d1c:	3d01      	subs	r5, #1
 8003d1e:	9312      	str	r3, [sp, #72]	; 0x48
 8003d20:	e772      	b.n	8003c08 <_dtoa_r+0x100>
 8003d22:	f1c3 0020 	rsb	r0, r3, #32
 8003d26:	9b00      	ldr	r3, [sp, #0]
 8003d28:	fa03 f000 	lsl.w	r0, r3, r0
 8003d2c:	e7f1      	b.n	8003d12 <_dtoa_r+0x20a>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e7b1      	b.n	8003c96 <_dtoa_r+0x18e>
 8003d32:	900e      	str	r0, [sp, #56]	; 0x38
 8003d34:	e7b0      	b.n	8003c98 <_dtoa_r+0x190>
 8003d36:	9b05      	ldr	r3, [sp, #20]
 8003d38:	eba3 030b 	sub.w	r3, r3, fp
 8003d3c:	9305      	str	r3, [sp, #20]
 8003d3e:	f1cb 0300 	rsb	r3, fp, #0
 8003d42:	9308      	str	r3, [sp, #32]
 8003d44:	2300      	movs	r3, #0
 8003d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d48:	e7bd      	b.n	8003cc6 <_dtoa_r+0x1be>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	dd7a      	ble.n	8003e4a <_dtoa_r+0x342>
 8003d54:	9304      	str	r3, [sp, #16]
 8003d56:	9303      	str	r3, [sp, #12]
 8003d58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	606a      	str	r2, [r5, #4]
 8003d5e:	2104      	movs	r1, #4
 8003d60:	f101 0214 	add.w	r2, r1, #20
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d975      	bls.n	8003e54 <_dtoa_r+0x34c>
 8003d68:	6869      	ldr	r1, [r5, #4]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f000 fed6 	bl	8004b1c <_Balloc>
 8003d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d72:	6028      	str	r0, [r5, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	9302      	str	r3, [sp, #8]
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	2b0e      	cmp	r3, #14
 8003d7c:	f200 80e5 	bhi.w	8003f4a <_dtoa_r+0x442>
 8003d80:	2e00      	cmp	r6, #0
 8003d82:	f000 80e2 	beq.w	8003f4a <_dtoa_r+0x442>
 8003d86:	ed9d 7b00 	vldr	d7, [sp]
 8003d8a:	f1bb 0f00 	cmp.w	fp, #0
 8003d8e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003d92:	dd74      	ble.n	8003e7e <_dtoa_r+0x376>
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <_dtoa_r+0x31c>)
 8003d96:	f00b 030f 	and.w	r3, fp, #15
 8003d9a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003d9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003da2:	06f0      	lsls	r0, r6, #27
 8003da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003da8:	d559      	bpl.n	8003e5e <_dtoa_r+0x356>
 8003daa:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <_dtoa_r+0x320>)
 8003dac:	ec51 0b17 	vmov	r0, r1, d7
 8003db0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003db4:	f7fc fd4e 	bl	8000854 <__aeabi_ddiv>
 8003db8:	e9cd 0100 	strd	r0, r1, [sp]
 8003dbc:	f006 060f 	and.w	r6, r6, #15
 8003dc0:	2503      	movs	r5, #3
 8003dc2:	4f19      	ldr	r7, [pc, #100]	; (8003e28 <_dtoa_r+0x320>)
 8003dc4:	2e00      	cmp	r6, #0
 8003dc6:	d14c      	bne.n	8003e62 <_dtoa_r+0x35a>
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dd0:	f7fc fd40 	bl	8000854 <__aeabi_ddiv>
 8003dd4:	e9cd 0100 	strd	r0, r1, [sp]
 8003dd8:	e06a      	b.n	8003eb0 <_dtoa_r+0x3a8>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de0:	445b      	add	r3, fp
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	3301      	adds	r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	9303      	str	r3, [sp, #12]
 8003dea:	bfb8      	it	lt
 8003dec:	2301      	movlt	r3, #1
 8003dee:	e7b3      	b.n	8003d58 <_dtoa_r+0x250>
 8003df0:	2300      	movs	r3, #0
 8003df2:	e7ab      	b.n	8003d4c <_dtoa_r+0x244>
 8003df4:	2300      	movs	r3, #0
 8003df6:	e7f1      	b.n	8003ddc <_dtoa_r+0x2d4>
 8003df8:	636f4361 	.word	0x636f4361
 8003dfc:	3fd287a7 	.word	0x3fd287a7
 8003e00:	8b60c8b3 	.word	0x8b60c8b3
 8003e04:	3fc68a28 	.word	0x3fc68a28
 8003e08:	509f79fb 	.word	0x509f79fb
 8003e0c:	3fd34413 	.word	0x3fd34413
 8003e10:	7ff00000 	.word	0x7ff00000
 8003e14:	0800588c 	.word	0x0800588c
 8003e18:	08005883 	.word	0x08005883
 8003e1c:	08005862 	.word	0x08005862
 8003e20:	3ff80000 	.word	0x3ff80000
 8003e24:	080058b8 	.word	0x080058b8
 8003e28:	08005890 	.word	0x08005890
 8003e2c:	2601      	movs	r6, #1
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9307      	str	r3, [sp, #28]
 8003e32:	9609      	str	r6, [sp, #36]	; 0x24
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e38:	9304      	str	r3, [sp, #16]
 8003e3a:	9303      	str	r3, [sp, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2312      	movs	r3, #18
 8003e40:	920a      	str	r2, [sp, #40]	; 0x28
 8003e42:	e789      	b.n	8003d58 <_dtoa_r+0x250>
 8003e44:	2301      	movs	r3, #1
 8003e46:	9309      	str	r3, [sp, #36]	; 0x24
 8003e48:	e7f4      	b.n	8003e34 <_dtoa_r+0x32c>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	9303      	str	r3, [sp, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	e7f5      	b.n	8003e40 <_dtoa_r+0x338>
 8003e54:	686a      	ldr	r2, [r5, #4]
 8003e56:	3201      	adds	r2, #1
 8003e58:	606a      	str	r2, [r5, #4]
 8003e5a:	0049      	lsls	r1, r1, #1
 8003e5c:	e780      	b.n	8003d60 <_dtoa_r+0x258>
 8003e5e:	2502      	movs	r5, #2
 8003e60:	e7af      	b.n	8003dc2 <_dtoa_r+0x2ba>
 8003e62:	07f1      	lsls	r1, r6, #31
 8003e64:	d508      	bpl.n	8003e78 <_dtoa_r+0x370>
 8003e66:	4640      	mov	r0, r8
 8003e68:	4649      	mov	r1, r9
 8003e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e6e:	f7fc fbc7 	bl	8000600 <__aeabi_dmul>
 8003e72:	3501      	adds	r5, #1
 8003e74:	4680      	mov	r8, r0
 8003e76:	4689      	mov	r9, r1
 8003e78:	1076      	asrs	r6, r6, #1
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	e7a2      	b.n	8003dc4 <_dtoa_r+0x2bc>
 8003e7e:	f000 809d 	beq.w	8003fbc <_dtoa_r+0x4b4>
 8003e82:	f1cb 0600 	rsb	r6, fp, #0
 8003e86:	4b9f      	ldr	r3, [pc, #636]	; (8004104 <_dtoa_r+0x5fc>)
 8003e88:	4f9f      	ldr	r7, [pc, #636]	; (8004108 <_dtoa_r+0x600>)
 8003e8a:	f006 020f 	and.w	r2, r6, #15
 8003e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e9a:	f7fc fbb1 	bl	8000600 <__aeabi_dmul>
 8003e9e:	e9cd 0100 	strd	r0, r1, [sp]
 8003ea2:	1136      	asrs	r6, r6, #4
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2502      	movs	r5, #2
 8003ea8:	2e00      	cmp	r6, #0
 8003eaa:	d17c      	bne.n	8003fa6 <_dtoa_r+0x49e>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d191      	bne.n	8003dd4 <_dtoa_r+0x2cc>
 8003eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8084 	beq.w	8003fc0 <_dtoa_r+0x4b8>
 8003eb8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4b93      	ldr	r3, [pc, #588]	; (800410c <_dtoa_r+0x604>)
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	f7fc fe0e 	bl	8000ae4 <__aeabi_dcmplt>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d079      	beq.n	8003fc0 <_dtoa_r+0x4b8>
 8003ecc:	9b03      	ldr	r3, [sp, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d076      	beq.n	8003fc0 <_dtoa_r+0x4b8>
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	dd34      	ble.n	8003f42 <_dtoa_r+0x43a>
 8003ed8:	2200      	movs	r2, #0
 8003eda:	4b8d      	ldr	r3, [pc, #564]	; (8004110 <_dtoa_r+0x608>)
 8003edc:	4640      	mov	r0, r8
 8003ede:	4649      	mov	r1, r9
 8003ee0:	f7fc fb8e 	bl	8000600 <__aeabi_dmul>
 8003ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8003ee8:	9e04      	ldr	r6, [sp, #16]
 8003eea:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003eee:	3501      	adds	r5, #1
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f7fc fb1f 	bl	8000534 <__aeabi_i2d>
 8003ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003efa:	f7fc fb81 	bl	8000600 <__aeabi_dmul>
 8003efe:	2200      	movs	r2, #0
 8003f00:	4b84      	ldr	r3, [pc, #528]	; (8004114 <_dtoa_r+0x60c>)
 8003f02:	f7fc f9cb 	bl	800029c <__adddf3>
 8003f06:	4680      	mov	r8, r0
 8003f08:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003f0c:	2e00      	cmp	r6, #0
 8003f0e:	d15a      	bne.n	8003fc6 <_dtoa_r+0x4be>
 8003f10:	2200      	movs	r2, #0
 8003f12:	4b81      	ldr	r3, [pc, #516]	; (8004118 <_dtoa_r+0x610>)
 8003f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f18:	f7fc f9be 	bl	8000298 <__aeabi_dsub>
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	e9cd 0100 	strd	r0, r1, [sp]
 8003f24:	f7fc fdfc 	bl	8000b20 <__aeabi_dcmpgt>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	f040 829b 	bne.w	8004464 <_dtoa_r+0x95c>
 8003f2e:	4642      	mov	r2, r8
 8003f30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f38:	f7fc fdd4 	bl	8000ae4 <__aeabi_dcmplt>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	f040 828f 	bne.w	8004460 <_dtoa_r+0x958>
 8003f42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f46:	e9cd 2300 	strd	r2, r3, [sp]
 8003f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f2c0 8150 	blt.w	80041f2 <_dtoa_r+0x6ea>
 8003f52:	f1bb 0f0e 	cmp.w	fp, #14
 8003f56:	f300 814c 	bgt.w	80041f2 <_dtoa_r+0x6ea>
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <_dtoa_r+0x5fc>)
 8003f5c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f280 80da 	bge.w	8004120 <_dtoa_r+0x618>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f300 80d6 	bgt.w	8004120 <_dtoa_r+0x618>
 8003f74:	f040 8273 	bne.w	800445e <_dtoa_r+0x956>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4b67      	ldr	r3, [pc, #412]	; (8004118 <_dtoa_r+0x610>)
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	4649      	mov	r1, r9
 8003f80:	f7fc fb3e 	bl	8000600 <__aeabi_dmul>
 8003f84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f88:	f7fc fdc0 	bl	8000b0c <__aeabi_dcmpge>
 8003f8c:	9e03      	ldr	r6, [sp, #12]
 8003f8e:	4637      	mov	r7, r6
 8003f90:	2800      	cmp	r0, #0
 8003f92:	f040 824a 	bne.w	800442a <_dtoa_r+0x922>
 8003f96:	9b02      	ldr	r3, [sp, #8]
 8003f98:	9a02      	ldr	r2, [sp, #8]
 8003f9a:	1c5d      	adds	r5, r3, #1
 8003f9c:	2331      	movs	r3, #49	; 0x31
 8003f9e:	7013      	strb	r3, [r2, #0]
 8003fa0:	f10b 0b01 	add.w	fp, fp, #1
 8003fa4:	e245      	b.n	8004432 <_dtoa_r+0x92a>
 8003fa6:	07f2      	lsls	r2, r6, #31
 8003fa8:	d505      	bpl.n	8003fb6 <_dtoa_r+0x4ae>
 8003faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fae:	f7fc fb27 	bl	8000600 <__aeabi_dmul>
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	1076      	asrs	r6, r6, #1
 8003fb8:	3708      	adds	r7, #8
 8003fba:	e775      	b.n	8003ea8 <_dtoa_r+0x3a0>
 8003fbc:	2502      	movs	r5, #2
 8003fbe:	e777      	b.n	8003eb0 <_dtoa_r+0x3a8>
 8003fc0:	465f      	mov	r7, fp
 8003fc2:	9e03      	ldr	r6, [sp, #12]
 8003fc4:	e794      	b.n	8003ef0 <_dtoa_r+0x3e8>
 8003fc6:	9a02      	ldr	r2, [sp, #8]
 8003fc8:	4b4e      	ldr	r3, [pc, #312]	; (8004104 <_dtoa_r+0x5fc>)
 8003fca:	4432      	add	r2, r6
 8003fcc:	9213      	str	r2, [sp, #76]	; 0x4c
 8003fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fd0:	1e71      	subs	r1, r6, #1
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d048      	beq.n	8004068 <_dtoa_r+0x560>
 8003fd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	2000      	movs	r0, #0
 8003fe0:	494e      	ldr	r1, [pc, #312]	; (800411c <_dtoa_r+0x614>)
 8003fe2:	f7fc fc37 	bl	8000854 <__aeabi_ddiv>
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	464b      	mov	r3, r9
 8003fea:	f7fc f955 	bl	8000298 <__aeabi_dsub>
 8003fee:	9d02      	ldr	r5, [sp, #8]
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	4689      	mov	r9, r1
 8003ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ff8:	f7fc fdb2 	bl	8000b60 <__aeabi_d2iz>
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	f7fc fa99 	bl	8000534 <__aeabi_i2d>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	e9dd 0100 	ldrd	r0, r1, [sp]
 800400a:	f7fc f945 	bl	8000298 <__aeabi_dsub>
 800400e:	3630      	adds	r6, #48	; 0x30
 8004010:	f805 6b01 	strb.w	r6, [r5], #1
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	e9cd 0100 	strd	r0, r1, [sp]
 800401c:	f7fc fd62 	bl	8000ae4 <__aeabi_dcmplt>
 8004020:	2800      	cmp	r0, #0
 8004022:	d165      	bne.n	80040f0 <_dtoa_r+0x5e8>
 8004024:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004028:	2000      	movs	r0, #0
 800402a:	4938      	ldr	r1, [pc, #224]	; (800410c <_dtoa_r+0x604>)
 800402c:	f7fc f934 	bl	8000298 <__aeabi_dsub>
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	f7fc fd56 	bl	8000ae4 <__aeabi_dcmplt>
 8004038:	2800      	cmp	r0, #0
 800403a:	f040 80ba 	bne.w	80041b2 <_dtoa_r+0x6aa>
 800403e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004040:	429d      	cmp	r5, r3
 8004042:	f43f af7e 	beq.w	8003f42 <_dtoa_r+0x43a>
 8004046:	2200      	movs	r2, #0
 8004048:	4b31      	ldr	r3, [pc, #196]	; (8004110 <_dtoa_r+0x608>)
 800404a:	4640      	mov	r0, r8
 800404c:	4649      	mov	r1, r9
 800404e:	f7fc fad7 	bl	8000600 <__aeabi_dmul>
 8004052:	2200      	movs	r2, #0
 8004054:	4680      	mov	r8, r0
 8004056:	4689      	mov	r9, r1
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <_dtoa_r+0x608>)
 800405a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800405e:	f7fc facf 	bl	8000600 <__aeabi_dmul>
 8004062:	e9cd 0100 	strd	r0, r1, [sp]
 8004066:	e7c5      	b.n	8003ff4 <_dtoa_r+0x4ec>
 8004068:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004074:	f7fc fac4 	bl	8000600 <__aeabi_dmul>
 8004078:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800407c:	9d02      	ldr	r5, [sp, #8]
 800407e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004082:	f7fc fd6d 	bl	8000b60 <__aeabi_d2iz>
 8004086:	4606      	mov	r6, r0
 8004088:	f7fc fa54 	bl	8000534 <__aeabi_i2d>
 800408c:	3630      	adds	r6, #48	; 0x30
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004096:	f7fc f8ff 	bl	8000298 <__aeabi_dsub>
 800409a:	f805 6b01 	strb.w	r6, [r5], #1
 800409e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	4680      	mov	r8, r0
 80040a4:	4689      	mov	r9, r1
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	d125      	bne.n	80040f8 <_dtoa_r+0x5f0>
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <_dtoa_r+0x614>)
 80040ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040b2:	f7fc f8f3 	bl	800029c <__adddf3>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4640      	mov	r0, r8
 80040bc:	4649      	mov	r1, r9
 80040be:	f7fc fd2f 	bl	8000b20 <__aeabi_dcmpgt>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d175      	bne.n	80041b2 <_dtoa_r+0x6aa>
 80040c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040ca:	2000      	movs	r0, #0
 80040cc:	4913      	ldr	r1, [pc, #76]	; (800411c <_dtoa_r+0x614>)
 80040ce:	f7fc f8e3 	bl	8000298 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc fd03 	bl	8000ae4 <__aeabi_dcmplt>
 80040de:	2800      	cmp	r0, #0
 80040e0:	f43f af2f 	beq.w	8003f42 <_dtoa_r+0x43a>
 80040e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040e8:	2b30      	cmp	r3, #48	; 0x30
 80040ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80040ee:	d001      	beq.n	80040f4 <_dtoa_r+0x5ec>
 80040f0:	46bb      	mov	fp, r7
 80040f2:	e04d      	b.n	8004190 <_dtoa_r+0x688>
 80040f4:	4615      	mov	r5, r2
 80040f6:	e7f5      	b.n	80040e4 <_dtoa_r+0x5dc>
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <_dtoa_r+0x608>)
 80040fa:	f7fc fa81 	bl	8000600 <__aeabi_dmul>
 80040fe:	e9cd 0100 	strd	r0, r1, [sp]
 8004102:	e7bc      	b.n	800407e <_dtoa_r+0x576>
 8004104:	080058b8 	.word	0x080058b8
 8004108:	08005890 	.word	0x08005890
 800410c:	3ff00000 	.word	0x3ff00000
 8004110:	40240000 	.word	0x40240000
 8004114:	401c0000 	.word	0x401c0000
 8004118:	40140000 	.word	0x40140000
 800411c:	3fe00000 	.word	0x3fe00000
 8004120:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004124:	9d02      	ldr	r5, [sp, #8]
 8004126:	4642      	mov	r2, r8
 8004128:	464b      	mov	r3, r9
 800412a:	4630      	mov	r0, r6
 800412c:	4639      	mov	r1, r7
 800412e:	f7fc fb91 	bl	8000854 <__aeabi_ddiv>
 8004132:	f7fc fd15 	bl	8000b60 <__aeabi_d2iz>
 8004136:	9000      	str	r0, [sp, #0]
 8004138:	f7fc f9fc 	bl	8000534 <__aeabi_i2d>
 800413c:	4642      	mov	r2, r8
 800413e:	464b      	mov	r3, r9
 8004140:	f7fc fa5e 	bl	8000600 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4630      	mov	r0, r6
 800414a:	4639      	mov	r1, r7
 800414c:	f7fc f8a4 	bl	8000298 <__aeabi_dsub>
 8004150:	9e00      	ldr	r6, [sp, #0]
 8004152:	9f03      	ldr	r7, [sp, #12]
 8004154:	3630      	adds	r6, #48	; 0x30
 8004156:	f805 6b01 	strb.w	r6, [r5], #1
 800415a:	9e02      	ldr	r6, [sp, #8]
 800415c:	1bae      	subs	r6, r5, r6
 800415e:	42b7      	cmp	r7, r6
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	d138      	bne.n	80041d8 <_dtoa_r+0x6d0>
 8004166:	f7fc f899 	bl	800029c <__adddf3>
 800416a:	4606      	mov	r6, r0
 800416c:	460f      	mov	r7, r1
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4640      	mov	r0, r8
 8004174:	4649      	mov	r1, r9
 8004176:	f7fc fcb5 	bl	8000ae4 <__aeabi_dcmplt>
 800417a:	b9c8      	cbnz	r0, 80041b0 <_dtoa_r+0x6a8>
 800417c:	4632      	mov	r2, r6
 800417e:	463b      	mov	r3, r7
 8004180:	4640      	mov	r0, r8
 8004182:	4649      	mov	r1, r9
 8004184:	f7fc fca4 	bl	8000ad0 <__aeabi_dcmpeq>
 8004188:	b110      	cbz	r0, 8004190 <_dtoa_r+0x688>
 800418a:	9b00      	ldr	r3, [sp, #0]
 800418c:	07db      	lsls	r3, r3, #31
 800418e:	d40f      	bmi.n	80041b0 <_dtoa_r+0x6a8>
 8004190:	4651      	mov	r1, sl
 8004192:	4620      	mov	r0, r4
 8004194:	f000 fcf6 	bl	8004b84 <_Bfree>
 8004198:	2300      	movs	r3, #0
 800419a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800419c:	702b      	strb	r3, [r5, #0]
 800419e:	f10b 0301 	add.w	r3, fp, #1
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f43f acf8 	beq.w	8003b9c <_dtoa_r+0x94>
 80041ac:	601d      	str	r5, [r3, #0]
 80041ae:	e4f5      	b.n	8003b9c <_dtoa_r+0x94>
 80041b0:	465f      	mov	r7, fp
 80041b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80041b6:	2a39      	cmp	r2, #57	; 0x39
 80041b8:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80041bc:	d106      	bne.n	80041cc <_dtoa_r+0x6c4>
 80041be:	9a02      	ldr	r2, [sp, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d107      	bne.n	80041d4 <_dtoa_r+0x6cc>
 80041c4:	2330      	movs	r3, #48	; 0x30
 80041c6:	7013      	strb	r3, [r2, #0]
 80041c8:	3701      	adds	r7, #1
 80041ca:	4613      	mov	r3, r2
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	3201      	adds	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	e78d      	b.n	80040f0 <_dtoa_r+0x5e8>
 80041d4:	461d      	mov	r5, r3
 80041d6:	e7ec      	b.n	80041b2 <_dtoa_r+0x6aa>
 80041d8:	2200      	movs	r2, #0
 80041da:	4ba4      	ldr	r3, [pc, #656]	; (800446c <_dtoa_r+0x964>)
 80041dc:	f7fc fa10 	bl	8000600 <__aeabi_dmul>
 80041e0:	2200      	movs	r2, #0
 80041e2:	2300      	movs	r3, #0
 80041e4:	4606      	mov	r6, r0
 80041e6:	460f      	mov	r7, r1
 80041e8:	f7fc fc72 	bl	8000ad0 <__aeabi_dcmpeq>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d09a      	beq.n	8004126 <_dtoa_r+0x61e>
 80041f0:	e7ce      	b.n	8004190 <_dtoa_r+0x688>
 80041f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	f000 80cd 	beq.w	8004394 <_dtoa_r+0x88c>
 80041fa:	9a07      	ldr	r2, [sp, #28]
 80041fc:	2a01      	cmp	r2, #1
 80041fe:	f300 80af 	bgt.w	8004360 <_dtoa_r+0x858>
 8004202:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004204:	2a00      	cmp	r2, #0
 8004206:	f000 80a7 	beq.w	8004358 <_dtoa_r+0x850>
 800420a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800420e:	9e08      	ldr	r6, [sp, #32]
 8004210:	9d05      	ldr	r5, [sp, #20]
 8004212:	9a05      	ldr	r2, [sp, #20]
 8004214:	441a      	add	r2, r3
 8004216:	9205      	str	r2, [sp, #20]
 8004218:	9a06      	ldr	r2, [sp, #24]
 800421a:	2101      	movs	r1, #1
 800421c:	441a      	add	r2, r3
 800421e:	4620      	mov	r0, r4
 8004220:	9206      	str	r2, [sp, #24]
 8004222:	f000 fd4f 	bl	8004cc4 <__i2b>
 8004226:	4607      	mov	r7, r0
 8004228:	2d00      	cmp	r5, #0
 800422a:	dd0c      	ble.n	8004246 <_dtoa_r+0x73e>
 800422c:	9b06      	ldr	r3, [sp, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	dd09      	ble.n	8004246 <_dtoa_r+0x73e>
 8004232:	42ab      	cmp	r3, r5
 8004234:	9a05      	ldr	r2, [sp, #20]
 8004236:	bfa8      	it	ge
 8004238:	462b      	movge	r3, r5
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	9205      	str	r2, [sp, #20]
 800423e:	9a06      	ldr	r2, [sp, #24]
 8004240:	1aed      	subs	r5, r5, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	9306      	str	r3, [sp, #24]
 8004246:	9b08      	ldr	r3, [sp, #32]
 8004248:	b1f3      	cbz	r3, 8004288 <_dtoa_r+0x780>
 800424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80a5 	beq.w	800439c <_dtoa_r+0x894>
 8004252:	2e00      	cmp	r6, #0
 8004254:	dd10      	ble.n	8004278 <_dtoa_r+0x770>
 8004256:	4639      	mov	r1, r7
 8004258:	4632      	mov	r2, r6
 800425a:	4620      	mov	r0, r4
 800425c:	f000 fdc8 	bl	8004df0 <__pow5mult>
 8004260:	4652      	mov	r2, sl
 8004262:	4601      	mov	r1, r0
 8004264:	4607      	mov	r7, r0
 8004266:	4620      	mov	r0, r4
 8004268:	f000 fd35 	bl	8004cd6 <__multiply>
 800426c:	4651      	mov	r1, sl
 800426e:	4680      	mov	r8, r0
 8004270:	4620      	mov	r0, r4
 8004272:	f000 fc87 	bl	8004b84 <_Bfree>
 8004276:	46c2      	mov	sl, r8
 8004278:	9b08      	ldr	r3, [sp, #32]
 800427a:	1b9a      	subs	r2, r3, r6
 800427c:	d004      	beq.n	8004288 <_dtoa_r+0x780>
 800427e:	4651      	mov	r1, sl
 8004280:	4620      	mov	r0, r4
 8004282:	f000 fdb5 	bl	8004df0 <__pow5mult>
 8004286:	4682      	mov	sl, r0
 8004288:	2101      	movs	r1, #1
 800428a:	4620      	mov	r0, r4
 800428c:	f000 fd1a 	bl	8004cc4 <__i2b>
 8004290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004292:	2b00      	cmp	r3, #0
 8004294:	4606      	mov	r6, r0
 8004296:	f340 8083 	ble.w	80043a0 <_dtoa_r+0x898>
 800429a:	461a      	mov	r2, r3
 800429c:	4601      	mov	r1, r0
 800429e:	4620      	mov	r0, r4
 80042a0:	f000 fda6 	bl	8004df0 <__pow5mult>
 80042a4:	9b07      	ldr	r3, [sp, #28]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	4606      	mov	r6, r0
 80042aa:	dd7c      	ble.n	80043a6 <_dtoa_r+0x89e>
 80042ac:	f04f 0800 	mov.w	r8, #0
 80042b0:	6933      	ldr	r3, [r6, #16]
 80042b2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80042b6:	6918      	ldr	r0, [r3, #16]
 80042b8:	f000 fcb6 	bl	8004c28 <__hi0bits>
 80042bc:	f1c0 0020 	rsb	r0, r0, #32
 80042c0:	9b06      	ldr	r3, [sp, #24]
 80042c2:	4418      	add	r0, r3
 80042c4:	f010 001f 	ands.w	r0, r0, #31
 80042c8:	f000 8096 	beq.w	80043f8 <_dtoa_r+0x8f0>
 80042cc:	f1c0 0320 	rsb	r3, r0, #32
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	f340 8087 	ble.w	80043e4 <_dtoa_r+0x8dc>
 80042d6:	9b05      	ldr	r3, [sp, #20]
 80042d8:	f1c0 001c 	rsb	r0, r0, #28
 80042dc:	4403      	add	r3, r0
 80042de:	9305      	str	r3, [sp, #20]
 80042e0:	9b06      	ldr	r3, [sp, #24]
 80042e2:	4405      	add	r5, r0
 80042e4:	4403      	add	r3, r0
 80042e6:	9306      	str	r3, [sp, #24]
 80042e8:	9b05      	ldr	r3, [sp, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	dd05      	ble.n	80042fa <_dtoa_r+0x7f2>
 80042ee:	4651      	mov	r1, sl
 80042f0:	461a      	mov	r2, r3
 80042f2:	4620      	mov	r0, r4
 80042f4:	f000 fdca 	bl	8004e8c <__lshift>
 80042f8:	4682      	mov	sl, r0
 80042fa:	9b06      	ldr	r3, [sp, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	dd05      	ble.n	800430c <_dtoa_r+0x804>
 8004300:	4631      	mov	r1, r6
 8004302:	461a      	mov	r2, r3
 8004304:	4620      	mov	r0, r4
 8004306:	f000 fdc1 	bl	8004e8c <__lshift>
 800430a:	4606      	mov	r6, r0
 800430c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d074      	beq.n	80043fc <_dtoa_r+0x8f4>
 8004312:	4631      	mov	r1, r6
 8004314:	4650      	mov	r0, sl
 8004316:	f000 fe0a 	bl	8004f2e <__mcmp>
 800431a:	2800      	cmp	r0, #0
 800431c:	da6e      	bge.n	80043fc <_dtoa_r+0x8f4>
 800431e:	2300      	movs	r3, #0
 8004320:	4651      	mov	r1, sl
 8004322:	220a      	movs	r2, #10
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fc44 	bl	8004bb2 <__multadd>
 800432a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800432c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004330:	4682      	mov	sl, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 81a8 	beq.w	8004688 <_dtoa_r+0xb80>
 8004338:	2300      	movs	r3, #0
 800433a:	4639      	mov	r1, r7
 800433c:	220a      	movs	r2, #10
 800433e:	4620      	mov	r0, r4
 8004340:	f000 fc37 	bl	8004bb2 <__multadd>
 8004344:	9b04      	ldr	r3, [sp, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	4607      	mov	r7, r0
 800434a:	f300 80c8 	bgt.w	80044de <_dtoa_r+0x9d6>
 800434e:	9b07      	ldr	r3, [sp, #28]
 8004350:	2b02      	cmp	r3, #2
 8004352:	f340 80c4 	ble.w	80044de <_dtoa_r+0x9d6>
 8004356:	e059      	b.n	800440c <_dtoa_r+0x904>
 8004358:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800435a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800435e:	e756      	b.n	800420e <_dtoa_r+0x706>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	1e5e      	subs	r6, r3, #1
 8004364:	9b08      	ldr	r3, [sp, #32]
 8004366:	42b3      	cmp	r3, r6
 8004368:	bfbf      	itttt	lt
 800436a:	9b08      	ldrlt	r3, [sp, #32]
 800436c:	9608      	strlt	r6, [sp, #32]
 800436e:	1af2      	sublt	r2, r6, r3
 8004370:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004372:	bfb6      	itet	lt
 8004374:	189b      	addlt	r3, r3, r2
 8004376:	1b9e      	subge	r6, r3, r6
 8004378:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	bfb8      	it	lt
 800437e:	2600      	movlt	r6, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	bfb9      	ittee	lt
 8004384:	9b05      	ldrlt	r3, [sp, #20]
 8004386:	9a03      	ldrlt	r2, [sp, #12]
 8004388:	9d05      	ldrge	r5, [sp, #20]
 800438a:	9b03      	ldrge	r3, [sp, #12]
 800438c:	bfbc      	itt	lt
 800438e:	1a9d      	sublt	r5, r3, r2
 8004390:	2300      	movlt	r3, #0
 8004392:	e73e      	b.n	8004212 <_dtoa_r+0x70a>
 8004394:	9e08      	ldr	r6, [sp, #32]
 8004396:	9d05      	ldr	r5, [sp, #20]
 8004398:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800439a:	e745      	b.n	8004228 <_dtoa_r+0x720>
 800439c:	9a08      	ldr	r2, [sp, #32]
 800439e:	e76e      	b.n	800427e <_dtoa_r+0x776>
 80043a0:	9b07      	ldr	r3, [sp, #28]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	dc19      	bgt.n	80043da <_dtoa_r+0x8d2>
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	b9bb      	cbnz	r3, 80043da <_dtoa_r+0x8d2>
 80043aa:	9b01      	ldr	r3, [sp, #4]
 80043ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b0:	b99b      	cbnz	r3, 80043da <_dtoa_r+0x8d2>
 80043b2:	9b01      	ldr	r3, [sp, #4]
 80043b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043b8:	0d1b      	lsrs	r3, r3, #20
 80043ba:	051b      	lsls	r3, r3, #20
 80043bc:	b183      	cbz	r3, 80043e0 <_dtoa_r+0x8d8>
 80043be:	9b05      	ldr	r3, [sp, #20]
 80043c0:	3301      	adds	r3, #1
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	9b06      	ldr	r3, [sp, #24]
 80043c6:	3301      	adds	r3, #1
 80043c8:	9306      	str	r3, [sp, #24]
 80043ca:	f04f 0801 	mov.w	r8, #1
 80043ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f af6d 	bne.w	80042b0 <_dtoa_r+0x7a8>
 80043d6:	2001      	movs	r0, #1
 80043d8:	e772      	b.n	80042c0 <_dtoa_r+0x7b8>
 80043da:	f04f 0800 	mov.w	r8, #0
 80043de:	e7f6      	b.n	80043ce <_dtoa_r+0x8c6>
 80043e0:	4698      	mov	r8, r3
 80043e2:	e7f4      	b.n	80043ce <_dtoa_r+0x8c6>
 80043e4:	d080      	beq.n	80042e8 <_dtoa_r+0x7e0>
 80043e6:	9a05      	ldr	r2, [sp, #20]
 80043e8:	331c      	adds	r3, #28
 80043ea:	441a      	add	r2, r3
 80043ec:	9205      	str	r2, [sp, #20]
 80043ee:	9a06      	ldr	r2, [sp, #24]
 80043f0:	441a      	add	r2, r3
 80043f2:	441d      	add	r5, r3
 80043f4:	4613      	mov	r3, r2
 80043f6:	e776      	b.n	80042e6 <_dtoa_r+0x7de>
 80043f8:	4603      	mov	r3, r0
 80043fa:	e7f4      	b.n	80043e6 <_dtoa_r+0x8de>
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	dc36      	bgt.n	8004470 <_dtoa_r+0x968>
 8004402:	9b07      	ldr	r3, [sp, #28]
 8004404:	2b02      	cmp	r3, #2
 8004406:	dd33      	ble.n	8004470 <_dtoa_r+0x968>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	9304      	str	r3, [sp, #16]
 800440c:	9b04      	ldr	r3, [sp, #16]
 800440e:	b963      	cbnz	r3, 800442a <_dtoa_r+0x922>
 8004410:	4631      	mov	r1, r6
 8004412:	2205      	movs	r2, #5
 8004414:	4620      	mov	r0, r4
 8004416:	f000 fbcc 	bl	8004bb2 <__multadd>
 800441a:	4601      	mov	r1, r0
 800441c:	4606      	mov	r6, r0
 800441e:	4650      	mov	r0, sl
 8004420:	f000 fd85 	bl	8004f2e <__mcmp>
 8004424:	2800      	cmp	r0, #0
 8004426:	f73f adb6 	bgt.w	8003f96 <_dtoa_r+0x48e>
 800442a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800442c:	9d02      	ldr	r5, [sp, #8]
 800442e:	ea6f 0b03 	mvn.w	fp, r3
 8004432:	2300      	movs	r3, #0
 8004434:	9303      	str	r3, [sp, #12]
 8004436:	4631      	mov	r1, r6
 8004438:	4620      	mov	r0, r4
 800443a:	f000 fba3 	bl	8004b84 <_Bfree>
 800443e:	2f00      	cmp	r7, #0
 8004440:	f43f aea6 	beq.w	8004190 <_dtoa_r+0x688>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	b12b      	cbz	r3, 8004454 <_dtoa_r+0x94c>
 8004448:	42bb      	cmp	r3, r7
 800444a:	d003      	beq.n	8004454 <_dtoa_r+0x94c>
 800444c:	4619      	mov	r1, r3
 800444e:	4620      	mov	r0, r4
 8004450:	f000 fb98 	bl	8004b84 <_Bfree>
 8004454:	4639      	mov	r1, r7
 8004456:	4620      	mov	r0, r4
 8004458:	f000 fb94 	bl	8004b84 <_Bfree>
 800445c:	e698      	b.n	8004190 <_dtoa_r+0x688>
 800445e:	2600      	movs	r6, #0
 8004460:	4637      	mov	r7, r6
 8004462:	e7e2      	b.n	800442a <_dtoa_r+0x922>
 8004464:	46bb      	mov	fp, r7
 8004466:	4637      	mov	r7, r6
 8004468:	e595      	b.n	8003f96 <_dtoa_r+0x48e>
 800446a:	bf00      	nop
 800446c:	40240000 	.word	0x40240000
 8004470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004472:	bb93      	cbnz	r3, 80044da <_dtoa_r+0x9d2>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	9d02      	ldr	r5, [sp, #8]
 800447a:	4631      	mov	r1, r6
 800447c:	4650      	mov	r0, sl
 800447e:	f7ff fab7 	bl	80039f0 <quorem>
 8004482:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004486:	f805 9b01 	strb.w	r9, [r5], #1
 800448a:	9b02      	ldr	r3, [sp, #8]
 800448c:	9a04      	ldr	r2, [sp, #16]
 800448e:	1aeb      	subs	r3, r5, r3
 8004490:	429a      	cmp	r2, r3
 8004492:	f300 80dc 	bgt.w	800464e <_dtoa_r+0xb46>
 8004496:	9b02      	ldr	r3, [sp, #8]
 8004498:	2a01      	cmp	r2, #1
 800449a:	bfac      	ite	ge
 800449c:	189b      	addge	r3, r3, r2
 800449e:	3301      	addlt	r3, #1
 80044a0:	4698      	mov	r8, r3
 80044a2:	2300      	movs	r3, #0
 80044a4:	9303      	str	r3, [sp, #12]
 80044a6:	4651      	mov	r1, sl
 80044a8:	2201      	movs	r2, #1
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 fcee 	bl	8004e8c <__lshift>
 80044b0:	4631      	mov	r1, r6
 80044b2:	4682      	mov	sl, r0
 80044b4:	f000 fd3b 	bl	8004f2e <__mcmp>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f300 808d 	bgt.w	80045d8 <_dtoa_r+0xad0>
 80044be:	d103      	bne.n	80044c8 <_dtoa_r+0x9c0>
 80044c0:	f019 0f01 	tst.w	r9, #1
 80044c4:	f040 8088 	bne.w	80045d8 <_dtoa_r+0xad0>
 80044c8:	4645      	mov	r5, r8
 80044ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044ce:	2b30      	cmp	r3, #48	; 0x30
 80044d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80044d4:	d1af      	bne.n	8004436 <_dtoa_r+0x92e>
 80044d6:	4615      	mov	r5, r2
 80044d8:	e7f7      	b.n	80044ca <_dtoa_r+0x9c2>
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	2d00      	cmp	r5, #0
 80044e0:	dd05      	ble.n	80044ee <_dtoa_r+0x9e6>
 80044e2:	4639      	mov	r1, r7
 80044e4:	462a      	mov	r2, r5
 80044e6:	4620      	mov	r0, r4
 80044e8:	f000 fcd0 	bl	8004e8c <__lshift>
 80044ec:	4607      	mov	r7, r0
 80044ee:	f1b8 0f00 	cmp.w	r8, #0
 80044f2:	d04c      	beq.n	800458e <_dtoa_r+0xa86>
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4620      	mov	r0, r4
 80044f8:	f000 fb10 	bl	8004b1c <_Balloc>
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	3202      	adds	r2, #2
 8004500:	4605      	mov	r5, r0
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	f107 010c 	add.w	r1, r7, #12
 8004508:	300c      	adds	r0, #12
 800450a:	f000 faef 	bl	8004aec <memcpy>
 800450e:	2201      	movs	r2, #1
 8004510:	4629      	mov	r1, r5
 8004512:	4620      	mov	r0, r4
 8004514:	f000 fcba 	bl	8004e8c <__lshift>
 8004518:	9b00      	ldr	r3, [sp, #0]
 800451a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800451e:	9703      	str	r7, [sp, #12]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	4607      	mov	r7, r0
 8004526:	9305      	str	r3, [sp, #20]
 8004528:	4631      	mov	r1, r6
 800452a:	4650      	mov	r0, sl
 800452c:	f7ff fa60 	bl	80039f0 <quorem>
 8004530:	9903      	ldr	r1, [sp, #12]
 8004532:	4605      	mov	r5, r0
 8004534:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004538:	4650      	mov	r0, sl
 800453a:	f000 fcf8 	bl	8004f2e <__mcmp>
 800453e:	463a      	mov	r2, r7
 8004540:	9000      	str	r0, [sp, #0]
 8004542:	4631      	mov	r1, r6
 8004544:	4620      	mov	r0, r4
 8004546:	f000 fd0c 	bl	8004f62 <__mdiff>
 800454a:	68c3      	ldr	r3, [r0, #12]
 800454c:	4602      	mov	r2, r0
 800454e:	bb03      	cbnz	r3, 8004592 <_dtoa_r+0xa8a>
 8004550:	4601      	mov	r1, r0
 8004552:	9006      	str	r0, [sp, #24]
 8004554:	4650      	mov	r0, sl
 8004556:	f000 fcea 	bl	8004f2e <__mcmp>
 800455a:	9a06      	ldr	r2, [sp, #24]
 800455c:	4603      	mov	r3, r0
 800455e:	4611      	mov	r1, r2
 8004560:	4620      	mov	r0, r4
 8004562:	9306      	str	r3, [sp, #24]
 8004564:	f000 fb0e 	bl	8004b84 <_Bfree>
 8004568:	9b06      	ldr	r3, [sp, #24]
 800456a:	b9a3      	cbnz	r3, 8004596 <_dtoa_r+0xa8e>
 800456c:	9a07      	ldr	r2, [sp, #28]
 800456e:	b992      	cbnz	r2, 8004596 <_dtoa_r+0xa8e>
 8004570:	9a05      	ldr	r2, [sp, #20]
 8004572:	b982      	cbnz	r2, 8004596 <_dtoa_r+0xa8e>
 8004574:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004578:	d029      	beq.n	80045ce <_dtoa_r+0xac6>
 800457a:	9b00      	ldr	r3, [sp, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	dd01      	ble.n	8004584 <_dtoa_r+0xa7c>
 8004580:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004584:	f108 0501 	add.w	r5, r8, #1
 8004588:	f888 9000 	strb.w	r9, [r8]
 800458c:	e753      	b.n	8004436 <_dtoa_r+0x92e>
 800458e:	4638      	mov	r0, r7
 8004590:	e7c2      	b.n	8004518 <_dtoa_r+0xa10>
 8004592:	2301      	movs	r3, #1
 8004594:	e7e3      	b.n	800455e <_dtoa_r+0xa56>
 8004596:	9a00      	ldr	r2, [sp, #0]
 8004598:	2a00      	cmp	r2, #0
 800459a:	db04      	blt.n	80045a6 <_dtoa_r+0xa9e>
 800459c:	d125      	bne.n	80045ea <_dtoa_r+0xae2>
 800459e:	9a07      	ldr	r2, [sp, #28]
 80045a0:	bb1a      	cbnz	r2, 80045ea <_dtoa_r+0xae2>
 80045a2:	9a05      	ldr	r2, [sp, #20]
 80045a4:	bb0a      	cbnz	r2, 80045ea <_dtoa_r+0xae2>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	ddec      	ble.n	8004584 <_dtoa_r+0xa7c>
 80045aa:	4651      	mov	r1, sl
 80045ac:	2201      	movs	r2, #1
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 fc6c 	bl	8004e8c <__lshift>
 80045b4:	4631      	mov	r1, r6
 80045b6:	4682      	mov	sl, r0
 80045b8:	f000 fcb9 	bl	8004f2e <__mcmp>
 80045bc:	2800      	cmp	r0, #0
 80045be:	dc03      	bgt.n	80045c8 <_dtoa_r+0xac0>
 80045c0:	d1e0      	bne.n	8004584 <_dtoa_r+0xa7c>
 80045c2:	f019 0f01 	tst.w	r9, #1
 80045c6:	d0dd      	beq.n	8004584 <_dtoa_r+0xa7c>
 80045c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80045cc:	d1d8      	bne.n	8004580 <_dtoa_r+0xa78>
 80045ce:	2339      	movs	r3, #57	; 0x39
 80045d0:	f888 3000 	strb.w	r3, [r8]
 80045d4:	f108 0801 	add.w	r8, r8, #1
 80045d8:	4645      	mov	r5, r8
 80045da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045de:	2b39      	cmp	r3, #57	; 0x39
 80045e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80045e4:	d03b      	beq.n	800465e <_dtoa_r+0xb56>
 80045e6:	3301      	adds	r3, #1
 80045e8:	e040      	b.n	800466c <_dtoa_r+0xb64>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f108 0501 	add.w	r5, r8, #1
 80045f0:	dd05      	ble.n	80045fe <_dtoa_r+0xaf6>
 80045f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80045f6:	d0ea      	beq.n	80045ce <_dtoa_r+0xac6>
 80045f8:	f109 0901 	add.w	r9, r9, #1
 80045fc:	e7c4      	b.n	8004588 <_dtoa_r+0xa80>
 80045fe:	9b02      	ldr	r3, [sp, #8]
 8004600:	9a04      	ldr	r2, [sp, #16]
 8004602:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004606:	1aeb      	subs	r3, r5, r3
 8004608:	4293      	cmp	r3, r2
 800460a:	46a8      	mov	r8, r5
 800460c:	f43f af4b 	beq.w	80044a6 <_dtoa_r+0x99e>
 8004610:	4651      	mov	r1, sl
 8004612:	2300      	movs	r3, #0
 8004614:	220a      	movs	r2, #10
 8004616:	4620      	mov	r0, r4
 8004618:	f000 facb 	bl	8004bb2 <__multadd>
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	9903      	ldr	r1, [sp, #12]
 8004620:	42bb      	cmp	r3, r7
 8004622:	4682      	mov	sl, r0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f04f 020a 	mov.w	r2, #10
 800462c:	4620      	mov	r0, r4
 800462e:	d104      	bne.n	800463a <_dtoa_r+0xb32>
 8004630:	f000 fabf 	bl	8004bb2 <__multadd>
 8004634:	9003      	str	r0, [sp, #12]
 8004636:	4607      	mov	r7, r0
 8004638:	e776      	b.n	8004528 <_dtoa_r+0xa20>
 800463a:	f000 faba 	bl	8004bb2 <__multadd>
 800463e:	2300      	movs	r3, #0
 8004640:	9003      	str	r0, [sp, #12]
 8004642:	220a      	movs	r2, #10
 8004644:	4639      	mov	r1, r7
 8004646:	4620      	mov	r0, r4
 8004648:	f000 fab3 	bl	8004bb2 <__multadd>
 800464c:	e7f3      	b.n	8004636 <_dtoa_r+0xb2e>
 800464e:	4651      	mov	r1, sl
 8004650:	2300      	movs	r3, #0
 8004652:	220a      	movs	r2, #10
 8004654:	4620      	mov	r0, r4
 8004656:	f000 faac 	bl	8004bb2 <__multadd>
 800465a:	4682      	mov	sl, r0
 800465c:	e70d      	b.n	800447a <_dtoa_r+0x972>
 800465e:	9b02      	ldr	r3, [sp, #8]
 8004660:	4293      	cmp	r3, r2
 8004662:	d105      	bne.n	8004670 <_dtoa_r+0xb68>
 8004664:	9a02      	ldr	r2, [sp, #8]
 8004666:	f10b 0b01 	add.w	fp, fp, #1
 800466a:	2331      	movs	r3, #49	; 0x31
 800466c:	7013      	strb	r3, [r2, #0]
 800466e:	e6e2      	b.n	8004436 <_dtoa_r+0x92e>
 8004670:	4615      	mov	r5, r2
 8004672:	e7b2      	b.n	80045da <_dtoa_r+0xad2>
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <_dtoa_r+0xb94>)
 8004676:	f7ff baae 	b.w	8003bd6 <_dtoa_r+0xce>
 800467a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f aa88 	bne.w	8003b92 <_dtoa_r+0x8a>
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <_dtoa_r+0xb98>)
 8004684:	f7ff baa7 	b.w	8003bd6 <_dtoa_r+0xce>
 8004688:	9b04      	ldr	r3, [sp, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f73f aef4 	bgt.w	8004478 <_dtoa_r+0x970>
 8004690:	9b07      	ldr	r3, [sp, #28]
 8004692:	2b02      	cmp	r3, #2
 8004694:	f77f aef0 	ble.w	8004478 <_dtoa_r+0x970>
 8004698:	e6b8      	b.n	800440c <_dtoa_r+0x904>
 800469a:	bf00      	nop
 800469c:	08005861 	.word	0x08005861
 80046a0:	08005883 	.word	0x08005883

080046a4 <_localeconv_r>:
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <_localeconv_r+0x14>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a18      	ldr	r0, [r3, #32]
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <_localeconv_r+0x18>)
 80046ac:	2800      	cmp	r0, #0
 80046ae:	bf08      	it	eq
 80046b0:	4618      	moveq	r0, r3
 80046b2:	30f0      	adds	r0, #240	; 0xf0
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000014 	.word	0x20000014
 80046bc:	20000518 	.word	0x20000518

080046c0 <malloc>:
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <malloc+0xc>)
 80046c2:	4601      	mov	r1, r0
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	f000 b803 	b.w	80046d0 <_malloc_r>
 80046ca:	bf00      	nop
 80046cc:	20000014 	.word	0x20000014

080046d0 <_malloc_r>:
 80046d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	f101 040b 	add.w	r4, r1, #11
 80046d8:	2c16      	cmp	r4, #22
 80046da:	4681      	mov	r9, r0
 80046dc:	d907      	bls.n	80046ee <_malloc_r+0x1e>
 80046de:	f034 0407 	bics.w	r4, r4, #7
 80046e2:	d505      	bpl.n	80046f0 <_malloc_r+0x20>
 80046e4:	230c      	movs	r3, #12
 80046e6:	f8c9 3000 	str.w	r3, [r9]
 80046ea:	2600      	movs	r6, #0
 80046ec:	e131      	b.n	8004952 <_malloc_r+0x282>
 80046ee:	2410      	movs	r4, #16
 80046f0:	428c      	cmp	r4, r1
 80046f2:	d3f7      	bcc.n	80046e4 <_malloc_r+0x14>
 80046f4:	4648      	mov	r0, r9
 80046f6:	f000 fa05 	bl	8004b04 <__malloc_lock>
 80046fa:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80046fe:	4d9c      	ldr	r5, [pc, #624]	; (8004970 <_malloc_r+0x2a0>)
 8004700:	d236      	bcs.n	8004770 <_malloc_r+0xa0>
 8004702:	f104 0208 	add.w	r2, r4, #8
 8004706:	442a      	add	r2, r5
 8004708:	f1a2 0108 	sub.w	r1, r2, #8
 800470c:	6856      	ldr	r6, [r2, #4]
 800470e:	428e      	cmp	r6, r1
 8004710:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004714:	d102      	bne.n	800471c <_malloc_r+0x4c>
 8004716:	68d6      	ldr	r6, [r2, #12]
 8004718:	42b2      	cmp	r2, r6
 800471a:	d010      	beq.n	800473e <_malloc_r+0x6e>
 800471c:	6873      	ldr	r3, [r6, #4]
 800471e:	68f2      	ldr	r2, [r6, #12]
 8004720:	68b1      	ldr	r1, [r6, #8]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	60ca      	str	r2, [r1, #12]
 8004728:	4433      	add	r3, r6
 800472a:	6091      	str	r1, [r2, #8]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	4648      	mov	r0, r9
 8004736:	f000 f9eb 	bl	8004b10 <__malloc_unlock>
 800473a:	3608      	adds	r6, #8
 800473c:	e109      	b.n	8004952 <_malloc_r+0x282>
 800473e:	3302      	adds	r3, #2
 8004740:	4a8c      	ldr	r2, [pc, #560]	; (8004974 <_malloc_r+0x2a4>)
 8004742:	692e      	ldr	r6, [r5, #16]
 8004744:	4296      	cmp	r6, r2
 8004746:	4611      	mov	r1, r2
 8004748:	d06d      	beq.n	8004826 <_malloc_r+0x156>
 800474a:	6870      	ldr	r0, [r6, #4]
 800474c:	f020 0003 	bic.w	r0, r0, #3
 8004750:	1b07      	subs	r7, r0, r4
 8004752:	2f0f      	cmp	r7, #15
 8004754:	dd47      	ble.n	80047e6 <_malloc_r+0x116>
 8004756:	1933      	adds	r3, r6, r4
 8004758:	f044 0401 	orr.w	r4, r4, #1
 800475c:	6074      	str	r4, [r6, #4]
 800475e:	616b      	str	r3, [r5, #20]
 8004760:	612b      	str	r3, [r5, #16]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	f047 0201 	orr.w	r2, r7, #1
 800476a:	605a      	str	r2, [r3, #4]
 800476c:	5037      	str	r7, [r6, r0]
 800476e:	e7e1      	b.n	8004734 <_malloc_r+0x64>
 8004770:	0a63      	lsrs	r3, r4, #9
 8004772:	d02a      	beq.n	80047ca <_malloc_r+0xfa>
 8004774:	2b04      	cmp	r3, #4
 8004776:	d812      	bhi.n	800479e <_malloc_r+0xce>
 8004778:	09a3      	lsrs	r3, r4, #6
 800477a:	3338      	adds	r3, #56	; 0x38
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004782:	f1a2 0008 	sub.w	r0, r2, #8
 8004786:	6856      	ldr	r6, [r2, #4]
 8004788:	4286      	cmp	r6, r0
 800478a:	d006      	beq.n	800479a <_malloc_r+0xca>
 800478c:	6872      	ldr	r2, [r6, #4]
 800478e:	f022 0203 	bic.w	r2, r2, #3
 8004792:	1b11      	subs	r1, r2, r4
 8004794:	290f      	cmp	r1, #15
 8004796:	dd1c      	ble.n	80047d2 <_malloc_r+0x102>
 8004798:	3b01      	subs	r3, #1
 800479a:	3301      	adds	r3, #1
 800479c:	e7d0      	b.n	8004740 <_malloc_r+0x70>
 800479e:	2b14      	cmp	r3, #20
 80047a0:	d801      	bhi.n	80047a6 <_malloc_r+0xd6>
 80047a2:	335b      	adds	r3, #91	; 0x5b
 80047a4:	e7ea      	b.n	800477c <_malloc_r+0xac>
 80047a6:	2b54      	cmp	r3, #84	; 0x54
 80047a8:	d802      	bhi.n	80047b0 <_malloc_r+0xe0>
 80047aa:	0b23      	lsrs	r3, r4, #12
 80047ac:	336e      	adds	r3, #110	; 0x6e
 80047ae:	e7e5      	b.n	800477c <_malloc_r+0xac>
 80047b0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80047b4:	d802      	bhi.n	80047bc <_malloc_r+0xec>
 80047b6:	0be3      	lsrs	r3, r4, #15
 80047b8:	3377      	adds	r3, #119	; 0x77
 80047ba:	e7df      	b.n	800477c <_malloc_r+0xac>
 80047bc:	f240 5254 	movw	r2, #1364	; 0x554
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d804      	bhi.n	80047ce <_malloc_r+0xfe>
 80047c4:	0ca3      	lsrs	r3, r4, #18
 80047c6:	337c      	adds	r3, #124	; 0x7c
 80047c8:	e7d8      	b.n	800477c <_malloc_r+0xac>
 80047ca:	233f      	movs	r3, #63	; 0x3f
 80047cc:	e7d6      	b.n	800477c <_malloc_r+0xac>
 80047ce:	237e      	movs	r3, #126	; 0x7e
 80047d0:	e7d4      	b.n	800477c <_malloc_r+0xac>
 80047d2:	2900      	cmp	r1, #0
 80047d4:	68f1      	ldr	r1, [r6, #12]
 80047d6:	db04      	blt.n	80047e2 <_malloc_r+0x112>
 80047d8:	68b3      	ldr	r3, [r6, #8]
 80047da:	60d9      	str	r1, [r3, #12]
 80047dc:	608b      	str	r3, [r1, #8]
 80047de:	18b3      	adds	r3, r6, r2
 80047e0:	e7a4      	b.n	800472c <_malloc_r+0x5c>
 80047e2:	460e      	mov	r6, r1
 80047e4:	e7d0      	b.n	8004788 <_malloc_r+0xb8>
 80047e6:	2f00      	cmp	r7, #0
 80047e8:	616a      	str	r2, [r5, #20]
 80047ea:	612a      	str	r2, [r5, #16]
 80047ec:	db05      	blt.n	80047fa <_malloc_r+0x12a>
 80047ee:	4430      	add	r0, r6
 80047f0:	6843      	ldr	r3, [r0, #4]
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6043      	str	r3, [r0, #4]
 80047f8:	e79c      	b.n	8004734 <_malloc_r+0x64>
 80047fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80047fe:	d244      	bcs.n	800488a <_malloc_r+0x1ba>
 8004800:	08c0      	lsrs	r0, r0, #3
 8004802:	1087      	asrs	r7, r0, #2
 8004804:	2201      	movs	r2, #1
 8004806:	fa02 f707 	lsl.w	r7, r2, r7
 800480a:	686a      	ldr	r2, [r5, #4]
 800480c:	3001      	adds	r0, #1
 800480e:	433a      	orrs	r2, r7
 8004810:	606a      	str	r2, [r5, #4]
 8004812:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004816:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800481a:	60b7      	str	r7, [r6, #8]
 800481c:	3a08      	subs	r2, #8
 800481e:	60f2      	str	r2, [r6, #12]
 8004820:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004824:	60fe      	str	r6, [r7, #12]
 8004826:	2001      	movs	r0, #1
 8004828:	109a      	asrs	r2, r3, #2
 800482a:	fa00 f202 	lsl.w	r2, r0, r2
 800482e:	6868      	ldr	r0, [r5, #4]
 8004830:	4282      	cmp	r2, r0
 8004832:	f200 80a1 	bhi.w	8004978 <_malloc_r+0x2a8>
 8004836:	4202      	tst	r2, r0
 8004838:	d106      	bne.n	8004848 <_malloc_r+0x178>
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	0052      	lsls	r2, r2, #1
 8004840:	4202      	tst	r2, r0
 8004842:	f103 0304 	add.w	r3, r3, #4
 8004846:	d0fa      	beq.n	800483e <_malloc_r+0x16e>
 8004848:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800484c:	46e0      	mov	r8, ip
 800484e:	469e      	mov	lr, r3
 8004850:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004854:	4546      	cmp	r6, r8
 8004856:	d153      	bne.n	8004900 <_malloc_r+0x230>
 8004858:	f10e 0e01 	add.w	lr, lr, #1
 800485c:	f01e 0f03 	tst.w	lr, #3
 8004860:	f108 0808 	add.w	r8, r8, #8
 8004864:	d1f4      	bne.n	8004850 <_malloc_r+0x180>
 8004866:	0798      	lsls	r0, r3, #30
 8004868:	d179      	bne.n	800495e <_malloc_r+0x28e>
 800486a:	686b      	ldr	r3, [r5, #4]
 800486c:	ea23 0302 	bic.w	r3, r3, r2
 8004870:	606b      	str	r3, [r5, #4]
 8004872:	6868      	ldr	r0, [r5, #4]
 8004874:	0052      	lsls	r2, r2, #1
 8004876:	4282      	cmp	r2, r0
 8004878:	d87e      	bhi.n	8004978 <_malloc_r+0x2a8>
 800487a:	2a00      	cmp	r2, #0
 800487c:	d07c      	beq.n	8004978 <_malloc_r+0x2a8>
 800487e:	4673      	mov	r3, lr
 8004880:	4202      	tst	r2, r0
 8004882:	d1e1      	bne.n	8004848 <_malloc_r+0x178>
 8004884:	3304      	adds	r3, #4
 8004886:	0052      	lsls	r2, r2, #1
 8004888:	e7fa      	b.n	8004880 <_malloc_r+0x1b0>
 800488a:	0a42      	lsrs	r2, r0, #9
 800488c:	2a04      	cmp	r2, #4
 800488e:	d815      	bhi.n	80048bc <_malloc_r+0x1ec>
 8004890:	0982      	lsrs	r2, r0, #6
 8004892:	3238      	adds	r2, #56	; 0x38
 8004894:	1c57      	adds	r7, r2, #1
 8004896:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800489a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800489e:	45be      	cmp	lr, r7
 80048a0:	d126      	bne.n	80048f0 <_malloc_r+0x220>
 80048a2:	2001      	movs	r0, #1
 80048a4:	1092      	asrs	r2, r2, #2
 80048a6:	fa00 f202 	lsl.w	r2, r0, r2
 80048aa:	6868      	ldr	r0, [r5, #4]
 80048ac:	4310      	orrs	r0, r2
 80048ae:	6068      	str	r0, [r5, #4]
 80048b0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80048b4:	60b7      	str	r7, [r6, #8]
 80048b6:	f8ce 6008 	str.w	r6, [lr, #8]
 80048ba:	e7b3      	b.n	8004824 <_malloc_r+0x154>
 80048bc:	2a14      	cmp	r2, #20
 80048be:	d801      	bhi.n	80048c4 <_malloc_r+0x1f4>
 80048c0:	325b      	adds	r2, #91	; 0x5b
 80048c2:	e7e7      	b.n	8004894 <_malloc_r+0x1c4>
 80048c4:	2a54      	cmp	r2, #84	; 0x54
 80048c6:	d802      	bhi.n	80048ce <_malloc_r+0x1fe>
 80048c8:	0b02      	lsrs	r2, r0, #12
 80048ca:	326e      	adds	r2, #110	; 0x6e
 80048cc:	e7e2      	b.n	8004894 <_malloc_r+0x1c4>
 80048ce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80048d2:	d802      	bhi.n	80048da <_malloc_r+0x20a>
 80048d4:	0bc2      	lsrs	r2, r0, #15
 80048d6:	3277      	adds	r2, #119	; 0x77
 80048d8:	e7dc      	b.n	8004894 <_malloc_r+0x1c4>
 80048da:	f240 5754 	movw	r7, #1364	; 0x554
 80048de:	42ba      	cmp	r2, r7
 80048e0:	bf9a      	itte	ls
 80048e2:	0c82      	lsrls	r2, r0, #18
 80048e4:	327c      	addls	r2, #124	; 0x7c
 80048e6:	227e      	movhi	r2, #126	; 0x7e
 80048e8:	e7d4      	b.n	8004894 <_malloc_r+0x1c4>
 80048ea:	68bf      	ldr	r7, [r7, #8]
 80048ec:	45be      	cmp	lr, r7
 80048ee:	d004      	beq.n	80048fa <_malloc_r+0x22a>
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	f022 0203 	bic.w	r2, r2, #3
 80048f6:	4290      	cmp	r0, r2
 80048f8:	d3f7      	bcc.n	80048ea <_malloc_r+0x21a>
 80048fa:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80048fe:	e7d7      	b.n	80048b0 <_malloc_r+0x1e0>
 8004900:	6870      	ldr	r0, [r6, #4]
 8004902:	68f7      	ldr	r7, [r6, #12]
 8004904:	f020 0003 	bic.w	r0, r0, #3
 8004908:	eba0 0a04 	sub.w	sl, r0, r4
 800490c:	f1ba 0f0f 	cmp.w	sl, #15
 8004910:	dd10      	ble.n	8004934 <_malloc_r+0x264>
 8004912:	68b2      	ldr	r2, [r6, #8]
 8004914:	1933      	adds	r3, r6, r4
 8004916:	f044 0401 	orr.w	r4, r4, #1
 800491a:	6074      	str	r4, [r6, #4]
 800491c:	60d7      	str	r7, [r2, #12]
 800491e:	60ba      	str	r2, [r7, #8]
 8004920:	f04a 0201 	orr.w	r2, sl, #1
 8004924:	616b      	str	r3, [r5, #20]
 8004926:	612b      	str	r3, [r5, #16]
 8004928:	60d9      	str	r1, [r3, #12]
 800492a:	6099      	str	r1, [r3, #8]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	f846 a000 	str.w	sl, [r6, r0]
 8004932:	e6ff      	b.n	8004734 <_malloc_r+0x64>
 8004934:	f1ba 0f00 	cmp.w	sl, #0
 8004938:	db0f      	blt.n	800495a <_malloc_r+0x28a>
 800493a:	4430      	add	r0, r6
 800493c:	6843      	ldr	r3, [r0, #4]
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6043      	str	r3, [r0, #4]
 8004944:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004948:	4648      	mov	r0, r9
 800494a:	60df      	str	r7, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	f000 f8df 	bl	8004b10 <__malloc_unlock>
 8004952:	4630      	mov	r0, r6
 8004954:	b003      	add	sp, #12
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495a:	463e      	mov	r6, r7
 800495c:	e77a      	b.n	8004854 <_malloc_r+0x184>
 800495e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8004962:	4584      	cmp	ip, r0
 8004964:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004968:	f43f af7d 	beq.w	8004866 <_malloc_r+0x196>
 800496c:	e781      	b.n	8004872 <_malloc_r+0x1a2>
 800496e:	bf00      	nop
 8004970:	20000108 	.word	0x20000108
 8004974:	20000110 	.word	0x20000110
 8004978:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800497c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004980:	f026 0603 	bic.w	r6, r6, #3
 8004984:	42b4      	cmp	r4, r6
 8004986:	d803      	bhi.n	8004990 <_malloc_r+0x2c0>
 8004988:	1b33      	subs	r3, r6, r4
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f300 8096 	bgt.w	8004abc <_malloc_r+0x3ec>
 8004990:	4a4f      	ldr	r2, [pc, #316]	; (8004ad0 <_malloc_r+0x400>)
 8004992:	6817      	ldr	r7, [r2, #0]
 8004994:	4a4f      	ldr	r2, [pc, #316]	; (8004ad4 <_malloc_r+0x404>)
 8004996:	6811      	ldr	r1, [r2, #0]
 8004998:	3710      	adds	r7, #16
 800499a:	3101      	adds	r1, #1
 800499c:	eb0b 0306 	add.w	r3, fp, r6
 80049a0:	4427      	add	r7, r4
 80049a2:	d005      	beq.n	80049b0 <_malloc_r+0x2e0>
 80049a4:	494c      	ldr	r1, [pc, #304]	; (8004ad8 <_malloc_r+0x408>)
 80049a6:	3901      	subs	r1, #1
 80049a8:	440f      	add	r7, r1
 80049aa:	3101      	adds	r1, #1
 80049ac:	4249      	negs	r1, r1
 80049ae:	400f      	ands	r7, r1
 80049b0:	4639      	mov	r1, r7
 80049b2:	4648      	mov	r0, r9
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	f000 fb80 	bl	80050bc <_sbrk_r>
 80049bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80049c0:	4680      	mov	r8, r0
 80049c2:	d056      	beq.n	8004a72 <_malloc_r+0x3a2>
 80049c4:	9b00      	ldr	r3, [sp, #0]
 80049c6:	9a01      	ldr	r2, [sp, #4]
 80049c8:	4283      	cmp	r3, r0
 80049ca:	d901      	bls.n	80049d0 <_malloc_r+0x300>
 80049cc:	45ab      	cmp	fp, r5
 80049ce:	d150      	bne.n	8004a72 <_malloc_r+0x3a2>
 80049d0:	4842      	ldr	r0, [pc, #264]	; (8004adc <_malloc_r+0x40c>)
 80049d2:	6801      	ldr	r1, [r0, #0]
 80049d4:	4543      	cmp	r3, r8
 80049d6:	eb07 0e01 	add.w	lr, r7, r1
 80049da:	f8c0 e000 	str.w	lr, [r0]
 80049de:	4940      	ldr	r1, [pc, #256]	; (8004ae0 <_malloc_r+0x410>)
 80049e0:	4682      	mov	sl, r0
 80049e2:	d113      	bne.n	8004a0c <_malloc_r+0x33c>
 80049e4:	420b      	tst	r3, r1
 80049e6:	d111      	bne.n	8004a0c <_malloc_r+0x33c>
 80049e8:	68ab      	ldr	r3, [r5, #8]
 80049ea:	443e      	add	r6, r7
 80049ec:	f046 0601 	orr.w	r6, r6, #1
 80049f0:	605e      	str	r6, [r3, #4]
 80049f2:	4a3c      	ldr	r2, [pc, #240]	; (8004ae4 <_malloc_r+0x414>)
 80049f4:	f8da 3000 	ldr.w	r3, [sl]
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	428b      	cmp	r3, r1
 80049fc:	bf88      	it	hi
 80049fe:	6013      	strhi	r3, [r2, #0]
 8004a00:	4a39      	ldr	r2, [pc, #228]	; (8004ae8 <_malloc_r+0x418>)
 8004a02:	6811      	ldr	r1, [r2, #0]
 8004a04:	428b      	cmp	r3, r1
 8004a06:	bf88      	it	hi
 8004a08:	6013      	strhi	r3, [r2, #0]
 8004a0a:	e032      	b.n	8004a72 <_malloc_r+0x3a2>
 8004a0c:	6810      	ldr	r0, [r2, #0]
 8004a0e:	3001      	adds	r0, #1
 8004a10:	bf1b      	ittet	ne
 8004a12:	eba8 0303 	subne.w	r3, r8, r3
 8004a16:	4473      	addne	r3, lr
 8004a18:	f8c2 8000 	streq.w	r8, [r2]
 8004a1c:	f8ca 3000 	strne.w	r3, [sl]
 8004a20:	f018 0007 	ands.w	r0, r8, #7
 8004a24:	bf1c      	itt	ne
 8004a26:	f1c0 0008 	rsbne	r0, r0, #8
 8004a2a:	4480      	addne	r8, r0
 8004a2c:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <_malloc_r+0x408>)
 8004a2e:	4447      	add	r7, r8
 8004a30:	4418      	add	r0, r3
 8004a32:	400f      	ands	r7, r1
 8004a34:	1bc7      	subs	r7, r0, r7
 8004a36:	4639      	mov	r1, r7
 8004a38:	4648      	mov	r0, r9
 8004a3a:	f000 fb3f 	bl	80050bc <_sbrk_r>
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	bf08      	it	eq
 8004a42:	4640      	moveq	r0, r8
 8004a44:	f8da 3000 	ldr.w	r3, [sl]
 8004a48:	f8c5 8008 	str.w	r8, [r5, #8]
 8004a4c:	bf08      	it	eq
 8004a4e:	2700      	moveq	r7, #0
 8004a50:	eba0 0008 	sub.w	r0, r0, r8
 8004a54:	443b      	add	r3, r7
 8004a56:	4407      	add	r7, r0
 8004a58:	f047 0701 	orr.w	r7, r7, #1
 8004a5c:	45ab      	cmp	fp, r5
 8004a5e:	f8ca 3000 	str.w	r3, [sl]
 8004a62:	f8c8 7004 	str.w	r7, [r8, #4]
 8004a66:	d0c4      	beq.n	80049f2 <_malloc_r+0x322>
 8004a68:	2e0f      	cmp	r6, #15
 8004a6a:	d810      	bhi.n	8004a8e <_malloc_r+0x3be>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004a72:	68ab      	ldr	r3, [r5, #8]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	f022 0203 	bic.w	r2, r2, #3
 8004a7a:	4294      	cmp	r4, r2
 8004a7c:	eba2 0304 	sub.w	r3, r2, r4
 8004a80:	d801      	bhi.n	8004a86 <_malloc_r+0x3b6>
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	dc1a      	bgt.n	8004abc <_malloc_r+0x3ec>
 8004a86:	4648      	mov	r0, r9
 8004a88:	f000 f842 	bl	8004b10 <__malloc_unlock>
 8004a8c:	e62d      	b.n	80046ea <_malloc_r+0x1a>
 8004a8e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004a92:	3e0c      	subs	r6, #12
 8004a94:	f026 0607 	bic.w	r6, r6, #7
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	4333      	orrs	r3, r6
 8004a9e:	f8cb 3004 	str.w	r3, [fp, #4]
 8004aa2:	eb0b 0306 	add.w	r3, fp, r6
 8004aa6:	2205      	movs	r2, #5
 8004aa8:	2e0f      	cmp	r6, #15
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	609a      	str	r2, [r3, #8]
 8004aae:	d9a0      	bls.n	80049f2 <_malloc_r+0x322>
 8004ab0:	f10b 0108 	add.w	r1, fp, #8
 8004ab4:	4648      	mov	r0, r9
 8004ab6:	f000 fc0f 	bl	80052d8 <_free_r>
 8004aba:	e79a      	b.n	80049f2 <_malloc_r+0x322>
 8004abc:	68ae      	ldr	r6, [r5, #8]
 8004abe:	f044 0201 	orr.w	r2, r4, #1
 8004ac2:	4434      	add	r4, r6
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6072      	str	r2, [r6, #4]
 8004aca:	60ac      	str	r4, [r5, #8]
 8004acc:	6063      	str	r3, [r4, #4]
 8004ace:	e631      	b.n	8004734 <_malloc_r+0x64>
 8004ad0:	200006e4 	.word	0x200006e4
 8004ad4:	20000510 	.word	0x20000510
 8004ad8:	00000080 	.word	0x00000080
 8004adc:	200006b4 	.word	0x200006b4
 8004ae0:	0000007f 	.word	0x0000007f
 8004ae4:	200006dc 	.word	0x200006dc
 8004ae8:	200006e0 	.word	0x200006e0

08004aec <memcpy>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	1e43      	subs	r3, r0, #1
 8004af0:	440a      	add	r2, r1
 8004af2:	4291      	cmp	r1, r2
 8004af4:	d100      	bne.n	8004af8 <memcpy+0xc>
 8004af6:	bd10      	pop	{r4, pc}
 8004af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b00:	e7f7      	b.n	8004af2 <memcpy+0x6>
	...

08004b04 <__malloc_lock>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__malloc_lock+0x8>)
 8004b06:	f000 bca3 	b.w	8005450 <__retarget_lock_acquire_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	200007e8 	.word	0x200007e8

08004b10 <__malloc_unlock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_unlock+0x8>)
 8004b12:	f000 bc9e 	b.w	8005452 <__retarget_lock_release_recursive>
 8004b16:	bf00      	nop
 8004b18:	200007e8 	.word	0x200007e8

08004b1c <_Balloc>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b20:	4604      	mov	r4, r0
 8004b22:	460e      	mov	r6, r1
 8004b24:	b93d      	cbnz	r5, 8004b36 <_Balloc+0x1a>
 8004b26:	2010      	movs	r0, #16
 8004b28:	f7ff fdca 	bl	80046c0 <malloc>
 8004b2c:	6260      	str	r0, [r4, #36]	; 0x24
 8004b2e:	6045      	str	r5, [r0, #4]
 8004b30:	6085      	str	r5, [r0, #8]
 8004b32:	6005      	str	r5, [r0, #0]
 8004b34:	60c5      	str	r5, [r0, #12]
 8004b36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004b38:	68eb      	ldr	r3, [r5, #12]
 8004b3a:	b183      	cbz	r3, 8004b5e <_Balloc+0x42>
 8004b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004b44:	b9b8      	cbnz	r0, 8004b76 <_Balloc+0x5a>
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f506 	lsl.w	r5, r1, r6
 8004b4c:	1d6a      	adds	r2, r5, #5
 8004b4e:	0092      	lsls	r2, r2, #2
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 fb3d 	bl	80051d0 <_calloc_r>
 8004b56:	b160      	cbz	r0, 8004b72 <_Balloc+0x56>
 8004b58:	6046      	str	r6, [r0, #4]
 8004b5a:	6085      	str	r5, [r0, #8]
 8004b5c:	e00e      	b.n	8004b7c <_Balloc+0x60>
 8004b5e:	2221      	movs	r2, #33	; 0x21
 8004b60:	2104      	movs	r1, #4
 8004b62:	4620      	mov	r0, r4
 8004b64:	f000 fb34 	bl	80051d0 <_calloc_r>
 8004b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b6a:	60e8      	str	r0, [r5, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e4      	bne.n	8004b3c <_Balloc+0x20>
 8004b72:	2000      	movs	r0, #0
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
 8004b76:	6802      	ldr	r2, [r0, #0]
 8004b78:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6103      	str	r3, [r0, #16]
 8004b80:	60c3      	str	r3, [r0, #12]
 8004b82:	bd70      	pop	{r4, r5, r6, pc}

08004b84 <_Bfree>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004b88:	4606      	mov	r6, r0
 8004b8a:	460d      	mov	r5, r1
 8004b8c:	b93c      	cbnz	r4, 8004b9e <_Bfree+0x1a>
 8004b8e:	2010      	movs	r0, #16
 8004b90:	f7ff fd96 	bl	80046c0 <malloc>
 8004b94:	6270      	str	r0, [r6, #36]	; 0x24
 8004b96:	6044      	str	r4, [r0, #4]
 8004b98:	6084      	str	r4, [r0, #8]
 8004b9a:	6004      	str	r4, [r0, #0]
 8004b9c:	60c4      	str	r4, [r0, #12]
 8004b9e:	b13d      	cbz	r5, 8004bb0 <_Bfree+0x2c>
 8004ba0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ba2:	686a      	ldr	r2, [r5, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004baa:	6029      	str	r1, [r5, #0]
 8004bac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}

08004bb2 <__multadd>:
 8004bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb6:	690d      	ldr	r5, [r1, #16]
 8004bb8:	461f      	mov	r7, r3
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	f101 0e14 	add.w	lr, r1, #20
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f8de 0000 	ldr.w	r0, [lr]
 8004bc8:	b281      	uxth	r1, r0
 8004bca:	fb02 7101 	mla	r1, r2, r1, r7
 8004bce:	0c0f      	lsrs	r7, r1, #16
 8004bd0:	0c00      	lsrs	r0, r0, #16
 8004bd2:	fb02 7000 	mla	r0, r2, r0, r7
 8004bd6:	b289      	uxth	r1, r1
 8004bd8:	3301      	adds	r3, #1
 8004bda:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004bde:	429d      	cmp	r5, r3
 8004be0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004be4:	f84e 1b04 	str.w	r1, [lr], #4
 8004be8:	dcec      	bgt.n	8004bc4 <__multadd+0x12>
 8004bea:	b1d7      	cbz	r7, 8004c22 <__multadd+0x70>
 8004bec:	68a3      	ldr	r3, [r4, #8]
 8004bee:	429d      	cmp	r5, r3
 8004bf0:	db12      	blt.n	8004c18 <__multadd+0x66>
 8004bf2:	6861      	ldr	r1, [r4, #4]
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	3101      	adds	r1, #1
 8004bf8:	f7ff ff90 	bl	8004b1c <_Balloc>
 8004bfc:	6922      	ldr	r2, [r4, #16]
 8004bfe:	3202      	adds	r2, #2
 8004c00:	f104 010c 	add.w	r1, r4, #12
 8004c04:	4680      	mov	r8, r0
 8004c06:	0092      	lsls	r2, r2, #2
 8004c08:	300c      	adds	r0, #12
 8004c0a:	f7ff ff6f 	bl	8004aec <memcpy>
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7ff ffb7 	bl	8004b84 <_Bfree>
 8004c16:	4644      	mov	r4, r8
 8004c18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c1c:	3501      	adds	r5, #1
 8004c1e:	615f      	str	r7, [r3, #20]
 8004c20:	6125      	str	r5, [r4, #16]
 8004c22:	4620      	mov	r0, r4
 8004c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c28 <__hi0bits>:
 8004c28:	0c02      	lsrs	r2, r0, #16
 8004c2a:	0412      	lsls	r2, r2, #16
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	b9b2      	cbnz	r2, 8004c5e <__hi0bits+0x36>
 8004c30:	0403      	lsls	r3, r0, #16
 8004c32:	2010      	movs	r0, #16
 8004c34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004c38:	bf04      	itt	eq
 8004c3a:	021b      	lsleq	r3, r3, #8
 8004c3c:	3008      	addeq	r0, #8
 8004c3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004c42:	bf04      	itt	eq
 8004c44:	011b      	lsleq	r3, r3, #4
 8004c46:	3004      	addeq	r0, #4
 8004c48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004c4c:	bf04      	itt	eq
 8004c4e:	009b      	lsleq	r3, r3, #2
 8004c50:	3002      	addeq	r0, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	db06      	blt.n	8004c64 <__hi0bits+0x3c>
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	d503      	bpl.n	8004c62 <__hi0bits+0x3a>
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	4770      	bx	lr
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e7e8      	b.n	8004c34 <__hi0bits+0xc>
 8004c62:	2020      	movs	r0, #32
 8004c64:	4770      	bx	lr

08004c66 <__lo0bits>:
 8004c66:	6803      	ldr	r3, [r0, #0]
 8004c68:	f013 0207 	ands.w	r2, r3, #7
 8004c6c:	4601      	mov	r1, r0
 8004c6e:	d00b      	beq.n	8004c88 <__lo0bits+0x22>
 8004c70:	07da      	lsls	r2, r3, #31
 8004c72:	d423      	bmi.n	8004cbc <__lo0bits+0x56>
 8004c74:	0798      	lsls	r0, r3, #30
 8004c76:	bf49      	itett	mi
 8004c78:	085b      	lsrmi	r3, r3, #1
 8004c7a:	089b      	lsrpl	r3, r3, #2
 8004c7c:	2001      	movmi	r0, #1
 8004c7e:	600b      	strmi	r3, [r1, #0]
 8004c80:	bf5c      	itt	pl
 8004c82:	600b      	strpl	r3, [r1, #0]
 8004c84:	2002      	movpl	r0, #2
 8004c86:	4770      	bx	lr
 8004c88:	b298      	uxth	r0, r3
 8004c8a:	b9a8      	cbnz	r0, 8004cb8 <__lo0bits+0x52>
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	2010      	movs	r0, #16
 8004c90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004c94:	bf04      	itt	eq
 8004c96:	0a1b      	lsreq	r3, r3, #8
 8004c98:	3008      	addeq	r0, #8
 8004c9a:	071a      	lsls	r2, r3, #28
 8004c9c:	bf04      	itt	eq
 8004c9e:	091b      	lsreq	r3, r3, #4
 8004ca0:	3004      	addeq	r0, #4
 8004ca2:	079a      	lsls	r2, r3, #30
 8004ca4:	bf04      	itt	eq
 8004ca6:	089b      	lsreq	r3, r3, #2
 8004ca8:	3002      	addeq	r0, #2
 8004caa:	07da      	lsls	r2, r3, #31
 8004cac:	d402      	bmi.n	8004cb4 <__lo0bits+0x4e>
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	d006      	beq.n	8004cc0 <__lo0bits+0x5a>
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	600b      	str	r3, [r1, #0]
 8004cb6:	4770      	bx	lr
 8004cb8:	4610      	mov	r0, r2
 8004cba:	e7e9      	b.n	8004c90 <__lo0bits+0x2a>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	4770      	bx	lr
 8004cc0:	2020      	movs	r0, #32
 8004cc2:	4770      	bx	lr

08004cc4 <__i2b>:
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	2101      	movs	r1, #1
 8004cca:	f7ff ff27 	bl	8004b1c <_Balloc>
 8004cce:	2201      	movs	r2, #1
 8004cd0:	6144      	str	r4, [r0, #20]
 8004cd2:	6102      	str	r2, [r0, #16]
 8004cd4:	bd10      	pop	{r4, pc}

08004cd6 <__multiply>:
 8004cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	4614      	mov	r4, r2
 8004cdc:	690a      	ldr	r2, [r1, #16]
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	bfb8      	it	lt
 8004ce4:	460b      	movlt	r3, r1
 8004ce6:	4689      	mov	r9, r1
 8004ce8:	bfbc      	itt	lt
 8004cea:	46a1      	movlt	r9, r4
 8004cec:	461c      	movlt	r4, r3
 8004cee:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004cf2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004cf6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004cfa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004cfe:	eb07 060a 	add.w	r6, r7, sl
 8004d02:	429e      	cmp	r6, r3
 8004d04:	bfc8      	it	gt
 8004d06:	3101      	addgt	r1, #1
 8004d08:	f7ff ff08 	bl	8004b1c <_Balloc>
 8004d0c:	f100 0514 	add.w	r5, r0, #20
 8004d10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d14:	462b      	mov	r3, r5
 8004d16:	2200      	movs	r2, #0
 8004d18:	4543      	cmp	r3, r8
 8004d1a:	d316      	bcc.n	8004d4a <__multiply+0x74>
 8004d1c:	f104 0214 	add.w	r2, r4, #20
 8004d20:	f109 0114 	add.w	r1, r9, #20
 8004d24:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004d28:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	9c01      	ldr	r4, [sp, #4]
 8004d30:	4294      	cmp	r4, r2
 8004d32:	4613      	mov	r3, r2
 8004d34:	d80c      	bhi.n	8004d50 <__multiply+0x7a>
 8004d36:	2e00      	cmp	r6, #0
 8004d38:	dd03      	ble.n	8004d42 <__multiply+0x6c>
 8004d3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d054      	beq.n	8004dec <__multiply+0x116>
 8004d42:	6106      	str	r6, [r0, #16]
 8004d44:	b003      	add	sp, #12
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4a:	f843 2b04 	str.w	r2, [r3], #4
 8004d4e:	e7e3      	b.n	8004d18 <__multiply+0x42>
 8004d50:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d54:	3204      	adds	r2, #4
 8004d56:	f1ba 0f00 	cmp.w	sl, #0
 8004d5a:	d020      	beq.n	8004d9e <__multiply+0xc8>
 8004d5c:	46ae      	mov	lr, r5
 8004d5e:	4689      	mov	r9, r1
 8004d60:	f04f 0c00 	mov.w	ip, #0
 8004d64:	f859 4b04 	ldr.w	r4, [r9], #4
 8004d68:	f8be b000 	ldrh.w	fp, [lr]
 8004d6c:	b2a3      	uxth	r3, r4
 8004d6e:	fb0a b303 	mla	r3, sl, r3, fp
 8004d72:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004d76:	f8de 4000 	ldr.w	r4, [lr]
 8004d7a:	4463      	add	r3, ip
 8004d7c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004d80:	fb0a c40b 	mla	r4, sl, fp, ip
 8004d84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004d8e:	454f      	cmp	r7, r9
 8004d90:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004d94:	f84e 3b04 	str.w	r3, [lr], #4
 8004d98:	d8e4      	bhi.n	8004d64 <__multiply+0x8e>
 8004d9a:	f8ce c000 	str.w	ip, [lr]
 8004d9e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004da2:	f1b9 0f00 	cmp.w	r9, #0
 8004da6:	d01f      	beq.n	8004de8 <__multiply+0x112>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	46ae      	mov	lr, r5
 8004dac:	468c      	mov	ip, r1
 8004dae:	f04f 0a00 	mov.w	sl, #0
 8004db2:	f8bc 4000 	ldrh.w	r4, [ip]
 8004db6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004dba:	fb09 b404 	mla	r4, r9, r4, fp
 8004dbe:	44a2      	add	sl, r4
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004dc6:	f84e 3b04 	str.w	r3, [lr], #4
 8004dca:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004dce:	f8be 4000 	ldrh.w	r4, [lr]
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	fb09 4303 	mla	r3, r9, r3, r4
 8004dd8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004ddc:	4567      	cmp	r7, ip
 8004dde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004de2:	d8e6      	bhi.n	8004db2 <__multiply+0xdc>
 8004de4:	f8ce 3000 	str.w	r3, [lr]
 8004de8:	3504      	adds	r5, #4
 8004dea:	e7a0      	b.n	8004d2e <__multiply+0x58>
 8004dec:	3e01      	subs	r6, #1
 8004dee:	e7a2      	b.n	8004d36 <__multiply+0x60>

08004df0 <__pow5mult>:
 8004df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df4:	4615      	mov	r5, r2
 8004df6:	f012 0203 	ands.w	r2, r2, #3
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460f      	mov	r7, r1
 8004dfe:	d007      	beq.n	8004e10 <__pow5mult+0x20>
 8004e00:	3a01      	subs	r2, #1
 8004e02:	4c21      	ldr	r4, [pc, #132]	; (8004e88 <__pow5mult+0x98>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e0a:	f7ff fed2 	bl	8004bb2 <__multadd>
 8004e0e:	4607      	mov	r7, r0
 8004e10:	10ad      	asrs	r5, r5, #2
 8004e12:	d035      	beq.n	8004e80 <__pow5mult+0x90>
 8004e14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004e16:	b93c      	cbnz	r4, 8004e28 <__pow5mult+0x38>
 8004e18:	2010      	movs	r0, #16
 8004e1a:	f7ff fc51 	bl	80046c0 <malloc>
 8004e1e:	6270      	str	r0, [r6, #36]	; 0x24
 8004e20:	6044      	str	r4, [r0, #4]
 8004e22:	6084      	str	r4, [r0, #8]
 8004e24:	6004      	str	r4, [r0, #0]
 8004e26:	60c4      	str	r4, [r0, #12]
 8004e28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e30:	b94c      	cbnz	r4, 8004e46 <__pow5mult+0x56>
 8004e32:	f240 2171 	movw	r1, #625	; 0x271
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7ff ff44 	bl	8004cc4 <__i2b>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e42:	4604      	mov	r4, r0
 8004e44:	6003      	str	r3, [r0, #0]
 8004e46:	f04f 0800 	mov.w	r8, #0
 8004e4a:	07eb      	lsls	r3, r5, #31
 8004e4c:	d50a      	bpl.n	8004e64 <__pow5mult+0x74>
 8004e4e:	4639      	mov	r1, r7
 8004e50:	4622      	mov	r2, r4
 8004e52:	4630      	mov	r0, r6
 8004e54:	f7ff ff3f 	bl	8004cd6 <__multiply>
 8004e58:	4639      	mov	r1, r7
 8004e5a:	4681      	mov	r9, r0
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f7ff fe91 	bl	8004b84 <_Bfree>
 8004e62:	464f      	mov	r7, r9
 8004e64:	106d      	asrs	r5, r5, #1
 8004e66:	d00b      	beq.n	8004e80 <__pow5mult+0x90>
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	b938      	cbnz	r0, 8004e7c <__pow5mult+0x8c>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff ff30 	bl	8004cd6 <__multiply>
 8004e76:	6020      	str	r0, [r4, #0]
 8004e78:	f8c0 8000 	str.w	r8, [r0]
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	e7e4      	b.n	8004e4a <__pow5mult+0x5a>
 8004e80:	4638      	mov	r0, r7
 8004e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e86:	bf00      	nop
 8004e88:	08005980 	.word	0x08005980

08004e8c <__lshift>:
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	460c      	mov	r4, r1
 8004e92:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	6849      	ldr	r1, [r1, #4]
 8004e9a:	eb0a 0903 	add.w	r9, sl, r3
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	4616      	mov	r6, r2
 8004ea4:	f109 0501 	add.w	r5, r9, #1
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	db31      	blt.n	8004f10 <__lshift+0x84>
 8004eac:	4638      	mov	r0, r7
 8004eae:	f7ff fe35 	bl	8004b1c <_Balloc>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	4680      	mov	r8, r0
 8004eb6:	f100 0314 	add.w	r3, r0, #20
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4552      	cmp	r2, sl
 8004ebe:	db2a      	blt.n	8004f16 <__lshift+0x8a>
 8004ec0:	6920      	ldr	r0, [r4, #16]
 8004ec2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ec6:	f104 0114 	add.w	r1, r4, #20
 8004eca:	f016 021f 	ands.w	r2, r6, #31
 8004ece:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004ed2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004ed6:	d022      	beq.n	8004f1e <__lshift+0x92>
 8004ed8:	f1c2 0c20 	rsb	ip, r2, #32
 8004edc:	2000      	movs	r0, #0
 8004ede:	680e      	ldr	r6, [r1, #0]
 8004ee0:	4096      	lsls	r6, r2
 8004ee2:	4330      	orrs	r0, r6
 8004ee4:	f843 0b04 	str.w	r0, [r3], #4
 8004ee8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004eec:	458e      	cmp	lr, r1
 8004eee:	fa20 f00c 	lsr.w	r0, r0, ip
 8004ef2:	d8f4      	bhi.n	8004ede <__lshift+0x52>
 8004ef4:	6018      	str	r0, [r3, #0]
 8004ef6:	b108      	cbz	r0, 8004efc <__lshift+0x70>
 8004ef8:	f109 0502 	add.w	r5, r9, #2
 8004efc:	3d01      	subs	r5, #1
 8004efe:	4638      	mov	r0, r7
 8004f00:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f04:	4621      	mov	r1, r4
 8004f06:	f7ff fe3d 	bl	8004b84 <_Bfree>
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	3101      	adds	r1, #1
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	e7c8      	b.n	8004ea8 <__lshift+0x1c>
 8004f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f1a:	3201      	adds	r2, #1
 8004f1c:	e7ce      	b.n	8004ebc <__lshift+0x30>
 8004f1e:	3b04      	subs	r3, #4
 8004f20:	f851 2b04 	ldr.w	r2, [r1], #4
 8004f24:	f843 2f04 	str.w	r2, [r3, #4]!
 8004f28:	458e      	cmp	lr, r1
 8004f2a:	d8f9      	bhi.n	8004f20 <__lshift+0x94>
 8004f2c:	e7e6      	b.n	8004efc <__lshift+0x70>

08004f2e <__mcmp>:
 8004f2e:	6903      	ldr	r3, [r0, #16]
 8004f30:	690a      	ldr	r2, [r1, #16]
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	b530      	push	{r4, r5, lr}
 8004f36:	d10c      	bne.n	8004f52 <__mcmp+0x24>
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	3014      	adds	r0, #20
 8004f3c:	3114      	adds	r1, #20
 8004f3e:	1884      	adds	r4, r0, r2
 8004f40:	4411      	add	r1, r2
 8004f42:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f46:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f4a:	4295      	cmp	r5, r2
 8004f4c:	d003      	beq.n	8004f56 <__mcmp+0x28>
 8004f4e:	d305      	bcc.n	8004f5c <__mcmp+0x2e>
 8004f50:	2301      	movs	r3, #1
 8004f52:	4618      	mov	r0, r3
 8004f54:	bd30      	pop	{r4, r5, pc}
 8004f56:	42a0      	cmp	r0, r4
 8004f58:	d3f3      	bcc.n	8004f42 <__mcmp+0x14>
 8004f5a:	e7fa      	b.n	8004f52 <__mcmp+0x24>
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f60:	e7f7      	b.n	8004f52 <__mcmp+0x24>

08004f62 <__mdiff>:
 8004f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f66:	460d      	mov	r5, r1
 8004f68:	4607      	mov	r7, r0
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	4614      	mov	r4, r2
 8004f70:	f7ff ffdd 	bl	8004f2e <__mcmp>
 8004f74:	1e06      	subs	r6, r0, #0
 8004f76:	d108      	bne.n	8004f8a <__mdiff+0x28>
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f7ff fdce 	bl	8004b1c <_Balloc>
 8004f80:	2301      	movs	r3, #1
 8004f82:	6103      	str	r3, [r0, #16]
 8004f84:	6146      	str	r6, [r0, #20]
 8004f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8a:	bfa4      	itt	ge
 8004f8c:	4623      	movge	r3, r4
 8004f8e:	462c      	movge	r4, r5
 8004f90:	4638      	mov	r0, r7
 8004f92:	6861      	ldr	r1, [r4, #4]
 8004f94:	bfa6      	itte	ge
 8004f96:	461d      	movge	r5, r3
 8004f98:	2600      	movge	r6, #0
 8004f9a:	2601      	movlt	r6, #1
 8004f9c:	f7ff fdbe 	bl	8004b1c <_Balloc>
 8004fa0:	692b      	ldr	r3, [r5, #16]
 8004fa2:	60c6      	str	r6, [r0, #12]
 8004fa4:	6926      	ldr	r6, [r4, #16]
 8004fa6:	f105 0914 	add.w	r9, r5, #20
 8004faa:	f104 0214 	add.w	r2, r4, #20
 8004fae:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004fb2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004fb6:	f100 0514 	add.w	r5, r0, #20
 8004fba:	f04f 0c00 	mov.w	ip, #0
 8004fbe:	f852 ab04 	ldr.w	sl, [r2], #4
 8004fc2:	f859 4b04 	ldr.w	r4, [r9], #4
 8004fc6:	fa1c f18a 	uxtah	r1, ip, sl
 8004fca:	b2a3      	uxth	r3, r4
 8004fcc:	1ac9      	subs	r1, r1, r3
 8004fce:	0c23      	lsrs	r3, r4, #16
 8004fd0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004fd4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004fd8:	b289      	uxth	r1, r1
 8004fda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004fde:	45c8      	cmp	r8, r9
 8004fe0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004fe4:	4696      	mov	lr, r2
 8004fe6:	f845 3b04 	str.w	r3, [r5], #4
 8004fea:	d8e8      	bhi.n	8004fbe <__mdiff+0x5c>
 8004fec:	45be      	cmp	lr, r7
 8004fee:	d305      	bcc.n	8004ffc <__mdiff+0x9a>
 8004ff0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004ff4:	b18b      	cbz	r3, 800501a <__mdiff+0xb8>
 8004ff6:	6106      	str	r6, [r0, #16]
 8004ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffc:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005000:	fa1c f381 	uxtah	r3, ip, r1
 8005004:	141a      	asrs	r2, r3, #16
 8005006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800500a:	b29b      	uxth	r3, r3
 800500c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005010:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005014:	f845 3b04 	str.w	r3, [r5], #4
 8005018:	e7e8      	b.n	8004fec <__mdiff+0x8a>
 800501a:	3e01      	subs	r6, #1
 800501c:	e7e8      	b.n	8004ff0 <__mdiff+0x8e>

0800501e <__d2b>:
 800501e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005022:	460e      	mov	r6, r1
 8005024:	2101      	movs	r1, #1
 8005026:	ec59 8b10 	vmov	r8, r9, d0
 800502a:	4615      	mov	r5, r2
 800502c:	f7ff fd76 	bl	8004b1c <_Balloc>
 8005030:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005034:	4607      	mov	r7, r0
 8005036:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800503a:	bb34      	cbnz	r4, 800508a <__d2b+0x6c>
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	f1b8 0f00 	cmp.w	r8, #0
 8005042:	d027      	beq.n	8005094 <__d2b+0x76>
 8005044:	a802      	add	r0, sp, #8
 8005046:	f840 8d08 	str.w	r8, [r0, #-8]!
 800504a:	f7ff fe0c 	bl	8004c66 <__lo0bits>
 800504e:	9900      	ldr	r1, [sp, #0]
 8005050:	b1f0      	cbz	r0, 8005090 <__d2b+0x72>
 8005052:	9a01      	ldr	r2, [sp, #4]
 8005054:	f1c0 0320 	rsb	r3, r0, #32
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	430b      	orrs	r3, r1
 800505e:	40c2      	lsrs	r2, r0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	9201      	str	r2, [sp, #4]
 8005064:	9b01      	ldr	r3, [sp, #4]
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf14      	ite	ne
 800506c:	2102      	movne	r1, #2
 800506e:	2101      	moveq	r1, #1
 8005070:	6139      	str	r1, [r7, #16]
 8005072:	b1c4      	cbz	r4, 80050a6 <__d2b+0x88>
 8005074:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005078:	4404      	add	r4, r0
 800507a:	6034      	str	r4, [r6, #0]
 800507c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005080:	6028      	str	r0, [r5, #0]
 8005082:	4638      	mov	r0, r7
 8005084:	b003      	add	sp, #12
 8005086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800508a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800508e:	e7d5      	b.n	800503c <__d2b+0x1e>
 8005090:	6179      	str	r1, [r7, #20]
 8005092:	e7e7      	b.n	8005064 <__d2b+0x46>
 8005094:	a801      	add	r0, sp, #4
 8005096:	f7ff fde6 	bl	8004c66 <__lo0bits>
 800509a:	9b01      	ldr	r3, [sp, #4]
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	2101      	movs	r1, #1
 80050a0:	6139      	str	r1, [r7, #16]
 80050a2:	3020      	adds	r0, #32
 80050a4:	e7e5      	b.n	8005072 <__d2b+0x54>
 80050a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80050aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80050ae:	6030      	str	r0, [r6, #0]
 80050b0:	6918      	ldr	r0, [r3, #16]
 80050b2:	f7ff fdb9 	bl	8004c28 <__hi0bits>
 80050b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80050ba:	e7e1      	b.n	8005080 <__d2b+0x62>

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4c06      	ldr	r4, [pc, #24]	; (80050d8 <_sbrk_r+0x1c>)
 80050c0:	2300      	movs	r3, #0
 80050c2:	4605      	mov	r5, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	f000 fb7e 	bl	80057c8 <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200007f0 	.word	0x200007f0

080050dc <__ssprint_r>:
 80050dc:	6893      	ldr	r3, [r2, #8]
 80050de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e2:	4681      	mov	r9, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	4617      	mov	r7, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d060      	beq.n	80051ae <__ssprint_r+0xd2>
 80050ec:	f04f 0b00 	mov.w	fp, #0
 80050f0:	f8d2 a000 	ldr.w	sl, [r2]
 80050f4:	465e      	mov	r6, fp
 80050f6:	b356      	cbz	r6, 800514e <__ssprint_r+0x72>
 80050f8:	68a3      	ldr	r3, [r4, #8]
 80050fa:	429e      	cmp	r6, r3
 80050fc:	d344      	bcc.n	8005188 <__ssprint_r+0xac>
 80050fe:	89a2      	ldrh	r2, [r4, #12]
 8005100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005104:	d03e      	beq.n	8005184 <__ssprint_r+0xa8>
 8005106:	6825      	ldr	r5, [r4, #0]
 8005108:	6921      	ldr	r1, [r4, #16]
 800510a:	eba5 0801 	sub.w	r8, r5, r1
 800510e:	6965      	ldr	r5, [r4, #20]
 8005110:	2302      	movs	r3, #2
 8005112:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005116:	fb95 f5f3 	sdiv	r5, r5, r3
 800511a:	f108 0301 	add.w	r3, r8, #1
 800511e:	4433      	add	r3, r6
 8005120:	429d      	cmp	r5, r3
 8005122:	bf38      	it	cc
 8005124:	461d      	movcc	r5, r3
 8005126:	0553      	lsls	r3, r2, #21
 8005128:	d546      	bpl.n	80051b8 <__ssprint_r+0xdc>
 800512a:	4629      	mov	r1, r5
 800512c:	4648      	mov	r0, r9
 800512e:	f7ff facf 	bl	80046d0 <_malloc_r>
 8005132:	b998      	cbnz	r0, 800515c <__ssprint_r+0x80>
 8005134:	230c      	movs	r3, #12
 8005136:	f8c9 3000 	str.w	r3, [r9]
 800513a:	89a3      	ldrh	r3, [r4, #12]
 800513c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	607b      	str	r3, [r7, #4]
 8005148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800514c:	e031      	b.n	80051b2 <__ssprint_r+0xd6>
 800514e:	f8da b000 	ldr.w	fp, [sl]
 8005152:	f8da 6004 	ldr.w	r6, [sl, #4]
 8005156:	f10a 0a08 	add.w	sl, sl, #8
 800515a:	e7cc      	b.n	80050f6 <__ssprint_r+0x1a>
 800515c:	4642      	mov	r2, r8
 800515e:	6921      	ldr	r1, [r4, #16]
 8005160:	9001      	str	r0, [sp, #4]
 8005162:	f7ff fcc3 	bl	8004aec <memcpy>
 8005166:	89a2      	ldrh	r2, [r4, #12]
 8005168:	9b01      	ldr	r3, [sp, #4]
 800516a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800516e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005172:	81a2      	strh	r2, [r4, #12]
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	6165      	str	r5, [r4, #20]
 8005178:	4443      	add	r3, r8
 800517a:	eba5 0508 	sub.w	r5, r5, r8
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	60a5      	str	r5, [r4, #8]
 8005182:	4633      	mov	r3, r6
 8005184:	429e      	cmp	r6, r3
 8005186:	d200      	bcs.n	800518a <__ssprint_r+0xae>
 8005188:	4633      	mov	r3, r6
 800518a:	461a      	mov	r2, r3
 800518c:	4659      	mov	r1, fp
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	f000 f971 	bl	8005478 <memmove>
 8005196:	68a2      	ldr	r2, [r4, #8]
 8005198:	9b01      	ldr	r3, [sp, #4]
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	60a2      	str	r2, [r4, #8]
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	4413      	add	r3, r2
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1b9e      	subs	r6, r3, r6
 80051a8:	60be      	str	r6, [r7, #8]
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d1cf      	bne.n	800514e <__ssprint_r+0x72>
 80051ae:	2000      	movs	r0, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	b003      	add	sp, #12
 80051b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b8:	462a      	mov	r2, r5
 80051ba:	4648      	mov	r0, r9
 80051bc:	f000 f976 	bl	80054ac <_realloc_r>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d1d6      	bne.n	8005174 <__ssprint_r+0x98>
 80051c6:	6921      	ldr	r1, [r4, #16]
 80051c8:	4648      	mov	r0, r9
 80051ca:	f000 f885 	bl	80052d8 <_free_r>
 80051ce:	e7b1      	b.n	8005134 <__ssprint_r+0x58>

080051d0 <_calloc_r>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	4351      	muls	r1, r2
 80051d4:	f7ff fa7c 	bl	80046d0 <_malloc_r>
 80051d8:	4604      	mov	r4, r0
 80051da:	b198      	cbz	r0, 8005204 <_calloc_r+0x34>
 80051dc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80051e0:	f022 0203 	bic.w	r2, r2, #3
 80051e4:	3a04      	subs	r2, #4
 80051e6:	2a24      	cmp	r2, #36	; 0x24
 80051e8:	d81b      	bhi.n	8005222 <_calloc_r+0x52>
 80051ea:	2a13      	cmp	r2, #19
 80051ec:	d917      	bls.n	800521e <_calloc_r+0x4e>
 80051ee:	2100      	movs	r1, #0
 80051f0:	2a1b      	cmp	r2, #27
 80051f2:	6001      	str	r1, [r0, #0]
 80051f4:	6041      	str	r1, [r0, #4]
 80051f6:	d807      	bhi.n	8005208 <_calloc_r+0x38>
 80051f8:	f100 0308 	add.w	r3, r0, #8
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	4620      	mov	r0, r4
 8005206:	bd10      	pop	{r4, pc}
 8005208:	2a24      	cmp	r2, #36	; 0x24
 800520a:	6081      	str	r1, [r0, #8]
 800520c:	60c1      	str	r1, [r0, #12]
 800520e:	bf11      	iteee	ne
 8005210:	f100 0310 	addne.w	r3, r0, #16
 8005214:	6101      	streq	r1, [r0, #16]
 8005216:	f100 0318 	addeq.w	r3, r0, #24
 800521a:	6141      	streq	r1, [r0, #20]
 800521c:	e7ee      	b.n	80051fc <_calloc_r+0x2c>
 800521e:	4603      	mov	r3, r0
 8005220:	e7ec      	b.n	80051fc <_calloc_r+0x2c>
 8005222:	2100      	movs	r1, #0
 8005224:	f7fd fbd4 	bl	80029d0 <memset>
 8005228:	e7ec      	b.n	8005204 <_calloc_r+0x34>
	...

0800522c <_malloc_trim_r>:
 800522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005230:	4f25      	ldr	r7, [pc, #148]	; (80052c8 <_malloc_trim_r+0x9c>)
 8005232:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80052d4 <_malloc_trim_r+0xa8>
 8005236:	4689      	mov	r9, r1
 8005238:	4606      	mov	r6, r0
 800523a:	f7ff fc63 	bl	8004b04 <__malloc_lock>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	685d      	ldr	r5, [r3, #4]
 8005242:	f1a8 0411 	sub.w	r4, r8, #17
 8005246:	f025 0503 	bic.w	r5, r5, #3
 800524a:	eba4 0409 	sub.w	r4, r4, r9
 800524e:	442c      	add	r4, r5
 8005250:	fbb4 f4f8 	udiv	r4, r4, r8
 8005254:	3c01      	subs	r4, #1
 8005256:	fb08 f404 	mul.w	r4, r8, r4
 800525a:	4544      	cmp	r4, r8
 800525c:	da05      	bge.n	800526a <_malloc_trim_r+0x3e>
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff fc56 	bl	8004b10 <__malloc_unlock>
 8005264:	2000      	movs	r0, #0
 8005266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526a:	2100      	movs	r1, #0
 800526c:	4630      	mov	r0, r6
 800526e:	f7ff ff25 	bl	80050bc <_sbrk_r>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	442b      	add	r3, r5
 8005276:	4298      	cmp	r0, r3
 8005278:	d1f1      	bne.n	800525e <_malloc_trim_r+0x32>
 800527a:	4261      	negs	r1, r4
 800527c:	4630      	mov	r0, r6
 800527e:	f7ff ff1d 	bl	80050bc <_sbrk_r>
 8005282:	3001      	adds	r0, #1
 8005284:	d110      	bne.n	80052a8 <_malloc_trim_r+0x7c>
 8005286:	2100      	movs	r1, #0
 8005288:	4630      	mov	r0, r6
 800528a:	f7ff ff17 	bl	80050bc <_sbrk_r>
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	1a83      	subs	r3, r0, r2
 8005292:	2b0f      	cmp	r3, #15
 8005294:	dde3      	ble.n	800525e <_malloc_trim_r+0x32>
 8005296:	490d      	ldr	r1, [pc, #52]	; (80052cc <_malloc_trim_r+0xa0>)
 8005298:	6809      	ldr	r1, [r1, #0]
 800529a:	1a40      	subs	r0, r0, r1
 800529c:	490c      	ldr	r1, [pc, #48]	; (80052d0 <_malloc_trim_r+0xa4>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6008      	str	r0, [r1, #0]
 80052a4:	6053      	str	r3, [r2, #4]
 80052a6:	e7da      	b.n	800525e <_malloc_trim_r+0x32>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <_malloc_trim_r+0xa4>)
 80052ac:	1b2d      	subs	r5, r5, r4
 80052ae:	f045 0501 	orr.w	r5, r5, #1
 80052b2:	605d      	str	r5, [r3, #4]
 80052b4:	6813      	ldr	r3, [r2, #0]
 80052b6:	4630      	mov	r0, r6
 80052b8:	1b1c      	subs	r4, r3, r4
 80052ba:	6014      	str	r4, [r2, #0]
 80052bc:	f7ff fc28 	bl	8004b10 <__malloc_unlock>
 80052c0:	2001      	movs	r0, #1
 80052c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052c6:	bf00      	nop
 80052c8:	20000108 	.word	0x20000108
 80052cc:	20000510 	.word	0x20000510
 80052d0:	200006b4 	.word	0x200006b4
 80052d4:	00000080 	.word	0x00000080

080052d8 <_free_r>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	4604      	mov	r4, r0
 80052de:	4688      	mov	r8, r1
 80052e0:	2900      	cmp	r1, #0
 80052e2:	f000 80ab 	beq.w	800543c <_free_r+0x164>
 80052e6:	f7ff fc0d 	bl	8004b04 <__malloc_lock>
 80052ea:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80052ee:	4d54      	ldr	r5, [pc, #336]	; (8005440 <_free_r+0x168>)
 80052f0:	f022 0001 	bic.w	r0, r2, #1
 80052f4:	f1a8 0308 	sub.w	r3, r8, #8
 80052f8:	181f      	adds	r7, r3, r0
 80052fa:	68a9      	ldr	r1, [r5, #8]
 80052fc:	687e      	ldr	r6, [r7, #4]
 80052fe:	428f      	cmp	r7, r1
 8005300:	f026 0603 	bic.w	r6, r6, #3
 8005304:	f002 0201 	and.w	r2, r2, #1
 8005308:	d11b      	bne.n	8005342 <_free_r+0x6a>
 800530a:	4430      	add	r0, r6
 800530c:	b93a      	cbnz	r2, 800531e <_free_r+0x46>
 800530e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	4410      	add	r0, r2
 8005316:	6899      	ldr	r1, [r3, #8]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	60ca      	str	r2, [r1, #12]
 800531c:	6091      	str	r1, [r2, #8]
 800531e:	f040 0201 	orr.w	r2, r0, #1
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	60ab      	str	r3, [r5, #8]
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <_free_r+0x16c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4298      	cmp	r0, r3
 800532c:	d304      	bcc.n	8005338 <_free_r+0x60>
 800532e:	4b46      	ldr	r3, [pc, #280]	; (8005448 <_free_r+0x170>)
 8005330:	4620      	mov	r0, r4
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	f7ff ff7a 	bl	800522c <_malloc_trim_r>
 8005338:	4620      	mov	r0, r4
 800533a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	f7ff bbe7 	b.w	8004b10 <__malloc_unlock>
 8005342:	607e      	str	r6, [r7, #4]
 8005344:	2a00      	cmp	r2, #0
 8005346:	d139      	bne.n	80053bc <_free_r+0xe4>
 8005348:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800534c:	1a5b      	subs	r3, r3, r1
 800534e:	4408      	add	r0, r1
 8005350:	6899      	ldr	r1, [r3, #8]
 8005352:	f105 0e08 	add.w	lr, r5, #8
 8005356:	4571      	cmp	r1, lr
 8005358:	d032      	beq.n	80053c0 <_free_r+0xe8>
 800535a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800535e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005362:	f8ce 1008 	str.w	r1, [lr, #8]
 8005366:	19b9      	adds	r1, r7, r6
 8005368:	6849      	ldr	r1, [r1, #4]
 800536a:	07c9      	lsls	r1, r1, #31
 800536c:	d40a      	bmi.n	8005384 <_free_r+0xac>
 800536e:	4430      	add	r0, r6
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	bb3a      	cbnz	r2, 80053c4 <_free_r+0xec>
 8005374:	4e35      	ldr	r6, [pc, #212]	; (800544c <_free_r+0x174>)
 8005376:	42b1      	cmp	r1, r6
 8005378:	d124      	bne.n	80053c4 <_free_r+0xec>
 800537a:	616b      	str	r3, [r5, #20]
 800537c:	612b      	str	r3, [r5, #16]
 800537e:	2201      	movs	r2, #1
 8005380:	60d9      	str	r1, [r3, #12]
 8005382:	6099      	str	r1, [r3, #8]
 8005384:	f040 0101 	orr.w	r1, r0, #1
 8005388:	6059      	str	r1, [r3, #4]
 800538a:	5018      	str	r0, [r3, r0]
 800538c:	2a00      	cmp	r2, #0
 800538e:	d1d3      	bne.n	8005338 <_free_r+0x60>
 8005390:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005394:	d21a      	bcs.n	80053cc <_free_r+0xf4>
 8005396:	08c0      	lsrs	r0, r0, #3
 8005398:	1081      	asrs	r1, r0, #2
 800539a:	2201      	movs	r2, #1
 800539c:	408a      	lsls	r2, r1
 800539e:	6869      	ldr	r1, [r5, #4]
 80053a0:	3001      	adds	r0, #1
 80053a2:	430a      	orrs	r2, r1
 80053a4:	606a      	str	r2, [r5, #4]
 80053a6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80053aa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80053ae:	6099      	str	r1, [r3, #8]
 80053b0:	3a08      	subs	r2, #8
 80053b2:	60da      	str	r2, [r3, #12]
 80053b4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80053b8:	60cb      	str	r3, [r1, #12]
 80053ba:	e7bd      	b.n	8005338 <_free_r+0x60>
 80053bc:	2200      	movs	r2, #0
 80053be:	e7d2      	b.n	8005366 <_free_r+0x8e>
 80053c0:	2201      	movs	r2, #1
 80053c2:	e7d0      	b.n	8005366 <_free_r+0x8e>
 80053c4:	68fe      	ldr	r6, [r7, #12]
 80053c6:	60ce      	str	r6, [r1, #12]
 80053c8:	60b1      	str	r1, [r6, #8]
 80053ca:	e7db      	b.n	8005384 <_free_r+0xac>
 80053cc:	0a42      	lsrs	r2, r0, #9
 80053ce:	2a04      	cmp	r2, #4
 80053d0:	d813      	bhi.n	80053fa <_free_r+0x122>
 80053d2:	0982      	lsrs	r2, r0, #6
 80053d4:	3238      	adds	r2, #56	; 0x38
 80053d6:	1c51      	adds	r1, r2, #1
 80053d8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80053dc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80053e0:	428e      	cmp	r6, r1
 80053e2:	d124      	bne.n	800542e <_free_r+0x156>
 80053e4:	2001      	movs	r0, #1
 80053e6:	1092      	asrs	r2, r2, #2
 80053e8:	fa00 f202 	lsl.w	r2, r0, r2
 80053ec:	6868      	ldr	r0, [r5, #4]
 80053ee:	4302      	orrs	r2, r0
 80053f0:	606a      	str	r2, [r5, #4]
 80053f2:	60de      	str	r6, [r3, #12]
 80053f4:	6099      	str	r1, [r3, #8]
 80053f6:	60b3      	str	r3, [r6, #8]
 80053f8:	e7de      	b.n	80053b8 <_free_r+0xe0>
 80053fa:	2a14      	cmp	r2, #20
 80053fc:	d801      	bhi.n	8005402 <_free_r+0x12a>
 80053fe:	325b      	adds	r2, #91	; 0x5b
 8005400:	e7e9      	b.n	80053d6 <_free_r+0xfe>
 8005402:	2a54      	cmp	r2, #84	; 0x54
 8005404:	d802      	bhi.n	800540c <_free_r+0x134>
 8005406:	0b02      	lsrs	r2, r0, #12
 8005408:	326e      	adds	r2, #110	; 0x6e
 800540a:	e7e4      	b.n	80053d6 <_free_r+0xfe>
 800540c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005410:	d802      	bhi.n	8005418 <_free_r+0x140>
 8005412:	0bc2      	lsrs	r2, r0, #15
 8005414:	3277      	adds	r2, #119	; 0x77
 8005416:	e7de      	b.n	80053d6 <_free_r+0xfe>
 8005418:	f240 5154 	movw	r1, #1364	; 0x554
 800541c:	428a      	cmp	r2, r1
 800541e:	bf9a      	itte	ls
 8005420:	0c82      	lsrls	r2, r0, #18
 8005422:	327c      	addls	r2, #124	; 0x7c
 8005424:	227e      	movhi	r2, #126	; 0x7e
 8005426:	e7d6      	b.n	80053d6 <_free_r+0xfe>
 8005428:	6889      	ldr	r1, [r1, #8]
 800542a:	428e      	cmp	r6, r1
 800542c:	d004      	beq.n	8005438 <_free_r+0x160>
 800542e:	684a      	ldr	r2, [r1, #4]
 8005430:	f022 0203 	bic.w	r2, r2, #3
 8005434:	4290      	cmp	r0, r2
 8005436:	d3f7      	bcc.n	8005428 <_free_r+0x150>
 8005438:	68ce      	ldr	r6, [r1, #12]
 800543a:	e7da      	b.n	80053f2 <_free_r+0x11a>
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	20000108 	.word	0x20000108
 8005444:	20000514 	.word	0x20000514
 8005448:	200006e4 	.word	0x200006e4
 800544c:	20000110 	.word	0x20000110

08005450 <__retarget_lock_acquire_recursive>:
 8005450:	4770      	bx	lr

08005452 <__retarget_lock_release_recursive>:
 8005452:	4770      	bx	lr

08005454 <__ascii_mbtowc>:
 8005454:	b082      	sub	sp, #8
 8005456:	b901      	cbnz	r1, 800545a <__ascii_mbtowc+0x6>
 8005458:	a901      	add	r1, sp, #4
 800545a:	b142      	cbz	r2, 800546e <__ascii_mbtowc+0x1a>
 800545c:	b14b      	cbz	r3, 8005472 <__ascii_mbtowc+0x1e>
 800545e:	7813      	ldrb	r3, [r2, #0]
 8005460:	600b      	str	r3, [r1, #0]
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	1c10      	adds	r0, r2, #0
 8005466:	bf18      	it	ne
 8005468:	2001      	movne	r0, #1
 800546a:	b002      	add	sp, #8
 800546c:	4770      	bx	lr
 800546e:	4610      	mov	r0, r2
 8005470:	e7fb      	b.n	800546a <__ascii_mbtowc+0x16>
 8005472:	f06f 0001 	mvn.w	r0, #1
 8005476:	e7f8      	b.n	800546a <__ascii_mbtowc+0x16>

08005478 <memmove>:
 8005478:	4288      	cmp	r0, r1
 800547a:	b510      	push	{r4, lr}
 800547c:	eb01 0302 	add.w	r3, r1, r2
 8005480:	d803      	bhi.n	800548a <memmove+0x12>
 8005482:	1e42      	subs	r2, r0, #1
 8005484:	4299      	cmp	r1, r3
 8005486:	d10c      	bne.n	80054a2 <memmove+0x2a>
 8005488:	bd10      	pop	{r4, pc}
 800548a:	4298      	cmp	r0, r3
 800548c:	d2f9      	bcs.n	8005482 <memmove+0xa>
 800548e:	1881      	adds	r1, r0, r2
 8005490:	1ad2      	subs	r2, r2, r3
 8005492:	42d3      	cmn	r3, r2
 8005494:	d100      	bne.n	8005498 <memmove+0x20>
 8005496:	bd10      	pop	{r4, pc}
 8005498:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800549c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80054a0:	e7f7      	b.n	8005492 <memmove+0x1a>
 80054a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80054aa:	e7eb      	b.n	8005484 <memmove+0xc>

080054ac <_realloc_r>:
 80054ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	4682      	mov	sl, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	b929      	cbnz	r1, 80054c2 <_realloc_r+0x16>
 80054b6:	4611      	mov	r1, r2
 80054b8:	b003      	add	sp, #12
 80054ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054be:	f7ff b907 	b.w	80046d0 <_malloc_r>
 80054c2:	9201      	str	r2, [sp, #4]
 80054c4:	f7ff fb1e 	bl	8004b04 <__malloc_lock>
 80054c8:	9a01      	ldr	r2, [sp, #4]
 80054ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80054ce:	f102 080b 	add.w	r8, r2, #11
 80054d2:	f1b8 0f16 	cmp.w	r8, #22
 80054d6:	f1a4 0908 	sub.w	r9, r4, #8
 80054da:	f025 0603 	bic.w	r6, r5, #3
 80054de:	d90a      	bls.n	80054f6 <_realloc_r+0x4a>
 80054e0:	f038 0807 	bics.w	r8, r8, #7
 80054e4:	d509      	bpl.n	80054fa <_realloc_r+0x4e>
 80054e6:	230c      	movs	r3, #12
 80054e8:	f8ca 3000 	str.w	r3, [sl]
 80054ec:	2700      	movs	r7, #0
 80054ee:	4638      	mov	r0, r7
 80054f0:	b003      	add	sp, #12
 80054f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f6:	f04f 0810 	mov.w	r8, #16
 80054fa:	4590      	cmp	r8, r2
 80054fc:	d3f3      	bcc.n	80054e6 <_realloc_r+0x3a>
 80054fe:	45b0      	cmp	r8, r6
 8005500:	f340 8145 	ble.w	800578e <_realloc_r+0x2e2>
 8005504:	4ba8      	ldr	r3, [pc, #672]	; (80057a8 <_realloc_r+0x2fc>)
 8005506:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800550a:	eb09 0106 	add.w	r1, r9, r6
 800550e:	4571      	cmp	r1, lr
 8005510:	469b      	mov	fp, r3
 8005512:	684b      	ldr	r3, [r1, #4]
 8005514:	d005      	beq.n	8005522 <_realloc_r+0x76>
 8005516:	f023 0001 	bic.w	r0, r3, #1
 800551a:	4408      	add	r0, r1
 800551c:	6840      	ldr	r0, [r0, #4]
 800551e:	07c7      	lsls	r7, r0, #31
 8005520:	d447      	bmi.n	80055b2 <_realloc_r+0x106>
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	4571      	cmp	r1, lr
 8005528:	eb06 0703 	add.w	r7, r6, r3
 800552c:	d119      	bne.n	8005562 <_realloc_r+0xb6>
 800552e:	f108 0010 	add.w	r0, r8, #16
 8005532:	4287      	cmp	r7, r0
 8005534:	db3f      	blt.n	80055b6 <_realloc_r+0x10a>
 8005536:	eb09 0308 	add.w	r3, r9, r8
 800553a:	eba7 0708 	sub.w	r7, r7, r8
 800553e:	f047 0701 	orr.w	r7, r7, #1
 8005542:	f8cb 3008 	str.w	r3, [fp, #8]
 8005546:	605f      	str	r7, [r3, #4]
 8005548:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	ea43 0308 	orr.w	r3, r3, r8
 8005554:	f844 3c04 	str.w	r3, [r4, #-4]
 8005558:	4650      	mov	r0, sl
 800555a:	f7ff fad9 	bl	8004b10 <__malloc_unlock>
 800555e:	4627      	mov	r7, r4
 8005560:	e7c5      	b.n	80054ee <_realloc_r+0x42>
 8005562:	45b8      	cmp	r8, r7
 8005564:	dc27      	bgt.n	80055b6 <_realloc_r+0x10a>
 8005566:	68cb      	ldr	r3, [r1, #12]
 8005568:	688a      	ldr	r2, [r1, #8]
 800556a:	60d3      	str	r3, [r2, #12]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	eba7 0008 	sub.w	r0, r7, r8
 8005572:	280f      	cmp	r0, #15
 8005574:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005578:	eb09 0207 	add.w	r2, r9, r7
 800557c:	f240 8109 	bls.w	8005792 <_realloc_r+0x2e6>
 8005580:	eb09 0108 	add.w	r1, r9, r8
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	ea43 0308 	orr.w	r3, r3, r8
 800558c:	f040 0001 	orr.w	r0, r0, #1
 8005590:	f8c9 3004 	str.w	r3, [r9, #4]
 8005594:	6048      	str	r0, [r1, #4]
 8005596:	6853      	ldr	r3, [r2, #4]
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6053      	str	r3, [r2, #4]
 800559e:	3108      	adds	r1, #8
 80055a0:	4650      	mov	r0, sl
 80055a2:	f7ff fe99 	bl	80052d8 <_free_r>
 80055a6:	4650      	mov	r0, sl
 80055a8:	f7ff fab2 	bl	8004b10 <__malloc_unlock>
 80055ac:	f109 0708 	add.w	r7, r9, #8
 80055b0:	e79d      	b.n	80054ee <_realloc_r+0x42>
 80055b2:	2300      	movs	r3, #0
 80055b4:	4619      	mov	r1, r3
 80055b6:	07e8      	lsls	r0, r5, #31
 80055b8:	f100 8084 	bmi.w	80056c4 <_realloc_r+0x218>
 80055bc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80055c0:	eba9 0505 	sub.w	r5, r9, r5
 80055c4:	6868      	ldr	r0, [r5, #4]
 80055c6:	f020 0003 	bic.w	r0, r0, #3
 80055ca:	4430      	add	r0, r6
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d076      	beq.n	80056be <_realloc_r+0x212>
 80055d0:	4571      	cmp	r1, lr
 80055d2:	d150      	bne.n	8005676 <_realloc_r+0x1ca>
 80055d4:	4403      	add	r3, r0
 80055d6:	f108 0110 	add.w	r1, r8, #16
 80055da:	428b      	cmp	r3, r1
 80055dc:	db6f      	blt.n	80056be <_realloc_r+0x212>
 80055de:	462f      	mov	r7, r5
 80055e0:	68ea      	ldr	r2, [r5, #12]
 80055e2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80055e6:	60ca      	str	r2, [r1, #12]
 80055e8:	6091      	str	r1, [r2, #8]
 80055ea:	1f32      	subs	r2, r6, #4
 80055ec:	2a24      	cmp	r2, #36	; 0x24
 80055ee:	d83b      	bhi.n	8005668 <_realloc_r+0x1bc>
 80055f0:	2a13      	cmp	r2, #19
 80055f2:	d936      	bls.n	8005662 <_realloc_r+0x1b6>
 80055f4:	6821      	ldr	r1, [r4, #0]
 80055f6:	60a9      	str	r1, [r5, #8]
 80055f8:	6861      	ldr	r1, [r4, #4]
 80055fa:	60e9      	str	r1, [r5, #12]
 80055fc:	2a1b      	cmp	r2, #27
 80055fe:	d81c      	bhi.n	800563a <_realloc_r+0x18e>
 8005600:	f105 0210 	add.w	r2, r5, #16
 8005604:	f104 0108 	add.w	r1, r4, #8
 8005608:	6808      	ldr	r0, [r1, #0]
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	6848      	ldr	r0, [r1, #4]
 800560e:	6050      	str	r0, [r2, #4]
 8005610:	6889      	ldr	r1, [r1, #8]
 8005612:	6091      	str	r1, [r2, #8]
 8005614:	eb05 0208 	add.w	r2, r5, r8
 8005618:	eba3 0308 	sub.w	r3, r3, r8
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	f8cb 2008 	str.w	r2, [fp, #8]
 8005624:	6053      	str	r3, [r2, #4]
 8005626:	686b      	ldr	r3, [r5, #4]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	ea43 0308 	orr.w	r3, r3, r8
 8005630:	606b      	str	r3, [r5, #4]
 8005632:	4650      	mov	r0, sl
 8005634:	f7ff fa6c 	bl	8004b10 <__malloc_unlock>
 8005638:	e759      	b.n	80054ee <_realloc_r+0x42>
 800563a:	68a1      	ldr	r1, [r4, #8]
 800563c:	6129      	str	r1, [r5, #16]
 800563e:	68e1      	ldr	r1, [r4, #12]
 8005640:	6169      	str	r1, [r5, #20]
 8005642:	2a24      	cmp	r2, #36	; 0x24
 8005644:	bf01      	itttt	eq
 8005646:	6922      	ldreq	r2, [r4, #16]
 8005648:	61aa      	streq	r2, [r5, #24]
 800564a:	6960      	ldreq	r0, [r4, #20]
 800564c:	61e8      	streq	r0, [r5, #28]
 800564e:	bf19      	ittee	ne
 8005650:	f105 0218 	addne.w	r2, r5, #24
 8005654:	f104 0110 	addne.w	r1, r4, #16
 8005658:	f105 0220 	addeq.w	r2, r5, #32
 800565c:	f104 0118 	addeq.w	r1, r4, #24
 8005660:	e7d2      	b.n	8005608 <_realloc_r+0x15c>
 8005662:	463a      	mov	r2, r7
 8005664:	4621      	mov	r1, r4
 8005666:	e7cf      	b.n	8005608 <_realloc_r+0x15c>
 8005668:	4621      	mov	r1, r4
 800566a:	4638      	mov	r0, r7
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	f7ff ff03 	bl	8005478 <memmove>
 8005672:	9b01      	ldr	r3, [sp, #4]
 8005674:	e7ce      	b.n	8005614 <_realloc_r+0x168>
 8005676:	18c7      	adds	r7, r0, r3
 8005678:	45b8      	cmp	r8, r7
 800567a:	dc20      	bgt.n	80056be <_realloc_r+0x212>
 800567c:	68cb      	ldr	r3, [r1, #12]
 800567e:	688a      	ldr	r2, [r1, #8]
 8005680:	60d3      	str	r3, [r2, #12]
 8005682:	609a      	str	r2, [r3, #8]
 8005684:	4628      	mov	r0, r5
 8005686:	68eb      	ldr	r3, [r5, #12]
 8005688:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800568c:	60d3      	str	r3, [r2, #12]
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	1f32      	subs	r2, r6, #4
 8005692:	2a24      	cmp	r2, #36	; 0x24
 8005694:	d842      	bhi.n	800571c <_realloc_r+0x270>
 8005696:	2a13      	cmp	r2, #19
 8005698:	d93e      	bls.n	8005718 <_realloc_r+0x26c>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	60ab      	str	r3, [r5, #8]
 800569e:	6863      	ldr	r3, [r4, #4]
 80056a0:	60eb      	str	r3, [r5, #12]
 80056a2:	2a1b      	cmp	r2, #27
 80056a4:	d824      	bhi.n	80056f0 <_realloc_r+0x244>
 80056a6:	f105 0010 	add.w	r0, r5, #16
 80056aa:	f104 0308 	add.w	r3, r4, #8
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	6002      	str	r2, [r0, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	6042      	str	r2, [r0, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	6083      	str	r3, [r0, #8]
 80056ba:	46a9      	mov	r9, r5
 80056bc:	e757      	b.n	800556e <_realloc_r+0xc2>
 80056be:	4580      	cmp	r8, r0
 80056c0:	4607      	mov	r7, r0
 80056c2:	dddf      	ble.n	8005684 <_realloc_r+0x1d8>
 80056c4:	4611      	mov	r1, r2
 80056c6:	4650      	mov	r0, sl
 80056c8:	f7ff f802 	bl	80046d0 <_malloc_r>
 80056cc:	4607      	mov	r7, r0
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d0af      	beq.n	8005632 <_realloc_r+0x186>
 80056d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	f1a0 0208 	sub.w	r2, r0, #8
 80056de:	444b      	add	r3, r9
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d11f      	bne.n	8005724 <_realloc_r+0x278>
 80056e4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80056e8:	f027 0703 	bic.w	r7, r7, #3
 80056ec:	4437      	add	r7, r6
 80056ee:	e73e      	b.n	800556e <_realloc_r+0xc2>
 80056f0:	68a3      	ldr	r3, [r4, #8]
 80056f2:	612b      	str	r3, [r5, #16]
 80056f4:	68e3      	ldr	r3, [r4, #12]
 80056f6:	616b      	str	r3, [r5, #20]
 80056f8:	2a24      	cmp	r2, #36	; 0x24
 80056fa:	bf01      	itttt	eq
 80056fc:	6923      	ldreq	r3, [r4, #16]
 80056fe:	61ab      	streq	r3, [r5, #24]
 8005700:	6962      	ldreq	r2, [r4, #20]
 8005702:	61ea      	streq	r2, [r5, #28]
 8005704:	bf19      	ittee	ne
 8005706:	f105 0018 	addne.w	r0, r5, #24
 800570a:	f104 0310 	addne.w	r3, r4, #16
 800570e:	f105 0020 	addeq.w	r0, r5, #32
 8005712:	f104 0318 	addeq.w	r3, r4, #24
 8005716:	e7ca      	b.n	80056ae <_realloc_r+0x202>
 8005718:	4623      	mov	r3, r4
 800571a:	e7c8      	b.n	80056ae <_realloc_r+0x202>
 800571c:	4621      	mov	r1, r4
 800571e:	f7ff feab 	bl	8005478 <memmove>
 8005722:	e7ca      	b.n	80056ba <_realloc_r+0x20e>
 8005724:	1f32      	subs	r2, r6, #4
 8005726:	2a24      	cmp	r2, #36	; 0x24
 8005728:	d82d      	bhi.n	8005786 <_realloc_r+0x2da>
 800572a:	2a13      	cmp	r2, #19
 800572c:	d928      	bls.n	8005780 <_realloc_r+0x2d4>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	6003      	str	r3, [r0, #0]
 8005732:	6863      	ldr	r3, [r4, #4]
 8005734:	6043      	str	r3, [r0, #4]
 8005736:	2a1b      	cmp	r2, #27
 8005738:	d80e      	bhi.n	8005758 <_realloc_r+0x2ac>
 800573a:	f100 0308 	add.w	r3, r0, #8
 800573e:	f104 0208 	add.w	r2, r4, #8
 8005742:	6811      	ldr	r1, [r2, #0]
 8005744:	6019      	str	r1, [r3, #0]
 8005746:	6851      	ldr	r1, [r2, #4]
 8005748:	6059      	str	r1, [r3, #4]
 800574a:	6892      	ldr	r2, [r2, #8]
 800574c:	609a      	str	r2, [r3, #8]
 800574e:	4621      	mov	r1, r4
 8005750:	4650      	mov	r0, sl
 8005752:	f7ff fdc1 	bl	80052d8 <_free_r>
 8005756:	e76c      	b.n	8005632 <_realloc_r+0x186>
 8005758:	68a3      	ldr	r3, [r4, #8]
 800575a:	6083      	str	r3, [r0, #8]
 800575c:	68e3      	ldr	r3, [r4, #12]
 800575e:	60c3      	str	r3, [r0, #12]
 8005760:	2a24      	cmp	r2, #36	; 0x24
 8005762:	bf01      	itttt	eq
 8005764:	6923      	ldreq	r3, [r4, #16]
 8005766:	6103      	streq	r3, [r0, #16]
 8005768:	6961      	ldreq	r1, [r4, #20]
 800576a:	6141      	streq	r1, [r0, #20]
 800576c:	bf19      	ittee	ne
 800576e:	f100 0310 	addne.w	r3, r0, #16
 8005772:	f104 0210 	addne.w	r2, r4, #16
 8005776:	f100 0318 	addeq.w	r3, r0, #24
 800577a:	f104 0218 	addeq.w	r2, r4, #24
 800577e:	e7e0      	b.n	8005742 <_realloc_r+0x296>
 8005780:	4603      	mov	r3, r0
 8005782:	4622      	mov	r2, r4
 8005784:	e7dd      	b.n	8005742 <_realloc_r+0x296>
 8005786:	4621      	mov	r1, r4
 8005788:	f7ff fe76 	bl	8005478 <memmove>
 800578c:	e7df      	b.n	800574e <_realloc_r+0x2a2>
 800578e:	4637      	mov	r7, r6
 8005790:	e6ed      	b.n	800556e <_realloc_r+0xc2>
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	431f      	orrs	r7, r3
 8005798:	f8c9 7004 	str.w	r7, [r9, #4]
 800579c:	6853      	ldr	r3, [r2, #4]
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6053      	str	r3, [r2, #4]
 80057a4:	e6ff      	b.n	80055a6 <_realloc_r+0xfa>
 80057a6:	bf00      	nop
 80057a8:	20000108 	.word	0x20000108

080057ac <__ascii_wctomb>:
 80057ac:	b149      	cbz	r1, 80057c2 <__ascii_wctomb+0x16>
 80057ae:	2aff      	cmp	r2, #255	; 0xff
 80057b0:	bf85      	ittet	hi
 80057b2:	238a      	movhi	r3, #138	; 0x8a
 80057b4:	6003      	strhi	r3, [r0, #0]
 80057b6:	700a      	strbls	r2, [r1, #0]
 80057b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80057bc:	bf98      	it	ls
 80057be:	2001      	movls	r0, #1
 80057c0:	4770      	bx	lr
 80057c2:	4608      	mov	r0, r1
 80057c4:	4770      	bx	lr
	...

080057c8 <_sbrk>:
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <_sbrk+0x14>)
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	4602      	mov	r2, r0
 80057ce:	b909      	cbnz	r1, 80057d4 <_sbrk+0xc>
 80057d0:	4903      	ldr	r1, [pc, #12]	; (80057e0 <_sbrk+0x18>)
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	4402      	add	r2, r0
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	4770      	bx	lr
 80057dc:	200006e8 	.word	0x200006e8
 80057e0:	200007f4 	.word	0x200007f4

080057e4 <_init>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr

080057f0 <_fini>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr
