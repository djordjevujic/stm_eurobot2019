
test1_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080026b0  080026b0  000126b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000160  20000070  08002780  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d0  08002780  000201d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012f61  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025b2  00000000  00000000  00033001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005a26  00000000  00000000  000355b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b8  00000000  00000000  0003afe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a80  00000000  00000000  0003b898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b03  00000000  00000000  0003c318  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000035c9  00000000  00000000  00040e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000443e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c78  00000000  00000000  00044460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002698 	.word	0x08002698

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002698 	.word	0x08002698

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f89c 	bl	80006f4 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005cc:	f000 f85e 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 f978 	bl	8001904 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000648:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	bf1c      	itt	ne
 800064c:	4b05      	ldrne	r3, [pc, #20]	; (8000664 <HAL_Delay+0x24>)
 800064e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000650:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000652:	bf18      	it	ne
 8000654:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000678:	0200      	lsls	r0, r0, #8
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000684:	60d3      	str	r3, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf28      	it	cs
 80006a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 0501 	mov.w	r5, #1
 80006a8:	fa05 f303 	lsl.w	r3, r5, r3
 80006ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b0:	bf8c      	ite	hi
 80006b2:	3c03      	subhi	r4, #3
 80006b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b6:	4019      	ands	r1, r3
 80006b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	fa05 f404 	lsl.w	r4, r5, r4
 80006be:	3c01      	subs	r4, #1
 80006c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea42 0201 	orr.w	r2, r2, r1
 80006c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfaf      	iteee	ge
 80006ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	f000 000f 	andlt.w	r0, r0, #15
 80006d6:	4b06      	ldrlt	r3, [pc, #24]	; (80006f0 <HAL_NVIC_SetPriority+0x64>)
 80006d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	bfa5      	ittet	ge
 80006dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	3801      	subs	r0, #1
 80006f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fa:	d20a      	bcs.n	8000712 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000700:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	21f0      	movs	r1, #240	; 0xf0
 8000704:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000712:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000724:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008c8 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072c:	4a64      	ldr	r2, [pc, #400]	; (80008c0 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000730:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000734:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000736:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000738:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000740:	42b7      	cmp	r7, r6
 8000742:	f040 80ad 	bne.w	80008a0 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000746:	684c      	ldr	r4, [r1, #4]
 8000748:	f024 0a10 	bic.w	sl, r4, #16
 800074c:	f1ba 0f02 	cmp.w	sl, #2
 8000750:	d116      	bne.n	8000780 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000752:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000756:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800075a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800075e:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000762:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000766:	f04f 0e0f 	mov.w	lr, #15
 800076a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800076e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000772:	690d      	ldr	r5, [r1, #16]
 8000774:	fa05 f50b 	lsl.w	r5, r5, fp
 8000778:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800077c:	f8cc 5020 	str.w	r5, [ip, #32]
 8000780:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000784:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000786:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800078a:	fa05 f50c 	lsl.w	r5, r5, ip
 800078e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000790:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000794:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000798:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800079c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a8:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007aa:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ae:	d815      	bhi.n	80007dc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007b0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007b4:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007b8:	68cd      	ldr	r5, [r1, #12]
 80007ba:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007be:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007c2:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007c6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ca:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ce:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007d2:	fa0e fe03 	lsl.w	lr, lr, r3
 80007d6:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007da:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007dc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007de:	9d00      	ldr	r5, [sp, #0]
 80007e0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e2:	688f      	ldr	r7, [r1, #8]
 80007e4:	fa07 f70c 	lsl.w	r7, r7, ip
 80007e8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007ea:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ec:	00e5      	lsls	r5, r4, #3
 80007ee:	d557      	bpl.n	80008a0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f0:	f04f 0b00 	mov.w	fp, #0
 80007f4:	f8cd b00c 	str.w	fp, [sp, #12]
 80007f8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fc:	4d31      	ldr	r5, [pc, #196]	; (80008c4 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000802:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000806:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800080a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800080e:	9703      	str	r7, [sp, #12]
 8000810:	9f03      	ldr	r7, [sp, #12]
 8000812:	f023 0703 	bic.w	r7, r3, #3
 8000816:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800081a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800081e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000822:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000826:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800082a:	f04f 0e0f 	mov.w	lr, #15
 800082e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000832:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000834:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000838:	d039      	beq.n	80008ae <HAL_GPIO_Init+0x18e>
 800083a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800083e:	42a8      	cmp	r0, r5
 8000840:	d037      	beq.n	80008b2 <HAL_GPIO_Init+0x192>
 8000842:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000846:	42a8      	cmp	r0, r5
 8000848:	d035      	beq.n	80008b6 <HAL_GPIO_Init+0x196>
 800084a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084e:	42a8      	cmp	r0, r5
 8000850:	d033      	beq.n	80008ba <HAL_GPIO_Init+0x19a>
 8000852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000856:	42a8      	cmp	r0, r5
 8000858:	bf14      	ite	ne
 800085a:	2507      	movne	r5, #7
 800085c:	2504      	moveq	r5, #4
 800085e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000862:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000866:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000868:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800086a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800086c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000874:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000876:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000878:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800087a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800087e:	bf0c      	ite	eq
 8000880:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000882:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000884:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000886:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000888:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800088c:	bf0c      	ite	eq
 800088e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000890:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000892:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000894:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000896:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000898:	bf54      	ite	pl
 800089a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800089c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800089e:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008a0:	3301      	adds	r3, #1
 80008a2:	2b10      	cmp	r3, #16
 80008a4:	f47f af47 	bne.w	8000736 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008a8:	b005      	add	sp, #20
 80008aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ae:	465d      	mov	r5, fp
 80008b0:	e7d5      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008b2:	2501      	movs	r5, #1
 80008b4:	e7d3      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008b6:	2502      	movs	r5, #2
 80008b8:	e7d1      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008ba:	2503      	movs	r5, #3
 80008bc:	e7cf      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008be:	bf00      	nop
 80008c0:	40013c00 	.word	0x40013c00
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d0:	4604      	mov	r4, r0
 80008d2:	b918      	cbnz	r0, 80008dc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008d4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008d6:	b002      	add	sp, #8
 80008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	07dd      	lsls	r5, r3, #31
 80008e0:	d410      	bmi.n	8000904 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	0798      	lsls	r0, r3, #30
 80008e6:	d458      	bmi.n	800099a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	071a      	lsls	r2, r3, #28
 80008ec:	f100 809a 	bmi.w	8000a24 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f0:	6823      	ldr	r3, [r4, #0]
 80008f2:	075b      	lsls	r3, r3, #29
 80008f4:	f100 80b8 	bmi.w	8000a68 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008f8:	69a2      	ldr	r2, [r4, #24]
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	f040 8119 	bne.w	8000b32 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000900:	2000      	movs	r0, #0
 8000902:	e7e8      	b.n	80008d6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000904:	4ba6      	ldr	r3, [pc, #664]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	f002 020c 	and.w	r2, r2, #12
 800090c:	2a04      	cmp	r2, #4
 800090e:	d007      	beq.n	8000920 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000916:	2a08      	cmp	r2, #8
 8000918:	d10a      	bne.n	8000930 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	0259      	lsls	r1, r3, #9
 800091e:	d507      	bpl.n	8000930 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000920:	4b9f      	ldr	r3, [pc, #636]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	039a      	lsls	r2, r3, #14
 8000926:	d5dc      	bpl.n	80008e2 <HAL_RCC_OscConfig+0x16>
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1d9      	bne.n	80008e2 <HAL_RCC_OscConfig+0x16>
 800092e:	e7d1      	b.n	80008d4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000930:	6863      	ldr	r3, [r4, #4]
 8000932:	4d9b      	ldr	r5, [pc, #620]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 8000934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000938:	d111      	bne.n	800095e <HAL_RCC_OscConfig+0x92>
 800093a:	682b      	ldr	r3, [r5, #0]
 800093c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000940:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000942:	f7ff fe77 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000946:	4d96      	ldr	r5, [pc, #600]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000948:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094a:	682b      	ldr	r3, [r5, #0]
 800094c:	039b      	lsls	r3, r3, #14
 800094e:	d4c8      	bmi.n	80008e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000950:	f7ff fe70 	bl	8000634 <HAL_GetTick>
 8000954:	1b80      	subs	r0, r0, r6
 8000956:	2864      	cmp	r0, #100	; 0x64
 8000958:	d9f7      	bls.n	800094a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800095a:	2003      	movs	r0, #3
 800095c:	e7bb      	b.n	80008d6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800095e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000962:	d104      	bne.n	800096e <HAL_RCC_OscConfig+0xa2>
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096a:	602b      	str	r3, [r5, #0]
 800096c:	e7e5      	b.n	800093a <HAL_RCC_OscConfig+0x6e>
 800096e:	682a      	ldr	r2, [r5, #0]
 8000970:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000974:	602a      	str	r2, [r5, #0]
 8000976:	682a      	ldr	r2, [r5, #0]
 8000978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800097c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1df      	bne.n	8000942 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000982:	f7ff fe57 	bl	8000634 <HAL_GetTick>
 8000986:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	039f      	lsls	r7, r3, #14
 800098c:	d5a9      	bpl.n	80008e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800098e:	f7ff fe51 	bl	8000634 <HAL_GetTick>
 8000992:	1b80      	subs	r0, r0, r6
 8000994:	2864      	cmp	r0, #100	; 0x64
 8000996:	d9f7      	bls.n	8000988 <HAL_RCC_OscConfig+0xbc>
 8000998:	e7df      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800099a:	4b81      	ldr	r3, [pc, #516]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	f012 0f0c 	tst.w	r2, #12
 80009a2:	d007      	beq.n	80009b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009aa:	2a08      	cmp	r2, #8
 80009ac:	d111      	bne.n	80009d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	025e      	lsls	r6, r3, #9
 80009b2:	d40e      	bmi.n	80009d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b4:	4b7a      	ldr	r3, [pc, #488]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	0795      	lsls	r5, r2, #30
 80009ba:	d502      	bpl.n	80009c2 <HAL_RCC_OscConfig+0xf6>
 80009bc:	68e2      	ldr	r2, [r4, #12]
 80009be:	2a01      	cmp	r2, #1
 80009c0:	d188      	bne.n	80008d4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	6921      	ldr	r1, [r4, #16]
 80009c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d0:	e78a      	b.n	80008e8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009d2:	68e2      	ldr	r2, [r4, #12]
 80009d4:	4b73      	ldr	r3, [pc, #460]	; (8000ba4 <HAL_RCC_OscConfig+0x2d8>)
 80009d6:	b1b2      	cbz	r2, 8000a06 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009dc:	f7ff fe2a 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	4d6f      	ldr	r5, [pc, #444]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	0798      	lsls	r0, r3, #30
 80009e8:	d507      	bpl.n	80009fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	6922      	ldr	r2, [r4, #16]
 80009ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009f6:	602b      	str	r3, [r5, #0]
 80009f8:	e776      	b.n	80008e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009fa:	f7ff fe1b 	bl	8000634 <HAL_GetTick>
 80009fe:	1b80      	subs	r0, r0, r6
 8000a00:	2802      	cmp	r0, #2
 8000a02:	d9ef      	bls.n	80009e4 <HAL_RCC_OscConfig+0x118>
 8000a04:	e7a9      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a08:	f7ff fe14 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a0c:	4d64      	ldr	r5, [pc, #400]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	0799      	lsls	r1, r3, #30
 8000a14:	f57f af68 	bpl.w	80008e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a18:	f7ff fe0c 	bl	8000634 <HAL_GetTick>
 8000a1c:	1b80      	subs	r0, r0, r6
 8000a1e:	2802      	cmp	r0, #2
 8000a20:	d9f6      	bls.n	8000a10 <HAL_RCC_OscConfig+0x144>
 8000a22:	e79a      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a24:	6962      	ldr	r2, [r4, #20]
 8000a26:	4b60      	ldr	r3, [pc, #384]	; (8000ba8 <HAL_RCC_OscConfig+0x2dc>)
 8000a28:	b17a      	cbz	r2, 8000a4a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a2e:	f7ff fe01 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a32:	4d5b      	ldr	r5, [pc, #364]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a34:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a38:	079f      	lsls	r7, r3, #30
 8000a3a:	f53f af59 	bmi.w	80008f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3e:	f7ff fdf9 	bl	8000634 <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d9f6      	bls.n	8000a36 <HAL_RCC_OscConfig+0x16a>
 8000a48:	e787      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a4a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a4c:	f7ff fdf2 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a50:	4d53      	ldr	r5, [pc, #332]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a54:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a56:	0798      	lsls	r0, r3, #30
 8000a58:	f57f af4a 	bpl.w	80008f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5c:	f7ff fdea 	bl	8000634 <HAL_GetTick>
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	2802      	cmp	r0, #2
 8000a64:	d9f6      	bls.n	8000a54 <HAL_RCC_OscConfig+0x188>
 8000a66:	e778      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a68:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 8000a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a70:	d128      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	9201      	str	r2, [sp, #4]
 8000a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a86:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a88:	4d48      	ldr	r5, [pc, #288]	; (8000bac <HAL_RCC_OscConfig+0x2e0>)
 8000a8a:	682b      	ldr	r3, [r5, #0]
 8000a8c:	05d9      	lsls	r1, r3, #23
 8000a8e:	d51b      	bpl.n	8000ac8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a90:	68a3      	ldr	r3, [r4, #8]
 8000a92:	4d43      	ldr	r5, [pc, #268]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d127      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x21c>
 8000a98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fdc8 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa4:	4d3e      	ldr	r5, [pc, #248]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aa6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aae:	079b      	lsls	r3, r3, #30
 8000ab0:	d539      	bpl.n	8000b26 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	f43f af20 	beq.w	80008f8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ab8:	4a39      	ldr	r2, [pc, #228]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 8000aba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	e719      	b.n	80008f8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	e7df      	b.n	8000a88 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ac8:	682b      	ldr	r3, [r5, #0]
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ad0:	f7ff fdb0 	bl	8000634 <HAL_GetTick>
 8000ad4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	05da      	lsls	r2, r3, #23
 8000ada:	d4d9      	bmi.n	8000a90 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000adc:	f7ff fdaa 	bl	8000634 <HAL_GetTick>
 8000ae0:	1bc0      	subs	r0, r0, r7
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9f7      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x20a>
 8000ae6:	e738      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae8:	2b05      	cmp	r3, #5
 8000aea:	d104      	bne.n	8000af6 <HAL_RCC_OscConfig+0x22a>
 8000aec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	672b      	str	r3, [r5, #112]	; 0x70
 8000af4:	e7d0      	b.n	8000a98 <HAL_RCC_OscConfig+0x1cc>
 8000af6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000af8:	f022 0201 	bic.w	r2, r2, #1
 8000afc:	672a      	str	r2, [r5, #112]	; 0x70
 8000afe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b00:	f022 0204 	bic.w	r2, r2, #4
 8000b04:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1ca      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fd93 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b12:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b16:	0798      	lsls	r0, r3, #30
 8000b18:	d5cb      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1a:	f7ff fd8b 	bl	8000634 <HAL_GetTick>
 8000b1e:	1bc0      	subs	r0, r0, r7
 8000b20:	4540      	cmp	r0, r8
 8000b22:	d9f7      	bls.n	8000b14 <HAL_RCC_OscConfig+0x248>
 8000b24:	e719      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f7ff fd85 	bl	8000634 <HAL_GetTick>
 8000b2a:	1bc0      	subs	r0, r0, r7
 8000b2c:	4540      	cmp	r0, r8
 8000b2e:	d9bd      	bls.n	8000aac <HAL_RCC_OscConfig+0x1e0>
 8000b30:	e713      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b32:	4d1b      	ldr	r5, [pc, #108]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
 8000b34:	68ab      	ldr	r3, [r5, #8]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	f43f aeca 	beq.w	80008d4 <HAL_RCC_OscConfig+0x8>
 8000b40:	4e1b      	ldr	r6, [pc, #108]	; (8000bb0 <HAL_RCC_OscConfig+0x2e4>)
 8000b42:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b44:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b46:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b48:	d134      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fd73 	bl	8000634 <HAL_GetTick>
 8000b4e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	0199      	lsls	r1, r3, #6
 8000b54:	d41e      	bmi.n	8000b94 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b56:	6a22      	ldr	r2, [r4, #32]
 8000b58:	69e3      	ldr	r3, [r4, #28]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b5e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b6a:	4c0d      	ldr	r4, [pc, #52]	; (8000ba0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b6c:	0852      	lsrs	r2, r2, #1
 8000b6e:	3a01      	subs	r2, #1
 8000b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b74:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b76:	2301      	movs	r3, #1
 8000b78:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b7a:	f7ff fd5b 	bl	8000634 <HAL_GetTick>
 8000b7e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	019a      	lsls	r2, r3, #6
 8000b84:	f53f aebc 	bmi.w	8000900 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b88:	f7ff fd54 	bl	8000634 <HAL_GetTick>
 8000b8c:	1b40      	subs	r0, r0, r5
 8000b8e:	2802      	cmp	r0, #2
 8000b90:	d9f6      	bls.n	8000b80 <HAL_RCC_OscConfig+0x2b4>
 8000b92:	e6e2      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b94:	f7ff fd4e 	bl	8000634 <HAL_GetTick>
 8000b98:	1bc0      	subs	r0, r0, r7
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9d8      	bls.n	8000b50 <HAL_RCC_OscConfig+0x284>
 8000b9e:	e6dc      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	42470000 	.word	0x42470000
 8000ba8:	42470e80 	.word	0x42470e80
 8000bac:	40007000 	.word	0x40007000
 8000bb0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fd3e 	bl	8000634 <HAL_GetTick>
 8000bb8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bba:	682b      	ldr	r3, [r5, #0]
 8000bbc:	019b      	lsls	r3, r3, #6
 8000bbe:	f57f ae9f 	bpl.w	8000900 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc2:	f7ff fd37 	bl	8000634 <HAL_GetTick>
 8000bc6:	1b00      	subs	r0, r0, r4
 8000bc8:	2802      	cmp	r0, #2
 8000bca:	d9f6      	bls.n	8000bba <HAL_RCC_OscConfig+0x2ee>
 8000bcc:	e6c5      	b.n	800095a <HAL_RCC_OscConfig+0x8e>
 8000bce:	bf00      	nop

08000bd0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd0:	4913      	ldr	r1, [pc, #76]	; (8000c20 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bd2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd4:	688b      	ldr	r3, [r1, #8]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d003      	beq.n	8000be6 <HAL_RCC_GetSysClockFreq+0x16>
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d003      	beq.n	8000bea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000be2:	4810      	ldr	r0, [pc, #64]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000be4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x58>)
 8000be8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf4:	bf14      	ite	ne
 8000bf6:	480c      	ldrne	r0, [pc, #48]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf8:	480a      	ldreq	r0, [pc, #40]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bfe:	bf18      	it	ne
 8000c00:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c06:	fba1 0100 	umull	r0, r1, r1, r0
 8000c0a:	f7ff fb41 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c16:	3301      	adds	r3, #1
 8000c18:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c1e:	bd08      	pop	{r3, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	00f42400 	.word	0x00f42400
 8000c28:	007a1200 	.word	0x007a1200

08000c2c <HAL_RCC_ClockConfig>:
{
 8000c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c30:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c32:	4604      	mov	r4, r0
 8000c34:	b910      	cbnz	r0, 8000c3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
 8000c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <HAL_RCC_ClockConfig+0x124>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f002 020f 	and.w	r2, r2, #15
 8000c44:	428a      	cmp	r2, r1
 8000c46:	d328      	bcc.n	8000c9a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c48:	6821      	ldr	r1, [r4, #0]
 8000c4a:	078f      	lsls	r7, r1, #30
 8000c4c:	d42d      	bmi.n	8000caa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c4e:	07c8      	lsls	r0, r1, #31
 8000c50:	d440      	bmi.n	8000cd4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c52:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <HAL_RCC_ClockConfig+0x124>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f002 020f 	and.w	r2, r2, #15
 8000c5a:	4295      	cmp	r5, r2
 8000c5c:	d366      	bcc.n	8000d2c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	0751      	lsls	r1, r2, #29
 8000c62:	d46c      	bmi.n	8000d3e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c64:	0713      	lsls	r3, r2, #28
 8000c66:	d507      	bpl.n	8000c78 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c68:	4a3a      	ldr	r2, [pc, #232]	; (8000d54 <HAL_RCC_ClockConfig+0x128>)
 8000c6a:	6921      	ldr	r1, [r4, #16]
 8000c6c:	6893      	ldr	r3, [r2, #8]
 8000c6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c78:	f7ff ffaa 	bl	8000bd0 <HAL_RCC_GetSysClockFreq>
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <HAL_RCC_ClockConfig+0x128>)
 8000c7e:	4a36      	ldr	r2, [pc, #216]	; (8000d58 <HAL_RCC_ClockConfig+0x12c>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	40d8      	lsrs	r0, r3
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <HAL_RCC_ClockConfig+0x130>)
 8000c8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fc86 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000c94:	2000      	movs	r0, #0
 8000c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d1c6      	bne.n	8000c36 <HAL_RCC_ClockConfig+0xa>
 8000ca8:	e7ce      	b.n	8000c48 <HAL_RCC_ClockConfig+0x1c>
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	689a      	ldrne	r2, [r3, #8]
 8000cb4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cb8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cbc:	bf42      	ittt	mi
 8000cbe:	689a      	ldrmi	r2, [r3, #8]
 8000cc0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cc4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	68a0      	ldr	r0, [r4, #8]
 8000cca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	e7bc      	b.n	8000c4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cd4:	6862      	ldr	r2, [r4, #4]
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_RCC_ClockConfig+0x128>)
 8000cd8:	2a01      	cmp	r2, #1
 8000cda:	d11d      	bne.n	8000d18 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce2:	d0a8      	beq.n	8000c36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ce4:	4e1b      	ldr	r6, [pc, #108]	; (8000d54 <HAL_RCC_ClockConfig+0x128>)
 8000ce6:	68b3      	ldr	r3, [r6, #8]
 8000ce8:	f023 0303 	bic.w	r3, r3, #3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cf0:	f7ff fca0 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cf8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cfa:	68b3      	ldr	r3, [r6, #8]
 8000cfc:	6862      	ldr	r2, [r4, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d06:	d0a4      	beq.n	8000c52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d08:	f7ff fc94 	bl	8000634 <HAL_GetTick>
 8000d0c:	1bc0      	subs	r0, r0, r7
 8000d0e:	4540      	cmp	r0, r8
 8000d10:	d9f3      	bls.n	8000cfa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d12:	2003      	movs	r0, #3
}
 8000d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d18:	1e91      	subs	r1, r2, #2
 8000d1a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d1c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d1e:	d802      	bhi.n	8000d26 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d24:	e7dd      	b.n	8000ce2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d26:	f013 0f02 	tst.w	r3, #2
 8000d2a:	e7da      	b.n	8000ce2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2c:	b2ea      	uxtb	r2, r5
 8000d2e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	429d      	cmp	r5, r3
 8000d38:	f47f af7d 	bne.w	8000c36 <HAL_RCC_ClockConfig+0xa>
 8000d3c:	e78f      	b.n	8000c5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d3e:	4905      	ldr	r1, [pc, #20]	; (8000d54 <HAL_RCC_ClockConfig+0x128>)
 8000d40:	68e0      	ldr	r0, [r4, #12]
 8000d42:	688b      	ldr	r3, [r1, #8]
 8000d44:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d48:	4303      	orrs	r3, r0
 8000d4a:	608b      	str	r3, [r1, #8]
 8000d4c:	e78a      	b.n	8000c64 <HAL_RCC_ClockConfig+0x38>
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00
 8000d54:	40023800 	.word	0x40023800
 8000d58:	080026b5 	.word	0x080026b5
 8000d5c:	20000008 	.word	0x20000008

08000d60 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d6e:	6810      	ldr	r0, [r2, #0]
}
 8000d70:	40d8      	lsrs	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	40023800 	.word	0x40023800
 8000d78:	080026c5 	.word	0x080026c5
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d8e:	6810      	ldr	r0, [r2, #0]
}
 8000d90:	40d8      	lsrs	r0, r3
 8000d92:	4770      	bx	lr
 8000d94:	40023800 	.word	0x40023800
 8000d98:	080026c5 	.word	0x080026c5
 8000d9c:	20000008 	.word	0x20000008

08000da0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000da0:	6a03      	ldr	r3, [r0, #32]
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000da8:	6a03      	ldr	r3, [r0, #32]
{
 8000daa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000dac:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000dae:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000db0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000db2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000db6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000db8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000dba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000dbe:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000dc0:	4d0a      	ldr	r5, [pc, #40]	; (8000dec <TIM_OC1_SetConfig+0x4c>)
 8000dc2:	42a8      	cmp	r0, r5
 8000dc4:	d10b      	bne.n	8000dde <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000dc6:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dc8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000dca:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000dce:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dd0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000dd2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dd6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000dd8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ddc:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dde:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000de0:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000de2:	684a      	ldr	r2, [r1, #4]
 8000de4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000de6:	6203      	str	r3, [r0, #32]
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
 8000dea:	bf00      	nop
 8000dec:	40010000 	.word	0x40010000

08000df0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000df0:	6a03      	ldr	r3, [r0, #32]
 8000df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000df8:	6a03      	ldr	r3, [r0, #32]
{
 8000dfa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000dfc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000dfe:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000e02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e06:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e12:	4d0b      	ldr	r5, [pc, #44]	; (8000e40 <TIM_OC3_SetConfig+0x50>)
 8000e14:	42a8      	cmp	r0, r5
 8000e16:	d10d      	bne.n	8000e34 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e18:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e1a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e20:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e24:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e26:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e2a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e30:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e34:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e36:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e38:	684a      	ldr	r2, [r1, #4]
 8000e3a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e3c:	6203      	str	r3, [r0, #32]
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	40010000 	.word	0x40010000

08000e44 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e44:	6a03      	ldr	r3, [r0, #32]
 8000e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e4a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e4c:	6a03      	ldr	r3, [r0, #32]
{
 8000e4e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e50:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e52:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e56:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e5e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e68:	4d06      	ldr	r5, [pc, #24]	; (8000e84 <TIM_OC4_SetConfig+0x40>)
 8000e6a:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e6c:	bf02      	ittt	eq
 8000e6e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e70:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e74:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e78:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000e7a:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e7c:	684a      	ldr	r2, [r1, #4]
 8000e7e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e80:	6203      	str	r3, [r0, #32]
 8000e82:	bd30      	pop	{r4, r5, pc}
 8000e84:	40010000 	.word	0x40010000

08000e88 <HAL_TIM_Encoder_Start>:
{
 8000e88:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8000e8a:	b189      	cbz	r1, 8000eb0 <HAL_TIM_Encoder_Start+0x28>
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d007      	beq.n	8000ea0 <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8000e90:	6a1a      	ldr	r2, [r3, #32]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	f042 0201 	orr.w	r2, r2, #1
 8000e9e:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	f022 0210 	bic.w	r2, r2, #16
 8000ea6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000ea8:	6a1a      	ldr	r2, [r3, #32]
 8000eaa:	f042 0210 	orr.w	r2, r2, #16
 8000eae:	e006      	b.n	8000ebe <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8000eb0:	6a1a      	ldr	r2, [r3, #32]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000eb8:	6a1a      	ldr	r2, [r3, #32]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	2000      	movs	r0, #0
 8000eca:	4770      	bx	lr

08000ecc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000ecc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ed0:	2b01      	cmp	r3, #1
{
 8000ed2:	b570      	push	{r4, r5, r6, lr}
 8000ed4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000ed8:	d01c      	beq.n	8000f14 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000eda:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000ede:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000ee6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ee8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000eec:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000ef0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ef2:	680a      	ldr	r2, [r1, #0]
 8000ef4:	2a40      	cmp	r2, #64	; 0x40
 8000ef6:	d079      	beq.n	8000fec <HAL_TIM_ConfigClockSource+0x120>
 8000ef8:	d819      	bhi.n	8000f2e <HAL_TIM_ConfigClockSource+0x62>
 8000efa:	2a10      	cmp	r2, #16
 8000efc:	f000 8093 	beq.w	8001026 <HAL_TIM_ConfigClockSource+0x15a>
 8000f00:	d80a      	bhi.n	8000f18 <HAL_TIM_ConfigClockSource+0x4c>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	f000 8089 	beq.w	800101a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f14:	4618      	mov	r0, r3
}
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000f18:	2a20      	cmp	r2, #32
 8000f1a:	f000 808a 	beq.w	8001032 <HAL_TIM_ConfigClockSource+0x166>
 8000f1e:	2a30      	cmp	r2, #48	; 0x30
 8000f20:	d1f2      	bne.n	8000f08 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f22:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f28:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000f2c:	e036      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f2e:	2a70      	cmp	r2, #112	; 0x70
 8000f30:	d036      	beq.n	8000fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8000f32:	d81b      	bhi.n	8000f6c <HAL_TIM_ConfigClockSource+0xa0>
 8000f34:	2a50      	cmp	r2, #80	; 0x50
 8000f36:	d042      	beq.n	8000fbe <HAL_TIM_ConfigClockSource+0xf2>
 8000f38:	2a60      	cmp	r2, #96	; 0x60
 8000f3a:	d1e5      	bne.n	8000f08 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f3c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000f3e:	684d      	ldr	r5, [r1, #4]
 8000f40:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f42:	f024 0410 	bic.w	r4, r4, #16
 8000f46:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f48:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f4c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f54:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f58:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000f5c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f5e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f60:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f66:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000f6a:	e017      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f6c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000f70:	d011      	beq.n	8000f96 <HAL_TIM_ConfigClockSource+0xca>
 8000f72:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f76:	d1c7      	bne.n	8000f08 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000f78:	688a      	ldr	r2, [r1, #8]
 8000f7a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000f7c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000f7e:	68c9      	ldr	r1, [r1, #12]
 8000f80:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f82:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000f86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f8a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f8c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f94:	e002      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	e7b3      	b.n	8000f08 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fa0:	688a      	ldr	r2, [r1, #8]
 8000fa2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000fa4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fa6:	68c9      	ldr	r1, [r1, #12]
 8000fa8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000faa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fb2:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000fb4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000fb6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000fb8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000fbc:	e7ee      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000fbe:	684c      	ldr	r4, [r1, #4]
 8000fc0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000fc2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fc4:	6a1d      	ldr	r5, [r3, #32]
 8000fc6:	f025 0501 	bic.w	r5, r5, #1
 8000fca:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000fcc:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fce:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fd6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000fda:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000fdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000fde:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000fe0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fe2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000fe6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000fea:	e7d7      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000fec:	684c      	ldr	r4, [r1, #4]
 8000fee:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ff0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ff2:	6a1d      	ldr	r5, [r3, #32]
 8000ff4:	f025 0501 	bic.w	r5, r5, #1
 8000ff8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000ffa:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ffc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001000:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001004:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001008:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800100a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800100c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800100e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001010:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001014:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001018:	e7c0      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800101a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800101c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001020:	f042 0207 	orr.w	r2, r2, #7
 8001024:	e7ba      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001026:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001028:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800102c:	f042 0217 	orr.w	r2, r2, #23
 8001030:	e7b4      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001032:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001034:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001038:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800103c:	e7ae      	b.n	8000f9c <HAL_TIM_ConfigClockSource+0xd0>
	...

08001040 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001040:	4a22      	ldr	r2, [pc, #136]	; (80010cc <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8001042:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001044:	4290      	cmp	r0, r2
 8001046:	d00e      	beq.n	8001066 <TIM_Base_SetConfig+0x26>
 8001048:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800104c:	d00b      	beq.n	8001066 <TIM_Base_SetConfig+0x26>
 800104e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001052:	4290      	cmp	r0, r2
 8001054:	d007      	beq.n	8001066 <TIM_Base_SetConfig+0x26>
 8001056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800105a:	4290      	cmp	r0, r2
 800105c:	d003      	beq.n	8001066 <TIM_Base_SetConfig+0x26>
 800105e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001062:	4290      	cmp	r0, r2
 8001064:	d119      	bne.n	800109a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8001066:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800106c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <TIM_Base_SetConfig+0x8c>)
 8001070:	4290      	cmp	r0, r2
 8001072:	d104      	bne.n	800107e <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001074:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800107a:	4313      	orrs	r3, r2
 800107c:	e018      	b.n	80010b0 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800107e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001082:	d0f7      	beq.n	8001074 <TIM_Base_SetConfig+0x34>
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <TIM_Base_SetConfig+0x90>)
 8001086:	4290      	cmp	r0, r2
 8001088:	d0f4      	beq.n	8001074 <TIM_Base_SetConfig+0x34>
 800108a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800108e:	4290      	cmp	r0, r2
 8001090:	d0f0      	beq.n	8001074 <TIM_Base_SetConfig+0x34>
 8001092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001096:	4290      	cmp	r0, r2
 8001098:	d0ec      	beq.n	8001074 <TIM_Base_SetConfig+0x34>
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <TIM_Base_SetConfig+0x94>)
 800109c:	4290      	cmp	r0, r2
 800109e:	d0e9      	beq.n	8001074 <TIM_Base_SetConfig+0x34>
 80010a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010a4:	4290      	cmp	r0, r2
 80010a6:	d0e5      	beq.n	8001074 <TIM_Base_SetConfig+0x34>
 80010a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010ac:	4290      	cmp	r0, r2
 80010ae:	d0e1      	beq.n	8001074 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 80010b0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010b2:	688b      	ldr	r3, [r1, #8]
 80010b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80010b6:	680b      	ldr	r3, [r1, #0]
 80010b8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <TIM_Base_SetConfig+0x8c>)
 80010bc:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80010be:	bf04      	itt	eq
 80010c0:	690b      	ldreq	r3, [r1, #16]
 80010c2:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80010c4:	2301      	movs	r3, #1
 80010c6:	6143      	str	r3, [r0, #20]
}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40010000 	.word	0x40010000
 80010d0:	40000400 	.word	0x40000400
 80010d4:	40014000 	.word	0x40014000

080010d8 <HAL_TIM_Base_Init>:
{ 
 80010d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80010da:	4604      	mov	r4, r0
 80010dc:	b1a0      	cbz	r0, 8001108 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80010de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010e6:	b91b      	cbnz	r3, 80010f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80010ec:	f000 fca2 	bl	8001a34 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	1d21      	adds	r1, r4, #4
 80010fa:	f7ff ffa1 	bl	8001040 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80010fe:	2301      	movs	r3, #1
 8001100:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001104:	2000      	movs	r0, #0
 8001106:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
}
 800110a:	bd10      	pop	{r4, pc}

0800110c <HAL_TIM_PWM_Init>:
{
 800110c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800110e:	4604      	mov	r4, r0
 8001110:	b1a0      	cbz	r0, 800113c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001112:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001116:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800111a:	b91b      	cbnz	r3, 8001124 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800111c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001120:	f000 fcb2 	bl	8001a88 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001124:	2302      	movs	r3, #2
 8001126:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800112a:	6820      	ldr	r0, [r4, #0]
 800112c:	1d21      	adds	r1, r4, #4
 800112e:	f7ff ff87 	bl	8001040 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001132:	2301      	movs	r3, #1
 8001134:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001138:	2000      	movs	r0, #0
 800113a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800113c:	2001      	movs	r0, #1
}  
 800113e:	bd10      	pop	{r4, pc}

08001140 <HAL_TIM_Encoder_Init>:
{
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	460c      	mov	r4, r1
  if(htim == NULL)
 8001144:	4605      	mov	r5, r0
 8001146:	2800      	cmp	r0, #0
 8001148:	d041      	beq.n	80011ce <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 800114a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800114e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001152:	b91b      	cbnz	r3, 800115c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001154:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8001158:	f000 fcac 	bl	8001ab4 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800115c:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 800115e:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001160:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8001164:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001168:	6883      	ldr	r3, [r0, #8]
 800116a:	f023 0307 	bic.w	r3, r3, #7
 800116e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001170:	f7ff ff66 	bl	8001040 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001174:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001176:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001178:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800117a:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800117c:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 800117e:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001180:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001182:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001184:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001188:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800118c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001190:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001192:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001196:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001198:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011a0:	68e1      	ldr	r1, [r4, #12]
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80011a6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80011aa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80011ae:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011b0:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80011b2:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011b6:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80011b8:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011ba:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80011be:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011c0:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80011c2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80011c4:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80011c6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80011ca:	2000      	movs	r0, #0
 80011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
}
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080011d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011d4:	6a03      	ldr	r3, [r0, #32]
 80011d6:	f023 0310 	bic.w	r3, r3, #16
 80011da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80011dc:	6a03      	ldr	r3, [r0, #32]
{
 80011de:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 80011e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80011e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80011e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80011ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80011f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80011f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80011f8:	4d0b      	ldr	r5, [pc, #44]	; (8001228 <TIM_OC2_SetConfig+0x54>)
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	d10d      	bne.n	800121a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80011fe:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001200:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001206:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800120a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800120c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001210:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001216:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800121a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800121c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800121e:	684a      	ldr	r2, [r1, #4]
 8001220:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001222:	6203      	str	r3, [r0, #32]
 8001224:	bd70      	pop	{r4, r5, r6, pc}
 8001226:	bf00      	nop
 8001228:	40010000 	.word	0x40010000

0800122c <HAL_TIM_PWM_ConfigChannel>:
{
 800122c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800122e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001232:	2b01      	cmp	r3, #1
{
 8001234:	4604      	mov	r4, r0
 8001236:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800123a:	d025      	beq.n	8001288 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800123c:	2301      	movs	r3, #1
 800123e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001242:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001246:	2a0c      	cmp	r2, #12
 8001248:	d818      	bhi.n	800127c <HAL_TIM_PWM_ConfigChannel+0x50>
 800124a:	e8df f002 	tbb	[pc, r2]
 800124e:	1707      	.short	0x1707
 8001250:	171e1717 	.word	0x171e1717
 8001254:	172f1717 	.word	0x172f1717
 8001258:	1717      	.short	0x1717
 800125a:	40          	.byte	0x40
 800125b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	f7ff fd9f 	bl	8000da0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001262:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001264:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	f042 0208 	orr.w	r2, r2, #8
 800126c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800126e:	699a      	ldr	r2, [r3, #24]
 8001270:	f022 0204 	bic.w	r2, r2, #4
 8001274:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800127a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800127c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800127e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001280:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001284:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001288:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f7ff ffa2 	bl	80011d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001290:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001292:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800129a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012aa:	e7e6      	b.n	800127a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80012ac:	6820      	ldr	r0, [r4, #0]
 80012ae:	f7ff fd9f 	bl	8000df0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80012b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80012b4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	f042 0208 	orr.w	r2, r2, #8
 80012bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80012be:	69da      	ldr	r2, [r3, #28]
 80012c0:	f022 0204 	bic.w	r2, r2, #4
 80012c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012ca:	61da      	str	r2, [r3, #28]
    break;
 80012cc:	e7d6      	b.n	800127c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80012ce:	6820      	ldr	r0, [r4, #0]
 80012d0:	f7ff fdb8 	bl	8000e44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012d6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012d8:	69da      	ldr	r2, [r3, #28]
 80012da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80012e0:	69da      	ldr	r2, [r3, #28]
 80012e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012e8:	69da      	ldr	r2, [r3, #28]
 80012ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012ee:	e7ec      	b.n	80012ca <HAL_TIM_PWM_ConfigChannel+0x9e>

080012f0 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80012f0:	6a03      	ldr	r3, [r0, #32]
{
 80012f2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80012f4:	2401      	movs	r4, #1
 80012f6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80012f8:	ea23 0304 	bic.w	r3, r3, r4
 80012fc:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80012fe:	6a03      	ldr	r3, [r0, #32]
 8001300:	408a      	lsls	r2, r1
 8001302:	431a      	orrs	r2, r3
 8001304:	6202      	str	r2, [r0, #32]
 8001306:	bd10      	pop	{r4, pc}

08001308 <HAL_TIM_PWM_Start>:
{
 8001308:	b510      	push	{r4, lr}
 800130a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800130c:	2201      	movs	r2, #1
 800130e:	6800      	ldr	r0, [r0, #0]
 8001310:	f7ff ffee 	bl	80012f0 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_TIM_PWM_Start+0x28>)
 8001318:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800131a:	bf02      	ittt	eq
 800131c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800131e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001322:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
} 
 800132c:	2000      	movs	r0, #0
 800132e:	bd10      	pop	{r4, pc}
 8001330:	40010000 	.word	0x40010000

08001334 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001334:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001338:	2b01      	cmp	r3, #1
{
 800133a:	b510      	push	{r4, lr}
 800133c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001340:	d018      	beq.n	8001374 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001342:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001346:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001348:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800134a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800134c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800134e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001352:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4322      	orrs	r2, r4
 8001358:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001360:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	430a      	orrs	r2, r1
 8001366:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001368:	2301      	movs	r3, #1
 800136a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800136e:	2300      	movs	r3, #0
 8001370:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001374:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001376:	bd10      	pop	{r4, pc}

08001378 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001378:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800137c:	2b01      	cmp	r3, #1
 800137e:	d01f      	beq.n	80013c0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001380:	68cb      	ldr	r3, [r1, #12]
 8001382:	688a      	ldr	r2, [r1, #8]
 8001384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001388:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800138a:	684a      	ldr	r2, [r1, #4]
 800138c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001390:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001392:	680a      	ldr	r2, [r1, #0]
 8001394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001398:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800139a:	690a      	ldr	r2, [r1, #16]
 800139c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80013a2:	694a      	ldr	r2, [r1, #20]
 80013a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80013aa:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80013ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013b0:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80013b2:	6802      	ldr	r2, [r0, #0]
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80013b6:	2300      	movs	r3, #0
 80013b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80013bc:	4618      	mov	r0, r3
 80013be:	4770      	bx	lr
  __HAL_LOCK(htim);
 80013c0:	2002      	movs	r0, #2
}
 80013c2:	4770      	bx	lr

080013c4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80013c8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013ca:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80013cc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ce:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80013d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013d4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80013d6:	6133      	str	r3, [r6, #16]
{
 80013d8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013da:	6883      	ldr	r3, [r0, #8]
 80013dc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80013de:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013e0:	4303      	orrs	r3, r0
 80013e2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013e4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013e8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013ea:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ee:	430b      	orrs	r3, r1
 80013f0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80013f2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80013f4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80013f6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80013f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80013fc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001402:	6173      	str	r3, [r6, #20]
 8001404:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001406:	d17c      	bne.n	8001502 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001408:	429e      	cmp	r6, r3
 800140a:	d003      	beq.n	8001414 <UART_SetConfig+0x50>
 800140c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001410:	429e      	cmp	r6, r3
 8001412:	d144      	bne.n	800149e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001414:	f7ff fcb4 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 8001418:	2519      	movs	r5, #25
 800141a:	fb05 f300 	mul.w	r3, r5, r0
 800141e:	6860      	ldr	r0, [r4, #4]
 8001420:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001424:	0040      	lsls	r0, r0, #1
 8001426:	fbb3 f3f0 	udiv	r3, r3, r0
 800142a:	fbb3 f3f9 	udiv	r3, r3, r9
 800142e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001432:	f7ff fca5 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	4368      	muls	r0, r5
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001440:	f7ff fc9e 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 8001444:	6863      	ldr	r3, [r4, #4]
 8001446:	4368      	muls	r0, r5
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fbb0 f3f3 	udiv	r3, r0, r3
 800144e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001452:	fb09 7313 	mls	r3, r9, r3, r7
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	3332      	adds	r3, #50	; 0x32
 800145a:	fbb3 f3f9 	udiv	r3, r3, r9
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001464:	f7ff fc8c 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 8001468:	6862      	ldr	r2, [r4, #4]
 800146a:	4368      	muls	r0, r5
 800146c:	0052      	lsls	r2, r2, #1
 800146e:	fbb0 faf2 	udiv	sl, r0, r2
 8001472:	f7ff fc85 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001476:	6863      	ldr	r3, [r4, #4]
 8001478:	4368      	muls	r0, r5
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001480:	fbb3 f3f9 	udiv	r3, r3, r9
 8001484:	fb09 a313 	mls	r3, r9, r3, sl
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	3332      	adds	r3, #50	; 0x32
 800148c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001496:	443b      	add	r3, r7
 8001498:	60b3      	str	r3, [r6, #8]
 800149a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800149e:	f7ff fc5f 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80014a2:	2519      	movs	r5, #25
 80014a4:	fb05 f300 	mul.w	r3, r5, r0
 80014a8:	6860      	ldr	r0, [r4, #4]
 80014aa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014ae:	0040      	lsls	r0, r0, #1
 80014b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80014b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80014bc:	f7ff fc50 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80014c0:	6863      	ldr	r3, [r4, #4]
 80014c2:	4368      	muls	r0, r5
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fbb0 f7f3 	udiv	r7, r0, r3
 80014ca:	f7ff fc49 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	4368      	muls	r0, r5
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014dc:	fb09 7313 	mls	r3, r9, r3, r7
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	3332      	adds	r3, #50	; 0x32
 80014e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80014ee:	f7ff fc37 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80014f2:	6862      	ldr	r2, [r4, #4]
 80014f4:	4368      	muls	r0, r5
 80014f6:	0052      	lsls	r2, r2, #1
 80014f8:	fbb0 faf2 	udiv	sl, r0, r2
 80014fc:	f7ff fc30 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 8001500:	e7b9      	b.n	8001476 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001502:	429e      	cmp	r6, r3
 8001504:	d002      	beq.n	800150c <UART_SetConfig+0x148>
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <UART_SetConfig+0x230>)
 8001508:	429e      	cmp	r6, r3
 800150a:	d140      	bne.n	800158e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800150c:	f7ff fc38 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 8001510:	6867      	ldr	r7, [r4, #4]
 8001512:	2519      	movs	r5, #25
 8001514:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001518:	fb05 f300 	mul.w	r3, r5, r0
 800151c:	00bf      	lsls	r7, r7, #2
 800151e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001522:	fbb3 f3f9 	udiv	r3, r3, r9
 8001526:	011f      	lsls	r7, r3, #4
 8001528:	f7ff fc2a 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 800152c:	6863      	ldr	r3, [r4, #4]
 800152e:	4368      	muls	r0, r5
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	fbb0 f8f3 	udiv	r8, r0, r3
 8001536:	f7ff fc23 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	4368      	muls	r0, r5
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	fbb0 f3f3 	udiv	r3, r0, r3
 8001544:	fbb3 f3f9 	udiv	r3, r3, r9
 8001548:	fb09 8313 	mls	r3, r9, r3, r8
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	3332      	adds	r3, #50	; 0x32
 8001550:	fbb3 f3f9 	udiv	r3, r3, r9
 8001554:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001558:	f7ff fc12 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
 800155c:	6862      	ldr	r2, [r4, #4]
 800155e:	4368      	muls	r0, r5
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	fbb0 faf2 	udiv	sl, r0, r2
 8001566:	f7ff fc0b 	bl	8000d80 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800156a:	6863      	ldr	r3, [r4, #4]
 800156c:	4368      	muls	r0, r5
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fbb0 f3f3 	udiv	r3, r0, r3
 8001574:	fbb3 f3f9 	udiv	r3, r3, r9
 8001578:	fb09 a313 	mls	r3, r9, r3, sl
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	3332      	adds	r3, #50	; 0x32
 8001580:	fbb3 f3f9 	udiv	r3, r3, r9
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	ea43 0308 	orr.w	r3, r3, r8
 800158c:	e783      	b.n	8001496 <UART_SetConfig+0xd2>
 800158e:	f7ff fbe7 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 8001592:	6867      	ldr	r7, [r4, #4]
 8001594:	2519      	movs	r5, #25
 8001596:	f04f 0964 	mov.w	r9, #100	; 0x64
 800159a:	fb05 f300 	mul.w	r3, r5, r0
 800159e:	00bf      	lsls	r7, r7, #2
 80015a0:	fbb3 f3f7 	udiv	r3, r3, r7
 80015a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80015a8:	011f      	lsls	r7, r3, #4
 80015aa:	f7ff fbd9 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80015ae:	6863      	ldr	r3, [r4, #4]
 80015b0:	4368      	muls	r0, r5
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	fbb0 f8f3 	udiv	r8, r0, r3
 80015b8:	f7ff fbd2 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80015bc:	6863      	ldr	r3, [r4, #4]
 80015be:	4368      	muls	r0, r5
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80015ca:	fb09 8313 	mls	r3, r9, r3, r8
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	3332      	adds	r3, #50	; 0x32
 80015d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80015d6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80015da:	f7ff fbc1 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80015de:	6862      	ldr	r2, [r4, #4]
 80015e0:	4368      	muls	r0, r5
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	fbb0 faf2 	udiv	sl, r0, r2
 80015e8:	f7ff fbba 	bl	8000d60 <HAL_RCC_GetPCLK1Freq>
 80015ec:	e7bd      	b.n	800156a <UART_SetConfig+0x1a6>
 80015ee:	bf00      	nop
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40011400 	.word	0x40011400

080015f8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fa:	4604      	mov	r4, r0
 80015fc:	460e      	mov	r6, r1
 80015fe:	4617      	mov	r7, r2
 8001600:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001602:	6821      	ldr	r1, [r4, #0]
 8001604:	680b      	ldr	r3, [r1, #0]
 8001606:	ea36 0303 	bics.w	r3, r6, r3
 800160a:	d101      	bne.n	8001610 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800160c:	2000      	movs	r0, #0
}
 800160e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001610:	1c6b      	adds	r3, r5, #1
 8001612:	d0f7      	beq.n	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001614:	b995      	cbnz	r5, 800163c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800161e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001628:	2320      	movs	r3, #32
 800162a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800162e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001632:	2300      	movs	r3, #0
 8001634:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001638:	2003      	movs	r0, #3
 800163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800163c:	f7fe fffa 	bl	8000634 <HAL_GetTick>
 8001640:	1bc0      	subs	r0, r0, r7
 8001642:	4285      	cmp	r5, r0
 8001644:	d2dd      	bcs.n	8001602 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001646:	e7e6      	b.n	8001616 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001648 <HAL_UART_Init>:
{
 8001648:	b510      	push	{r4, lr}
  if(huart == NULL)
 800164a:	4604      	mov	r4, r0
 800164c:	b340      	cbz	r0, 80016a0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800164e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001656:	b91b      	cbnz	r3, 8001660 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001658:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800165c:	f000 fb56 	bl	8001d0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001660:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001662:	2324      	movs	r3, #36	; 0x24
 8001664:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001668:	68d3      	ldr	r3, [r2, #12]
 800166a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800166e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff fea7 	bl	80013c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800167e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001686:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800168e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001690:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001692:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001694:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001696:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800169a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800169e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
}
 80016a2:	bd10      	pop	{r4, pc}

080016a4 <HAL_UART_Transmit>:
{
 80016a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80016aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016ae:	2b20      	cmp	r3, #32
{
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80016b6:	d14f      	bne.n	8001758 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80016b8:	2900      	cmp	r1, #0
 80016ba:	d04a      	beq.n	8001752 <HAL_UART_Transmit+0xae>
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d048      	beq.n	8001752 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80016c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d047      	beq.n	8001758 <HAL_UART_Transmit+0xb4>
 80016c8:	2301      	movs	r3, #1
 80016ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016d2:	2321      	movs	r3, #33	; 0x21
 80016d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80016d8:	f7fe ffac 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80016e0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80016e2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80016e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b96b      	cbnz	r3, 8001708 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4632      	mov	r2, r6
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff ff80 	bl	80015f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016f8:	b9b0      	cbnz	r0, 8001728 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80016fa:	2320      	movs	r3, #32
 80016fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001700:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001708:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800170a:	3b01      	subs	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001710:	68a3      	ldr	r3, [r4, #8]
 8001712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001716:	4632      	mov	r2, r6
 8001718:	463b      	mov	r3, r7
 800171a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800171e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001720:	d10e      	bne.n	8001740 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001722:	f7ff ff69 	bl	80015f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001726:	b110      	cbz	r0, 800172e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001728:	2003      	movs	r0, #3
 800172a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800172e:	882b      	ldrh	r3, [r5, #0]
 8001730:	6822      	ldr	r2, [r4, #0]
 8001732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001736:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001738:	6923      	ldr	r3, [r4, #16]
 800173a:	b943      	cbnz	r3, 800174e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800173c:	3502      	adds	r5, #2
 800173e:	e7d2      	b.n	80016e6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001740:	f7ff ff5a 	bl	80015f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001744:	2800      	cmp	r0, #0
 8001746:	d1ef      	bne.n	8001728 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	782a      	ldrb	r2, [r5, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	3501      	adds	r5, #1
 8001750:	e7c9      	b.n	80016e6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001758:	2002      	movs	r0, #2
}
 800175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001760:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	2214      	movs	r2, #20
{
 8001764:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	eb0d 0002 	add.w	r0, sp, r2
 800176a:	2100      	movs	r1, #0
 800176c:	f000 fb50 	bl	8001e10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_GPIO_Init+0x7c>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001772:	481b      	ldr	r0, [pc, #108]	; (80017e0 <MX_GPIO_Init+0x80>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001774:	2200      	movs	r2, #0
 8001776:	9201      	str	r2, [sp, #4]
 8001778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800177a:	f041 0104 	orr.w	r1, r1, #4
 800177e:	6319      	str	r1, [r3, #48]	; 0x30
 8001780:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001782:	f001 0104 	and.w	r1, r1, #4
 8001786:	9101      	str	r1, [sp, #4]
 8001788:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	9202      	str	r2, [sp, #8]
 800178c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800178e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001792:	6319      	str	r1, [r3, #48]	; 0x30
 8001794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001796:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800179a:	9102      	str	r1, [sp, #8]
 800179c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	9203      	str	r2, [sp, #12]
 80017a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a2:	f041 0101 	orr.w	r1, r1, #1
 80017a6:	6319      	str	r1, [r3, #48]	; 0x30
 80017a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017aa:	f001 0101 	and.w	r1, r1, #1
 80017ae:	9103      	str	r1, [sp, #12]
 80017b0:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	9204      	str	r2, [sp, #16]
 80017b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b6:	f042 0202 	orr.w	r2, r2, #2
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	9304      	str	r3, [sp, #16]
 80017c4:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 80017c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ca:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <MX_GPIO_Init+0x84>)
 80017d0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f7fe ffa5 	bl	8000720 <HAL_GPIO_Init>

}
 80017d6:	b00b      	add	sp, #44	; 0x2c
 80017d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	10210000 	.word	0x10210000

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b530      	push	{r4, r5, lr}
 80017ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ec:	2230      	movs	r2, #48	; 0x30
 80017ee:	2100      	movs	r1, #0
 80017f0:	a808      	add	r0, sp, #32
 80017f2:	f000 fb0d 	bl	8001e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f6:	2100      	movs	r1, #0
 80017f8:	2214      	movs	r2, #20
 80017fa:	a803      	add	r0, sp, #12
 80017fc:	f000 fb08 	bl	8001e10 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2500      	movs	r5, #0
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <SystemClock_Config+0x8c>)
 8001804:	9501      	str	r5, [sp, #4]
 8001806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001808:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001810:	4a19      	ldr	r2, [pc, #100]	; (8001878 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800181a:	9502      	str	r5, [sp, #8]
 800181c:	6813      	ldr	r3, [r2, #0]
 800181e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800182a:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800182c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001834:	2301      	movs	r3, #1
 8001836:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001838:	2310      	movs	r3, #16
 800183a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 800183c:	2308      	movs	r3, #8
 800183e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001840:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001842:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001844:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001846:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001848:	2307      	movs	r3, #7
 800184a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001850:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f7ff f83b 	bl	80008cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001856:	230f      	movs	r3, #15
 8001858:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800185a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001860:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001862:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001866:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001868:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186a:	f7ff f9df 	bl	8000c2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800186e:	b015      	add	sp, #84	; 0x54
 8001870:	bd30      	pop	{r4, r5, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <main>:
{
 800187c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 800187e:	f7fe feb3 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001882:	f7ff ffb1 	bl	80017e8 <SystemClock_Config>
  MX_GPIO_Init();
 8001886:	f7ff ff6b 	bl	8001760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800188a:	f000 fa23 	bl	8001cd4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800188e:	f000 f981 	bl	8001b94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001892:	f000 f9e7 	bl	8001c64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001896:	f000 f885 	bl	80019a4 <MX_TIM3_Init>
  MX_TIM11_Init();
 800189a:	f000 f8b3 	bl	8001a04 <MX_TIM11_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // sa ovim startujes tajmer
 800189e:	2100      	movs	r1, #0
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <main+0x74>)
	  snprintf(p, sizeof(p), "%d\n\r", __HAL_TIM_GET_COUNTER(&htim3));
 80018a2:	4e14      	ldr	r6, [pc, #80]	; (80018f4 <main+0x78>)
 80018a4:	4d14      	ldr	r5, [pc, #80]	; (80018f8 <main+0x7c>)
	  HAL_UART_Transmit(&huart2, p, strlen(p),10);
 80018a6:	4c15      	ldr	r4, [pc, #84]	; (80018fc <main+0x80>)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // sa ovim startujes tajmer
 80018a8:	f7ff fd2e 	bl	8001308 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80018ac:	2100      	movs	r1, #0
 80018ae:	4811      	ldr	r0, [pc, #68]	; (80018f4 <main+0x78>)
 80018b0:	f7ff faea 	bl	8000e88 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80018b4:	2104      	movs	r1, #4
 80018b6:	480f      	ldr	r0, [pc, #60]	; (80018f4 <main+0x78>)
 80018b8:	f7ff fae6 	bl	8000e88 <HAL_TIM_Encoder_Start>
	  char p[20] = "";
 80018bc:	2100      	movs	r1, #0
 80018be:	2210      	movs	r2, #16
 80018c0:	a802      	add	r0, sp, #8
 80018c2:	9101      	str	r1, [sp, #4]
 80018c4:	f000 faa4 	bl	8001e10 <memset>
	  snprintf(p, sizeof(p), "%d\n\r", __HAL_TIM_GET_COUNTER(&htim3));
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	462a      	mov	r2, r5
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	2114      	movs	r1, #20
 80018d0:	a801      	add	r0, sp, #4
 80018d2:	f000 faa5 	bl	8001e20 <sniprintf>
	  HAL_UART_Transmit(&huart2, p, strlen(p),10);
 80018d6:	a801      	add	r0, sp, #4
 80018d8:	f7fe fc82 	bl	80001e0 <strlen>
 80018dc:	230a      	movs	r3, #10
 80018de:	b282      	uxth	r2, r0
 80018e0:	a901      	add	r1, sp, #4
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff fede 	bl	80016a4 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f7fe fea9 	bl	8000640 <HAL_Delay>
 80018ee:	e7e5      	b.n	80018bc <main+0x40>
 80018f0:	20000150 	.word	0x20000150
 80018f4:	2000009c 	.word	0x2000009c
 80018f8:	080026b0 	.word	0x080026b0
 80018fc:	2000018c 	.word	0x2000018c

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	4770      	bx	lr
	...

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_MspInit+0x3c>)
 8001908:	2100      	movs	r1, #0
 800190a:	9100      	str	r1, [sp, #0]
 800190c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800190e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
 8001914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001916:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800191a:	9200      	str	r2, [sp, #0]
 800191c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	9101      	str	r1, [sp, #4]
 8001920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001922:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001930:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001934:	f7fe fe98 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001938:	b003      	add	sp, #12
 800193a:	f85d fb04 	ldr.w	pc, [sp], #4
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <NMI_Handler>:
 8001944:	4770      	bx	lr

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	e7fe      	b.n	800194a <BusFault_Handler>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler>

0800194e <SVC_Handler>:
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f7fe be62 	b.w	800061c <HAL_IncTick>

08001958 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	490f      	ldr	r1, [pc, #60]	; (8001998 <SystemInit+0x40>)
 800195a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800195e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <SystemInit+0x44>)
 8001968:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800196a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800196c:	f042 0201 	orr.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001972:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800197a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800197e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <SystemInit+0x48>)
 8001982:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800198a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800198c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800198e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001992:	608b      	str	r3, [r1, #8]
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00
 800199c:	40023800 	.word	0x40023800
 80019a0:	24003010 	.word	0x24003010

080019a4 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019a4:	b510      	push	{r4, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019a8:	2224      	movs	r2, #36	; 0x24
 80019aa:	2100      	movs	r1, #0
 80019ac:	a803      	add	r0, sp, #12
 80019ae:	f000 fa2f 	bl	8001e10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
 80019b2:	4812      	ldr	r0, [pc, #72]	; (80019fc <MX_TIM3_Init+0x58>)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_TIM3_Init+0x5c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	2400      	movs	r4, #0
  htim3.Init.Prescaler = 0;
 80019b8:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 60000;
 80019bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80019c0:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019c2:	2303      	movs	r3, #3
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019c4:	2201      	movs	r2, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019c6:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 8;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 8;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019c8:	a903      	add	r1, sp, #12
  sConfig.IC1Filter = 8;
 80019ca:	2308      	movs	r3, #8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	9401      	str	r4, [sp, #4]
 80019ce:	9402      	str	r4, [sp, #8]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	6084      	str	r4, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	6104      	str	r4, [r0, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019d4:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 8;
 80019d6:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019d8:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 8;
 80019da:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019dc:	f7ff fbb0 	bl	8001140 <HAL_TIM_Encoder_Init>
 80019e0:	b108      	cbz	r0, 80019e6 <MX_TIM3_Init+0x42>
  {
    Error_Handler();
 80019e2:	f7ff ff8d 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e6:	a901      	add	r1, sp, #4
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_TIM3_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ee:	f7ff fca1 	bl	8001334 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	b108      	cbz	r0, 80019f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019f4:	f7ff ff84 	bl	8001900 <Error_Handler>
  }

}
 80019f8:	b00c      	add	sp, #48	; 0x30
 80019fa:	bd10      	pop	{r4, pc}
 80019fc:	2000009c 	.word	0x2000009c
 8001a00:	40000400 	.word	0x40000400

08001a04 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{

  htim11.Instance = TIM11;
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <MX_TIM11_Init+0x28>)
  htim11.Init.Prescaler = 84;
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <MX_TIM11_Init+0x2c>)
{
 8001a08:	b508      	push	{r3, lr}
  htim11.Init.Prescaler = 84;
 8001a0a:	2354      	movs	r3, #84	; 0x54
 8001a0c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 1000;
 8001a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	2300      	movs	r3, #0
 8001a16:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 1000;
 8001a18:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a1c:	f7ff fb5c 	bl	80010d8 <HAL_TIM_Base_Init>
 8001a20:	b118      	cbz	r0, 8001a2a <MX_TIM11_Init+0x26>
  {
    Error_Handler();
  }

}
 8001a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a26:	f7ff bf6b 	b.w	8001900 <Error_Handler>
 8001a2a:	bd08      	pop	{r3, pc}
 8001a2c:	200000d8 	.word	0x200000d8
 8001a30:	40014800 	.word	0x40014800

08001a34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001a34:	6803      	ldr	r3, [r0, #0]
 8001a36:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_TIM_Base_MspInit+0x48>)
 8001a38:	4293      	cmp	r3, r2
{
 8001a3a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001a3c:	d10d      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_TIM_Base_MspInit+0x4c>)
 8001a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001a56:	b002      	add	sp, #8
 8001a58:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM11)
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_TIM_Base_MspInit+0x50>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d1fa      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_TIM_Base_MspInit+0x4c>)
 8001a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	9b01      	ldr	r3, [sp, #4]
}
 8001a78:	e7ed      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x22>
 8001a7a:	bf00      	nop
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40014800 	.word	0x40014800

08001a88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8001a88:	6803      	ldr	r3, [r0, #0]
 8001a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001a8e:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM2)
 8001a90:	d10b      	bne.n	8001aaa <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_TIM_PWM_MspInit+0x28>)
 8001a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001aaa:	b002      	add	sp, #8
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	2214      	movs	r2, #20
 8001abc:	2100      	movs	r1, #0
 8001abe:	a803      	add	r0, sp, #12
 8001ac0:	f000 f9a6 	bl	8001e10 <memset>
  if(tim_encoderHandle->Instance==TIM3)
 8001ac4:	6822      	ldr	r2, [r4, #0]
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_TIM_Encoder_MspInit+0x60>)
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d121      	bne.n	8001b10 <HAL_TIM_Encoder_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001acc:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	9101      	str	r1, [sp, #4]
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	4810      	ldr	r0, [pc, #64]	; (8001b18 <HAL_TIM_Encoder_MspInit+0x64>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad8:	f042 0202 	orr.w	r2, r2, #2
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae0:	f002 0202 	and.w	r2, r2, #2
 8001ae4:	9201      	str	r2, [sp, #4]
 8001ae6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	9102      	str	r1, [sp, #8]
 8001aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001afc:	23c0      	movs	r3, #192	; 0xc0
 8001afe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b00:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f7fe fe08 	bl	8000720 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b10:	b008      	add	sp, #32
 8001b12:	bd10      	pop	{r4, pc}
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40020000 	.word	0x40020000

08001b1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	4604      	mov	r4, r0
 8001b20:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	2214      	movs	r2, #20
 8001b24:	2100      	movs	r1, #0
 8001b26:	a803      	add	r0, sp, #12
 8001b28:	f000 f972 	bl	8001e10 <memset>
  if(timHandle->Instance==TIM1)
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_TIM_MspPostInit+0x6c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d118      	bne.n	8001b66 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_TIM_MspPostInit+0x70>)
 8001b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b58:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f7fe fddf 	bl	8000720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b62:	b008      	add	sp, #32
 8001b64:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM2)
 8001b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6a:	d1fa      	bne.n	8001b62 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_TIM_MspPostInit+0x70>)
 8001b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b84:	2320      	movs	r3, #32
 8001b86:	e7e3      	b.n	8001b50 <HAL_TIM_MspPostInit+0x34>
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000

08001b94 <MX_TIM1_Init>:
{
 8001b94:	b510      	push	{r4, lr}
 8001b96:	b094      	sub	sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	a802      	add	r0, sp, #8
 8001ba0:	f000 f936 	bl	8001e10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	221c      	movs	r2, #28
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001baa:	9400      	str	r4, [sp, #0]
 8001bac:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	f000 f92f 	bl	8001e10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bb2:	221c      	movs	r2, #28
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	a80d      	add	r0, sp, #52	; 0x34
 8001bb8:	f000 f92a 	bl	8001e10 <memset>
  htim1.Instance = TIM1;
 8001bbc:	4827      	ldr	r0, [pc, #156]	; (8001c5c <MX_TIM1_Init+0xc8>)
  htim1.Init.Prescaler = 4;
 8001bbe:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <MX_TIM1_Init+0xcc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 4;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 1000;
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bce:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bd0:	6144      	str	r4, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd2:	f7ff fa81 	bl	80010d8 <HAL_TIM_Base_Init>
 8001bd6:	b108      	cbz	r0, 8001bdc <MX_TIM1_Init+0x48>
    Error_Handler();
 8001bd8:	f7ff fe92 	bl	8001900 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be0:	a902      	add	r1, sp, #8
 8001be2:	481e      	ldr	r0, [pc, #120]	; (8001c5c <MX_TIM1_Init+0xc8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be6:	f7ff f971 	bl	8000ecc <HAL_TIM_ConfigClockSource>
 8001bea:	b108      	cbz	r0, 8001bf0 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8001bec:	f7ff fe88 	bl	8001900 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf0:	481a      	ldr	r0, [pc, #104]	; (8001c5c <MX_TIM1_Init+0xc8>)
 8001bf2:	f7ff fa8b 	bl	800110c <HAL_TIM_PWM_Init>
 8001bf6:	b108      	cbz	r0, 8001bfc <MX_TIM1_Init+0x68>
    Error_Handler();
 8001bf8:	f7ff fe82 	bl	8001900 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bfe:	4669      	mov	r1, sp
 8001c00:	4816      	ldr	r0, [pc, #88]	; (8001c5c <MX_TIM1_Init+0xc8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c06:	f7ff fb95 	bl	8001334 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	b108      	cbz	r0, 8001c10 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8001c0c:	f7ff fe78 	bl	8001900 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c10:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c12:	2200      	movs	r2, #0
 8001c14:	a906      	add	r1, sp, #24
 8001c16:	4811      	ldr	r0, [pc, #68]	; (8001c5c <MX_TIM1_Init+0xc8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c18:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8001c1a:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1c:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c1e:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c20:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c22:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c24:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c26:	f7ff fb01 	bl	800122c <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	b108      	cbz	r0, 8001c30 <MX_TIM1_Init+0x9c>
    Error_Handler();
 8001c2c:	f7ff fe68 	bl	8001900 <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c30:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c36:	a90d      	add	r1, sp, #52	; 0x34
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <MX_TIM1_Init+0xc8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c3a:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c3c:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3e:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c40:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c42:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c44:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c46:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c48:	f7ff fb96 	bl	8001378 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c4c:	b108      	cbz	r0, 8001c52 <MX_TIM1_Init+0xbe>
    Error_Handler();
 8001c4e:	f7ff fe57 	bl	8001900 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <MX_TIM1_Init+0xc8>)
 8001c54:	f7ff ff62 	bl	8001b1c <HAL_TIM_MspPostInit>
}
 8001c58:	b014      	add	sp, #80	; 0x50
 8001c5a:	bd10      	pop	{r4, pc}
 8001c5c:	20000114 	.word	0x20000114
 8001c60:	40010000 	.word	0x40010000

08001c64 <MX_TIM2_Init>:
{
 8001c64:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c66:	2400      	movs	r4, #0
{
 8001c68:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6a:	221c      	movs	r2, #28
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	9401      	str	r4, [sp, #4]
 8001c72:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c74:	f000 f8cc 	bl	8001e10 <memset>
  htim2.Instance = TIM2;
 8001c78:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 4;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c80:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 1000;
 8001c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 1000;
 8001c8a:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8c:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c8e:	f7ff fa3d 	bl	800110c <HAL_TIM_PWM_Init>
 8001c92:	b108      	cbz	r0, 8001c98 <MX_TIM2_Init+0x34>
    Error_Handler();
 8001c94:	f7ff fe34 	bl	8001900 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c98:	a901      	add	r1, sp, #4
 8001c9a:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	f7ff fb48 	bl	8001334 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	b108      	cbz	r0, 8001caa <MX_TIM2_Init+0x46>
    Error_Handler();
 8001ca6:	f7ff fe2b 	bl	8001900 <Error_Handler>
  sConfigOC.Pulse = 0;
 8001caa:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cac:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cae:	a903      	add	r1, sp, #12
 8001cb0:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <MX_TIM2_Init+0x6c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8001cb4:	9204      	str	r2, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb6:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb8:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cba:	f7ff fab7 	bl	800122c <HAL_TIM_PWM_ConfigChannel>
 8001cbe:	b108      	cbz	r0, 8001cc4 <MX_TIM2_Init+0x60>
    Error_Handler();
 8001cc0:	f7ff fe1e 	bl	8001900 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <MX_TIM2_Init+0x6c>)
 8001cc6:	f7ff ff29 	bl	8001b1c <HAL_TIM_MspPostInit>
}
 8001cca:	b00a      	add	sp, #40	; 0x28
 8001ccc:	bd10      	pop	{r4, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000150 	.word	0x20000150

08001cd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART2_UART_Init+0x34>)
 8001cda:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001cde:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cea:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cec:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf2:	f7ff fca9 	bl	8001648 <HAL_UART_Init>
 8001cf6:	b118      	cbz	r0, 8001d00 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001cfc:	f7ff be00 	b.w	8001900 <Error_Handler>
 8001d00:	bd08      	pop	{r3, pc}
 8001d02:	bf00      	nop
 8001d04:	2000018c 	.word	0x2000018c
 8001d08:	40004400 	.word	0x40004400

08001d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	4604      	mov	r4, r0
 8001d10:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	2214      	movs	r2, #20
 8001d14:	2100      	movs	r1, #0
 8001d16:	a803      	add	r0, sp, #12
 8001d18:	f000 f87a 	bl	8001e10 <memset>
  if(uartHandle->Instance==USART2)
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_UART_MspInit+0x60>)
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d120      	bne.n	8001d66 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d24:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001d28:	2100      	movs	r1, #0
 8001d2a:	9101      	str	r1, [sp, #4]
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	4810      	ldr	r0, [pc, #64]	; (8001d70 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d30:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
 8001d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d38:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d3c:	9201      	str	r2, [sp, #4]
 8001d3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	9102      	str	r1, [sp, #8]
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	9302      	str	r3, [sp, #8]
 8001d52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d54:	230c      	movs	r3, #12
 8001d56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5e:	2307      	movs	r3, #7
 8001d60:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f7fe fcdd 	bl	8000720 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d66:	b008      	add	sp, #32
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	40020000 	.word	0x40020000

08001d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d7a:	e003      	b.n	8001d84 <LoopCopyDataInit>

08001d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d82:	3104      	adds	r1, #4

08001d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d8c:	d3f6      	bcc.n	8001d7c <CopyDataInit>
  ldr  r2, =_sbss
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d90:	e002      	b.n	8001d98 <LoopFillZerobss>

08001d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d94:	f842 3b04 	str.w	r3, [r2], #4

08001d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d9c:	d3f9      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d9e:	f7ff fddb 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da2:	f000 f811 	bl	8001dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff fd69 	bl	800187c <main>
  bx  lr    
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dac:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001db0:	08002710 	.word	0x08002710
  ldr  r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001db8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001dbc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001dc0:	200001d0 	.word	0x200001d0

08001dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC_IRQHandler>
	...

08001dc8 <__libc_init_array>:
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	4e0d      	ldr	r6, [pc, #52]	; (8001e00 <__libc_init_array+0x38>)
 8001dcc:	4c0d      	ldr	r4, [pc, #52]	; (8001e04 <__libc_init_array+0x3c>)
 8001dce:	1ba4      	subs	r4, r4, r6
 8001dd0:	10a4      	asrs	r4, r4, #2
 8001dd2:	2500      	movs	r5, #0
 8001dd4:	42a5      	cmp	r5, r4
 8001dd6:	d109      	bne.n	8001dec <__libc_init_array+0x24>
 8001dd8:	4e0b      	ldr	r6, [pc, #44]	; (8001e08 <__libc_init_array+0x40>)
 8001dda:	4c0c      	ldr	r4, [pc, #48]	; (8001e0c <__libc_init_array+0x44>)
 8001ddc:	f000 fc5c 	bl	8002698 <_init>
 8001de0:	1ba4      	subs	r4, r4, r6
 8001de2:	10a4      	asrs	r4, r4, #2
 8001de4:	2500      	movs	r5, #0
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	d105      	bne.n	8001df6 <__libc_init_array+0x2e>
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001df0:	4798      	blx	r3
 8001df2:	3501      	adds	r5, #1
 8001df4:	e7ee      	b.n	8001dd4 <__libc_init_array+0xc>
 8001df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dfa:	4798      	blx	r3
 8001dfc:	3501      	adds	r5, #1
 8001dfe:	e7f2      	b.n	8001de6 <__libc_init_array+0x1e>
 8001e00:	08002708 	.word	0x08002708
 8001e04:	08002708 	.word	0x08002708
 8001e08:	08002708 	.word	0x08002708
 8001e0c:	0800270c 	.word	0x0800270c

08001e10 <memset>:
 8001e10:	4402      	add	r2, r0
 8001e12:	4603      	mov	r3, r0
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d100      	bne.n	8001e1a <memset+0xa>
 8001e18:	4770      	bx	lr
 8001e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e1e:	e7f9      	b.n	8001e14 <memset+0x4>

08001e20 <sniprintf>:
 8001e20:	b40c      	push	{r2, r3}
 8001e22:	b530      	push	{r4, r5, lr}
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <sniprintf+0x64>)
 8001e26:	1e0c      	subs	r4, r1, #0
 8001e28:	b09d      	sub	sp, #116	; 0x74
 8001e2a:	681d      	ldr	r5, [r3, #0]
 8001e2c:	da08      	bge.n	8001e40 <sniprintf+0x20>
 8001e2e:	238b      	movs	r3, #139	; 0x8b
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e36:	b01d      	add	sp, #116	; 0x74
 8001e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e3c:	b002      	add	sp, #8
 8001e3e:	4770      	bx	lr
 8001e40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001e44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001e48:	bf14      	ite	ne
 8001e4a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001e4e:	4623      	moveq	r3, r4
 8001e50:	9304      	str	r3, [sp, #16]
 8001e52:	9307      	str	r3, [sp, #28]
 8001e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e58:	9002      	str	r0, [sp, #8]
 8001e5a:	9006      	str	r0, [sp, #24]
 8001e5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001e60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001e62:	ab21      	add	r3, sp, #132	; 0x84
 8001e64:	a902      	add	r1, sp, #8
 8001e66:	4628      	mov	r0, r5
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	f000 f869 	bl	8001f40 <_svfiprintf_r>
 8001e6e:	1c43      	adds	r3, r0, #1
 8001e70:	bfbc      	itt	lt
 8001e72:	238b      	movlt	r3, #139	; 0x8b
 8001e74:	602b      	strlt	r3, [r5, #0]
 8001e76:	2c00      	cmp	r4, #0
 8001e78:	d0dd      	beq.n	8001e36 <sniprintf+0x16>
 8001e7a:	9b02      	ldr	r3, [sp, #8]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e7d9      	b.n	8001e36 <sniprintf+0x16>
 8001e82:	bf00      	nop
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <__ssputs_r>:
 8001e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e8c:	688e      	ldr	r6, [r1, #8]
 8001e8e:	429e      	cmp	r6, r3
 8001e90:	4682      	mov	sl, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	4691      	mov	r9, r2
 8001e96:	4698      	mov	r8, r3
 8001e98:	d835      	bhi.n	8001f06 <__ssputs_r+0x7e>
 8001e9a:	898a      	ldrh	r2, [r1, #12]
 8001e9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ea0:	d031      	beq.n	8001f06 <__ssputs_r+0x7e>
 8001ea2:	6825      	ldr	r5, [r4, #0]
 8001ea4:	6909      	ldr	r1, [r1, #16]
 8001ea6:	1a6f      	subs	r7, r5, r1
 8001ea8:	6965      	ldr	r5, [r4, #20]
 8001eaa:	2302      	movs	r3, #2
 8001eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001eb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8001eb4:	f108 0301 	add.w	r3, r8, #1
 8001eb8:	443b      	add	r3, r7
 8001eba:	429d      	cmp	r5, r3
 8001ebc:	bf38      	it	cc
 8001ebe:	461d      	movcc	r5, r3
 8001ec0:	0553      	lsls	r3, r2, #21
 8001ec2:	d531      	bpl.n	8001f28 <__ssputs_r+0xa0>
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f000 fb39 	bl	800253c <_malloc_r>
 8001eca:	4606      	mov	r6, r0
 8001ecc:	b950      	cbnz	r0, 8001ee4 <__ssputs_r+0x5c>
 8001ece:	230c      	movs	r3, #12
 8001ed0:	f8ca 3000 	str.w	r3, [sl]
 8001ed4:	89a3      	ldrh	r3, [r4, #12]
 8001ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eda:	81a3      	strh	r3, [r4, #12]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ee4:	463a      	mov	r2, r7
 8001ee6:	6921      	ldr	r1, [r4, #16]
 8001ee8:	f000 fab4 	bl	8002454 <memcpy>
 8001eec:	89a3      	ldrh	r3, [r4, #12]
 8001eee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef6:	81a3      	strh	r3, [r4, #12]
 8001ef8:	6126      	str	r6, [r4, #16]
 8001efa:	6165      	str	r5, [r4, #20]
 8001efc:	443e      	add	r6, r7
 8001efe:	1bed      	subs	r5, r5, r7
 8001f00:	6026      	str	r6, [r4, #0]
 8001f02:	60a5      	str	r5, [r4, #8]
 8001f04:	4646      	mov	r6, r8
 8001f06:	4546      	cmp	r6, r8
 8001f08:	bf28      	it	cs
 8001f0a:	4646      	movcs	r6, r8
 8001f0c:	4632      	mov	r2, r6
 8001f0e:	4649      	mov	r1, r9
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	f000 faaa 	bl	800246a <memmove>
 8001f16:	68a3      	ldr	r3, [r4, #8]
 8001f18:	1b9b      	subs	r3, r3, r6
 8001f1a:	60a3      	str	r3, [r4, #8]
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	441e      	add	r6, r3
 8001f20:	6026      	str	r6, [r4, #0]
 8001f22:	2000      	movs	r0, #0
 8001f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f28:	462a      	mov	r2, r5
 8001f2a:	f000 fb65 	bl	80025f8 <_realloc_r>
 8001f2e:	4606      	mov	r6, r0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d1e1      	bne.n	8001ef8 <__ssputs_r+0x70>
 8001f34:	6921      	ldr	r1, [r4, #16]
 8001f36:	4650      	mov	r0, sl
 8001f38:	f000 fab2 	bl	80024a0 <_free_r>
 8001f3c:	e7c7      	b.n	8001ece <__ssputs_r+0x46>
	...

08001f40 <_svfiprintf_r>:
 8001f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f44:	b09d      	sub	sp, #116	; 0x74
 8001f46:	4680      	mov	r8, r0
 8001f48:	9303      	str	r3, [sp, #12]
 8001f4a:	898b      	ldrh	r3, [r1, #12]
 8001f4c:	061c      	lsls	r4, r3, #24
 8001f4e:	460d      	mov	r5, r1
 8001f50:	4616      	mov	r6, r2
 8001f52:	d50f      	bpl.n	8001f74 <_svfiprintf_r+0x34>
 8001f54:	690b      	ldr	r3, [r1, #16]
 8001f56:	b96b      	cbnz	r3, 8001f74 <_svfiprintf_r+0x34>
 8001f58:	2140      	movs	r1, #64	; 0x40
 8001f5a:	f000 faef 	bl	800253c <_malloc_r>
 8001f5e:	6028      	str	r0, [r5, #0]
 8001f60:	6128      	str	r0, [r5, #16]
 8001f62:	b928      	cbnz	r0, 8001f70 <_svfiprintf_r+0x30>
 8001f64:	230c      	movs	r3, #12
 8001f66:	f8c8 3000 	str.w	r3, [r8]
 8001f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f6e:	e0c5      	b.n	80020fc <_svfiprintf_r+0x1bc>
 8001f70:	2340      	movs	r3, #64	; 0x40
 8001f72:	616b      	str	r3, [r5, #20]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9309      	str	r3, [sp, #36]	; 0x24
 8001f78:	2320      	movs	r3, #32
 8001f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f7e:	2330      	movs	r3, #48	; 0x30
 8001f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f84:	f04f 0b01 	mov.w	fp, #1
 8001f88:	4637      	mov	r7, r6
 8001f8a:	463c      	mov	r4, r7
 8001f8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d13c      	bne.n	800200e <_svfiprintf_r+0xce>
 8001f94:	ebb7 0a06 	subs.w	sl, r7, r6
 8001f98:	d00b      	beq.n	8001fb2 <_svfiprintf_r+0x72>
 8001f9a:	4653      	mov	r3, sl
 8001f9c:	4632      	mov	r2, r6
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	4640      	mov	r0, r8
 8001fa2:	f7ff ff71 	bl	8001e88 <__ssputs_r>
 8001fa6:	3001      	adds	r0, #1
 8001fa8:	f000 80a3 	beq.w	80020f2 <_svfiprintf_r+0x1b2>
 8001fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fae:	4453      	add	r3, sl
 8001fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8001fb2:	783b      	ldrb	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 809c 	beq.w	80020f2 <_svfiprintf_r+0x1b2>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc0:	9304      	str	r3, [sp, #16]
 8001fc2:	9307      	str	r3, [sp, #28]
 8001fc4:	9205      	str	r2, [sp, #20]
 8001fc6:	9306      	str	r3, [sp, #24]
 8001fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8001fce:	2205      	movs	r2, #5
 8001fd0:	7821      	ldrb	r1, [r4, #0]
 8001fd2:	4850      	ldr	r0, [pc, #320]	; (8002114 <_svfiprintf_r+0x1d4>)
 8001fd4:	f7fe f90c 	bl	80001f0 <memchr>
 8001fd8:	1c67      	adds	r7, r4, #1
 8001fda:	9b04      	ldr	r3, [sp, #16]
 8001fdc:	b9d8      	cbnz	r0, 8002016 <_svfiprintf_r+0xd6>
 8001fde:	06d9      	lsls	r1, r3, #27
 8001fe0:	bf44      	itt	mi
 8001fe2:	2220      	movmi	r2, #32
 8001fe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fe8:	071a      	lsls	r2, r3, #28
 8001fea:	bf44      	itt	mi
 8001fec:	222b      	movmi	r2, #43	; 0x2b
 8001fee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ff2:	7822      	ldrb	r2, [r4, #0]
 8001ff4:	2a2a      	cmp	r2, #42	; 0x2a
 8001ff6:	d016      	beq.n	8002026 <_svfiprintf_r+0xe6>
 8001ff8:	9a07      	ldr	r2, [sp, #28]
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	200a      	movs	r0, #10
 8001ffe:	4627      	mov	r7, r4
 8002000:	3401      	adds	r4, #1
 8002002:	783b      	ldrb	r3, [r7, #0]
 8002004:	3b30      	subs	r3, #48	; 0x30
 8002006:	2b09      	cmp	r3, #9
 8002008:	d951      	bls.n	80020ae <_svfiprintf_r+0x16e>
 800200a:	b1c9      	cbz	r1, 8002040 <_svfiprintf_r+0x100>
 800200c:	e011      	b.n	8002032 <_svfiprintf_r+0xf2>
 800200e:	2b25      	cmp	r3, #37	; 0x25
 8002010:	d0c0      	beq.n	8001f94 <_svfiprintf_r+0x54>
 8002012:	4627      	mov	r7, r4
 8002014:	e7b9      	b.n	8001f8a <_svfiprintf_r+0x4a>
 8002016:	4a3f      	ldr	r2, [pc, #252]	; (8002114 <_svfiprintf_r+0x1d4>)
 8002018:	1a80      	subs	r0, r0, r2
 800201a:	fa0b f000 	lsl.w	r0, fp, r0
 800201e:	4318      	orrs	r0, r3
 8002020:	9004      	str	r0, [sp, #16]
 8002022:	463c      	mov	r4, r7
 8002024:	e7d3      	b.n	8001fce <_svfiprintf_r+0x8e>
 8002026:	9a03      	ldr	r2, [sp, #12]
 8002028:	1d11      	adds	r1, r2, #4
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	9103      	str	r1, [sp, #12]
 800202e:	2a00      	cmp	r2, #0
 8002030:	db01      	blt.n	8002036 <_svfiprintf_r+0xf6>
 8002032:	9207      	str	r2, [sp, #28]
 8002034:	e004      	b.n	8002040 <_svfiprintf_r+0x100>
 8002036:	4252      	negs	r2, r2
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	9207      	str	r2, [sp, #28]
 800203e:	9304      	str	r3, [sp, #16]
 8002040:	783b      	ldrb	r3, [r7, #0]
 8002042:	2b2e      	cmp	r3, #46	; 0x2e
 8002044:	d10e      	bne.n	8002064 <_svfiprintf_r+0x124>
 8002046:	787b      	ldrb	r3, [r7, #1]
 8002048:	2b2a      	cmp	r3, #42	; 0x2a
 800204a:	f107 0101 	add.w	r1, r7, #1
 800204e:	d132      	bne.n	80020b6 <_svfiprintf_r+0x176>
 8002050:	9b03      	ldr	r3, [sp, #12]
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	9203      	str	r2, [sp, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	bfb8      	it	lt
 800205c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002060:	3702      	adds	r7, #2
 8002062:	9305      	str	r3, [sp, #20]
 8002064:	4c2c      	ldr	r4, [pc, #176]	; (8002118 <_svfiprintf_r+0x1d8>)
 8002066:	7839      	ldrb	r1, [r7, #0]
 8002068:	2203      	movs	r2, #3
 800206a:	4620      	mov	r0, r4
 800206c:	f7fe f8c0 	bl	80001f0 <memchr>
 8002070:	b138      	cbz	r0, 8002082 <_svfiprintf_r+0x142>
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	1b00      	subs	r0, r0, r4
 8002076:	fa03 f000 	lsl.w	r0, r3, r0
 800207a:	9b04      	ldr	r3, [sp, #16]
 800207c:	4303      	orrs	r3, r0
 800207e:	9304      	str	r3, [sp, #16]
 8002080:	3701      	adds	r7, #1
 8002082:	7839      	ldrb	r1, [r7, #0]
 8002084:	4825      	ldr	r0, [pc, #148]	; (800211c <_svfiprintf_r+0x1dc>)
 8002086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800208a:	2206      	movs	r2, #6
 800208c:	1c7e      	adds	r6, r7, #1
 800208e:	f7fe f8af 	bl	80001f0 <memchr>
 8002092:	2800      	cmp	r0, #0
 8002094:	d035      	beq.n	8002102 <_svfiprintf_r+0x1c2>
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <_svfiprintf_r+0x1e0>)
 8002098:	b9fb      	cbnz	r3, 80020da <_svfiprintf_r+0x19a>
 800209a:	9b03      	ldr	r3, [sp, #12]
 800209c:	3307      	adds	r3, #7
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	3308      	adds	r3, #8
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020a8:	444b      	add	r3, r9
 80020aa:	9309      	str	r3, [sp, #36]	; 0x24
 80020ac:	e76c      	b.n	8001f88 <_svfiprintf_r+0x48>
 80020ae:	fb00 3202 	mla	r2, r0, r2, r3
 80020b2:	2101      	movs	r1, #1
 80020b4:	e7a3      	b.n	8001ffe <_svfiprintf_r+0xbe>
 80020b6:	2300      	movs	r3, #0
 80020b8:	9305      	str	r3, [sp, #20]
 80020ba:	4618      	mov	r0, r3
 80020bc:	240a      	movs	r4, #10
 80020be:	460f      	mov	r7, r1
 80020c0:	3101      	adds	r1, #1
 80020c2:	783a      	ldrb	r2, [r7, #0]
 80020c4:	3a30      	subs	r2, #48	; 0x30
 80020c6:	2a09      	cmp	r2, #9
 80020c8:	d903      	bls.n	80020d2 <_svfiprintf_r+0x192>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ca      	beq.n	8002064 <_svfiprintf_r+0x124>
 80020ce:	9005      	str	r0, [sp, #20]
 80020d0:	e7c8      	b.n	8002064 <_svfiprintf_r+0x124>
 80020d2:	fb04 2000 	mla	r0, r4, r0, r2
 80020d6:	2301      	movs	r3, #1
 80020d8:	e7f1      	b.n	80020be <_svfiprintf_r+0x17e>
 80020da:	ab03      	add	r3, sp, #12
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	462a      	mov	r2, r5
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <_svfiprintf_r+0x1e4>)
 80020e2:	a904      	add	r1, sp, #16
 80020e4:	4640      	mov	r0, r8
 80020e6:	f3af 8000 	nop.w
 80020ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80020ee:	4681      	mov	r9, r0
 80020f0:	d1d9      	bne.n	80020a6 <_svfiprintf_r+0x166>
 80020f2:	89ab      	ldrh	r3, [r5, #12]
 80020f4:	065b      	lsls	r3, r3, #25
 80020f6:	f53f af38 	bmi.w	8001f6a <_svfiprintf_r+0x2a>
 80020fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020fc:	b01d      	add	sp, #116	; 0x74
 80020fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002102:	ab03      	add	r3, sp, #12
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	462a      	mov	r2, r5
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <_svfiprintf_r+0x1e4>)
 800210a:	a904      	add	r1, sp, #16
 800210c:	4640      	mov	r0, r8
 800210e:	f000 f881 	bl	8002214 <_printf_i>
 8002112:	e7ea      	b.n	80020ea <_svfiprintf_r+0x1aa>
 8002114:	080026cd 	.word	0x080026cd
 8002118:	080026d3 	.word	0x080026d3
 800211c:	080026d7 	.word	0x080026d7
 8002120:	00000000 	.word	0x00000000
 8002124:	08001e89 	.word	0x08001e89

08002128 <_printf_common>:
 8002128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800212c:	4691      	mov	r9, r2
 800212e:	461f      	mov	r7, r3
 8002130:	688a      	ldr	r2, [r1, #8]
 8002132:	690b      	ldr	r3, [r1, #16]
 8002134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002138:	4293      	cmp	r3, r2
 800213a:	bfb8      	it	lt
 800213c:	4613      	movlt	r3, r2
 800213e:	f8c9 3000 	str.w	r3, [r9]
 8002142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002146:	4606      	mov	r6, r0
 8002148:	460c      	mov	r4, r1
 800214a:	b112      	cbz	r2, 8002152 <_printf_common+0x2a>
 800214c:	3301      	adds	r3, #1
 800214e:	f8c9 3000 	str.w	r3, [r9]
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	0699      	lsls	r1, r3, #26
 8002156:	bf42      	ittt	mi
 8002158:	f8d9 3000 	ldrmi.w	r3, [r9]
 800215c:	3302      	addmi	r3, #2
 800215e:	f8c9 3000 	strmi.w	r3, [r9]
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	f015 0506 	ands.w	r5, r5, #6
 8002168:	d107      	bne.n	800217a <_printf_common+0x52>
 800216a:	f104 0a19 	add.w	sl, r4, #25
 800216e:	68e3      	ldr	r3, [r4, #12]
 8002170:	f8d9 2000 	ldr.w	r2, [r9]
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	429d      	cmp	r5, r3
 8002178:	db29      	blt.n	80021ce <_printf_common+0xa6>
 800217a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	3300      	adds	r3, #0
 8002182:	bf18      	it	ne
 8002184:	2301      	movne	r3, #1
 8002186:	0692      	lsls	r2, r2, #26
 8002188:	d42e      	bmi.n	80021e8 <_printf_common+0xc0>
 800218a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800218e:	4639      	mov	r1, r7
 8002190:	4630      	mov	r0, r6
 8002192:	47c0      	blx	r8
 8002194:	3001      	adds	r0, #1
 8002196:	d021      	beq.n	80021dc <_printf_common+0xb4>
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	68e5      	ldr	r5, [r4, #12]
 800219c:	f8d9 2000 	ldr.w	r2, [r9]
 80021a0:	f003 0306 	and.w	r3, r3, #6
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	bf08      	it	eq
 80021a8:	1aad      	subeq	r5, r5, r2
 80021aa:	68a3      	ldr	r3, [r4, #8]
 80021ac:	6922      	ldr	r2, [r4, #16]
 80021ae:	bf0c      	ite	eq
 80021b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021b4:	2500      	movne	r5, #0
 80021b6:	4293      	cmp	r3, r2
 80021b8:	bfc4      	itt	gt
 80021ba:	1a9b      	subgt	r3, r3, r2
 80021bc:	18ed      	addgt	r5, r5, r3
 80021be:	f04f 0900 	mov.w	r9, #0
 80021c2:	341a      	adds	r4, #26
 80021c4:	454d      	cmp	r5, r9
 80021c6:	d11b      	bne.n	8002200 <_printf_common+0xd8>
 80021c8:	2000      	movs	r0, #0
 80021ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ce:	2301      	movs	r3, #1
 80021d0:	4652      	mov	r2, sl
 80021d2:	4639      	mov	r1, r7
 80021d4:	4630      	mov	r0, r6
 80021d6:	47c0      	blx	r8
 80021d8:	3001      	adds	r0, #1
 80021da:	d103      	bne.n	80021e4 <_printf_common+0xbc>
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021e4:	3501      	adds	r5, #1
 80021e6:	e7c2      	b.n	800216e <_printf_common+0x46>
 80021e8:	18e1      	adds	r1, r4, r3
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	2030      	movs	r0, #48	; 0x30
 80021ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021f2:	4422      	add	r2, r4
 80021f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021fc:	3302      	adds	r3, #2
 80021fe:	e7c4      	b.n	800218a <_printf_common+0x62>
 8002200:	2301      	movs	r3, #1
 8002202:	4622      	mov	r2, r4
 8002204:	4639      	mov	r1, r7
 8002206:	4630      	mov	r0, r6
 8002208:	47c0      	blx	r8
 800220a:	3001      	adds	r0, #1
 800220c:	d0e6      	beq.n	80021dc <_printf_common+0xb4>
 800220e:	f109 0901 	add.w	r9, r9, #1
 8002212:	e7d7      	b.n	80021c4 <_printf_common+0x9c>

08002214 <_printf_i>:
 8002214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002218:	4617      	mov	r7, r2
 800221a:	7e0a      	ldrb	r2, [r1, #24]
 800221c:	b085      	sub	sp, #20
 800221e:	2a6e      	cmp	r2, #110	; 0x6e
 8002220:	4698      	mov	r8, r3
 8002222:	4606      	mov	r6, r0
 8002224:	460c      	mov	r4, r1
 8002226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002228:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800222c:	f000 80bc 	beq.w	80023a8 <_printf_i+0x194>
 8002230:	d81a      	bhi.n	8002268 <_printf_i+0x54>
 8002232:	2a63      	cmp	r2, #99	; 0x63
 8002234:	d02e      	beq.n	8002294 <_printf_i+0x80>
 8002236:	d80a      	bhi.n	800224e <_printf_i+0x3a>
 8002238:	2a00      	cmp	r2, #0
 800223a:	f000 80c8 	beq.w	80023ce <_printf_i+0x1ba>
 800223e:	2a58      	cmp	r2, #88	; 0x58
 8002240:	f000 808a 	beq.w	8002358 <_printf_i+0x144>
 8002244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002248:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800224c:	e02a      	b.n	80022a4 <_printf_i+0x90>
 800224e:	2a64      	cmp	r2, #100	; 0x64
 8002250:	d001      	beq.n	8002256 <_printf_i+0x42>
 8002252:	2a69      	cmp	r2, #105	; 0x69
 8002254:	d1f6      	bne.n	8002244 <_printf_i+0x30>
 8002256:	6821      	ldr	r1, [r4, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800225e:	d023      	beq.n	80022a8 <_printf_i+0x94>
 8002260:	1d11      	adds	r1, r2, #4
 8002262:	6019      	str	r1, [r3, #0]
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	e027      	b.n	80022b8 <_printf_i+0xa4>
 8002268:	2a73      	cmp	r2, #115	; 0x73
 800226a:	f000 80b4 	beq.w	80023d6 <_printf_i+0x1c2>
 800226e:	d808      	bhi.n	8002282 <_printf_i+0x6e>
 8002270:	2a6f      	cmp	r2, #111	; 0x6f
 8002272:	d02a      	beq.n	80022ca <_printf_i+0xb6>
 8002274:	2a70      	cmp	r2, #112	; 0x70
 8002276:	d1e5      	bne.n	8002244 <_printf_i+0x30>
 8002278:	680a      	ldr	r2, [r1, #0]
 800227a:	f042 0220 	orr.w	r2, r2, #32
 800227e:	600a      	str	r2, [r1, #0]
 8002280:	e003      	b.n	800228a <_printf_i+0x76>
 8002282:	2a75      	cmp	r2, #117	; 0x75
 8002284:	d021      	beq.n	80022ca <_printf_i+0xb6>
 8002286:	2a78      	cmp	r2, #120	; 0x78
 8002288:	d1dc      	bne.n	8002244 <_printf_i+0x30>
 800228a:	2278      	movs	r2, #120	; 0x78
 800228c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002290:	496e      	ldr	r1, [pc, #440]	; (800244c <_printf_i+0x238>)
 8002292:	e064      	b.n	800235e <_printf_i+0x14a>
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800229a:	1d11      	adds	r1, r2, #4
 800229c:	6019      	str	r1, [r3, #0]
 800229e:	6813      	ldr	r3, [r2, #0]
 80022a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0a3      	b.n	80023f0 <_printf_i+0x1dc>
 80022a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80022ac:	f102 0104 	add.w	r1, r2, #4
 80022b0:	6019      	str	r1, [r3, #0]
 80022b2:	d0d7      	beq.n	8002264 <_printf_i+0x50>
 80022b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da03      	bge.n	80022c4 <_printf_i+0xb0>
 80022bc:	222d      	movs	r2, #45	; 0x2d
 80022be:	425b      	negs	r3, r3
 80022c0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022c4:	4962      	ldr	r1, [pc, #392]	; (8002450 <_printf_i+0x23c>)
 80022c6:	220a      	movs	r2, #10
 80022c8:	e017      	b.n	80022fa <_printf_i+0xe6>
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022d2:	d003      	beq.n	80022dc <_printf_i+0xc8>
 80022d4:	1d08      	adds	r0, r1, #4
 80022d6:	6018      	str	r0, [r3, #0]
 80022d8:	680b      	ldr	r3, [r1, #0]
 80022da:	e006      	b.n	80022ea <_printf_i+0xd6>
 80022dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022e0:	f101 0004 	add.w	r0, r1, #4
 80022e4:	6018      	str	r0, [r3, #0]
 80022e6:	d0f7      	beq.n	80022d8 <_printf_i+0xc4>
 80022e8:	880b      	ldrh	r3, [r1, #0]
 80022ea:	4959      	ldr	r1, [pc, #356]	; (8002450 <_printf_i+0x23c>)
 80022ec:	2a6f      	cmp	r2, #111	; 0x6f
 80022ee:	bf14      	ite	ne
 80022f0:	220a      	movne	r2, #10
 80022f2:	2208      	moveq	r2, #8
 80022f4:	2000      	movs	r0, #0
 80022f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80022fa:	6865      	ldr	r5, [r4, #4]
 80022fc:	60a5      	str	r5, [r4, #8]
 80022fe:	2d00      	cmp	r5, #0
 8002300:	f2c0 809c 	blt.w	800243c <_printf_i+0x228>
 8002304:	6820      	ldr	r0, [r4, #0]
 8002306:	f020 0004 	bic.w	r0, r0, #4
 800230a:	6020      	str	r0, [r4, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d13f      	bne.n	8002390 <_printf_i+0x17c>
 8002310:	2d00      	cmp	r5, #0
 8002312:	f040 8095 	bne.w	8002440 <_printf_i+0x22c>
 8002316:	4675      	mov	r5, lr
 8002318:	2a08      	cmp	r2, #8
 800231a:	d10b      	bne.n	8002334 <_printf_i+0x120>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	07da      	lsls	r2, r3, #31
 8002320:	d508      	bpl.n	8002334 <_printf_i+0x120>
 8002322:	6923      	ldr	r3, [r4, #16]
 8002324:	6862      	ldr	r2, [r4, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	bfde      	ittt	le
 800232a:	2330      	movle	r3, #48	; 0x30
 800232c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002330:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002334:	ebae 0305 	sub.w	r3, lr, r5
 8002338:	6123      	str	r3, [r4, #16]
 800233a:	f8cd 8000 	str.w	r8, [sp]
 800233e:	463b      	mov	r3, r7
 8002340:	aa03      	add	r2, sp, #12
 8002342:	4621      	mov	r1, r4
 8002344:	4630      	mov	r0, r6
 8002346:	f7ff feef 	bl	8002128 <_printf_common>
 800234a:	3001      	adds	r0, #1
 800234c:	d155      	bne.n	80023fa <_printf_i+0x1e6>
 800234e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002352:	b005      	add	sp, #20
 8002354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002358:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800235c:	493c      	ldr	r1, [pc, #240]	; (8002450 <_printf_i+0x23c>)
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002366:	f100 0504 	add.w	r5, r0, #4
 800236a:	601d      	str	r5, [r3, #0]
 800236c:	d001      	beq.n	8002372 <_printf_i+0x15e>
 800236e:	6803      	ldr	r3, [r0, #0]
 8002370:	e002      	b.n	8002378 <_printf_i+0x164>
 8002372:	0655      	lsls	r5, r2, #25
 8002374:	d5fb      	bpl.n	800236e <_printf_i+0x15a>
 8002376:	8803      	ldrh	r3, [r0, #0]
 8002378:	07d0      	lsls	r0, r2, #31
 800237a:	bf44      	itt	mi
 800237c:	f042 0220 	orrmi.w	r2, r2, #32
 8002380:	6022      	strmi	r2, [r4, #0]
 8002382:	b91b      	cbnz	r3, 800238c <_printf_i+0x178>
 8002384:	6822      	ldr	r2, [r4, #0]
 8002386:	f022 0220 	bic.w	r2, r2, #32
 800238a:	6022      	str	r2, [r4, #0]
 800238c:	2210      	movs	r2, #16
 800238e:	e7b1      	b.n	80022f4 <_printf_i+0xe0>
 8002390:	4675      	mov	r5, lr
 8002392:	fbb3 f0f2 	udiv	r0, r3, r2
 8002396:	fb02 3310 	mls	r3, r2, r0, r3
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023a0:	4603      	mov	r3, r0
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d1f5      	bne.n	8002392 <_printf_i+0x17e>
 80023a6:	e7b7      	b.n	8002318 <_printf_i+0x104>
 80023a8:	6808      	ldr	r0, [r1, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	6949      	ldr	r1, [r1, #20]
 80023ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80023b2:	d004      	beq.n	80023be <_printf_i+0x1aa>
 80023b4:	1d10      	adds	r0, r2, #4
 80023b6:	6018      	str	r0, [r3, #0]
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	6019      	str	r1, [r3, #0]
 80023bc:	e007      	b.n	80023ce <_printf_i+0x1ba>
 80023be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023c2:	f102 0004 	add.w	r0, r2, #4
 80023c6:	6018      	str	r0, [r3, #0]
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	d0f6      	beq.n	80023ba <_printf_i+0x1a6>
 80023cc:	8019      	strh	r1, [r3, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	6123      	str	r3, [r4, #16]
 80023d2:	4675      	mov	r5, lr
 80023d4:	e7b1      	b.n	800233a <_printf_i+0x126>
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	1d11      	adds	r1, r2, #4
 80023da:	6019      	str	r1, [r3, #0]
 80023dc:	6815      	ldr	r5, [r2, #0]
 80023de:	6862      	ldr	r2, [r4, #4]
 80023e0:	2100      	movs	r1, #0
 80023e2:	4628      	mov	r0, r5
 80023e4:	f7fd ff04 	bl	80001f0 <memchr>
 80023e8:	b108      	cbz	r0, 80023ee <_printf_i+0x1da>
 80023ea:	1b40      	subs	r0, r0, r5
 80023ec:	6060      	str	r0, [r4, #4]
 80023ee:	6863      	ldr	r3, [r4, #4]
 80023f0:	6123      	str	r3, [r4, #16]
 80023f2:	2300      	movs	r3, #0
 80023f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f8:	e79f      	b.n	800233a <_printf_i+0x126>
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	462a      	mov	r2, r5
 80023fe:	4639      	mov	r1, r7
 8002400:	4630      	mov	r0, r6
 8002402:	47c0      	blx	r8
 8002404:	3001      	adds	r0, #1
 8002406:	d0a2      	beq.n	800234e <_printf_i+0x13a>
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	079b      	lsls	r3, r3, #30
 800240c:	d507      	bpl.n	800241e <_printf_i+0x20a>
 800240e:	2500      	movs	r5, #0
 8002410:	f104 0919 	add.w	r9, r4, #25
 8002414:	68e3      	ldr	r3, [r4, #12]
 8002416:	9a03      	ldr	r2, [sp, #12]
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	429d      	cmp	r5, r3
 800241c:	db05      	blt.n	800242a <_printf_i+0x216>
 800241e:	68e0      	ldr	r0, [r4, #12]
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	4298      	cmp	r0, r3
 8002424:	bfb8      	it	lt
 8002426:	4618      	movlt	r0, r3
 8002428:	e793      	b.n	8002352 <_printf_i+0x13e>
 800242a:	2301      	movs	r3, #1
 800242c:	464a      	mov	r2, r9
 800242e:	4639      	mov	r1, r7
 8002430:	4630      	mov	r0, r6
 8002432:	47c0      	blx	r8
 8002434:	3001      	adds	r0, #1
 8002436:	d08a      	beq.n	800234e <_printf_i+0x13a>
 8002438:	3501      	adds	r5, #1
 800243a:	e7eb      	b.n	8002414 <_printf_i+0x200>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1a7      	bne.n	8002390 <_printf_i+0x17c>
 8002440:	780b      	ldrb	r3, [r1, #0]
 8002442:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002446:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800244a:	e765      	b.n	8002318 <_printf_i+0x104>
 800244c:	080026ef 	.word	0x080026ef
 8002450:	080026de 	.word	0x080026de

08002454 <memcpy>:
 8002454:	b510      	push	{r4, lr}
 8002456:	1e43      	subs	r3, r0, #1
 8002458:	440a      	add	r2, r1
 800245a:	4291      	cmp	r1, r2
 800245c:	d100      	bne.n	8002460 <memcpy+0xc>
 800245e:	bd10      	pop	{r4, pc}
 8002460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002468:	e7f7      	b.n	800245a <memcpy+0x6>

0800246a <memmove>:
 800246a:	4288      	cmp	r0, r1
 800246c:	b510      	push	{r4, lr}
 800246e:	eb01 0302 	add.w	r3, r1, r2
 8002472:	d803      	bhi.n	800247c <memmove+0x12>
 8002474:	1e42      	subs	r2, r0, #1
 8002476:	4299      	cmp	r1, r3
 8002478:	d10c      	bne.n	8002494 <memmove+0x2a>
 800247a:	bd10      	pop	{r4, pc}
 800247c:	4298      	cmp	r0, r3
 800247e:	d2f9      	bcs.n	8002474 <memmove+0xa>
 8002480:	1881      	adds	r1, r0, r2
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	42d3      	cmn	r3, r2
 8002486:	d100      	bne.n	800248a <memmove+0x20>
 8002488:	bd10      	pop	{r4, pc}
 800248a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800248e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002492:	e7f7      	b.n	8002484 <memmove+0x1a>
 8002494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002498:	f802 4f01 	strb.w	r4, [r2, #1]!
 800249c:	e7eb      	b.n	8002476 <memmove+0xc>
	...

080024a0 <_free_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4605      	mov	r5, r0
 80024a4:	2900      	cmp	r1, #0
 80024a6:	d045      	beq.n	8002534 <_free_r+0x94>
 80024a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024ac:	1f0c      	subs	r4, r1, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bfb8      	it	lt
 80024b2:	18e4      	addlt	r4, r4, r3
 80024b4:	f000 f8d6 	bl	8002664 <__malloc_lock>
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <_free_r+0x98>)
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	4610      	mov	r0, r2
 80024be:	b933      	cbnz	r3, 80024ce <_free_r+0x2e>
 80024c0:	6063      	str	r3, [r4, #4]
 80024c2:	6014      	str	r4, [r2, #0]
 80024c4:	4628      	mov	r0, r5
 80024c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024ca:	f000 b8cc 	b.w	8002666 <__malloc_unlock>
 80024ce:	42a3      	cmp	r3, r4
 80024d0:	d90c      	bls.n	80024ec <_free_r+0x4c>
 80024d2:	6821      	ldr	r1, [r4, #0]
 80024d4:	1862      	adds	r2, r4, r1
 80024d6:	4293      	cmp	r3, r2
 80024d8:	bf04      	itt	eq
 80024da:	681a      	ldreq	r2, [r3, #0]
 80024dc:	685b      	ldreq	r3, [r3, #4]
 80024de:	6063      	str	r3, [r4, #4]
 80024e0:	bf04      	itt	eq
 80024e2:	1852      	addeq	r2, r2, r1
 80024e4:	6022      	streq	r2, [r4, #0]
 80024e6:	6004      	str	r4, [r0, #0]
 80024e8:	e7ec      	b.n	80024c4 <_free_r+0x24>
 80024ea:	4613      	mov	r3, r2
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	b10a      	cbz	r2, 80024f4 <_free_r+0x54>
 80024f0:	42a2      	cmp	r2, r4
 80024f2:	d9fa      	bls.n	80024ea <_free_r+0x4a>
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	1858      	adds	r0, r3, r1
 80024f8:	42a0      	cmp	r0, r4
 80024fa:	d10b      	bne.n	8002514 <_free_r+0x74>
 80024fc:	6820      	ldr	r0, [r4, #0]
 80024fe:	4401      	add	r1, r0
 8002500:	1858      	adds	r0, r3, r1
 8002502:	4282      	cmp	r2, r0
 8002504:	6019      	str	r1, [r3, #0]
 8002506:	d1dd      	bne.n	80024c4 <_free_r+0x24>
 8002508:	6810      	ldr	r0, [r2, #0]
 800250a:	6852      	ldr	r2, [r2, #4]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	4401      	add	r1, r0
 8002510:	6019      	str	r1, [r3, #0]
 8002512:	e7d7      	b.n	80024c4 <_free_r+0x24>
 8002514:	d902      	bls.n	800251c <_free_r+0x7c>
 8002516:	230c      	movs	r3, #12
 8002518:	602b      	str	r3, [r5, #0]
 800251a:	e7d3      	b.n	80024c4 <_free_r+0x24>
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	1821      	adds	r1, r4, r0
 8002520:	428a      	cmp	r2, r1
 8002522:	bf04      	itt	eq
 8002524:	6811      	ldreq	r1, [r2, #0]
 8002526:	6852      	ldreq	r2, [r2, #4]
 8002528:	6062      	str	r2, [r4, #4]
 800252a:	bf04      	itt	eq
 800252c:	1809      	addeq	r1, r1, r0
 800252e:	6021      	streq	r1, [r4, #0]
 8002530:	605c      	str	r4, [r3, #4]
 8002532:	e7c7      	b.n	80024c4 <_free_r+0x24>
 8002534:	bd38      	pop	{r3, r4, r5, pc}
 8002536:	bf00      	nop
 8002538:	2000008c 	.word	0x2000008c

0800253c <_malloc_r>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	1ccd      	adds	r5, r1, #3
 8002540:	f025 0503 	bic.w	r5, r5, #3
 8002544:	3508      	adds	r5, #8
 8002546:	2d0c      	cmp	r5, #12
 8002548:	bf38      	it	cc
 800254a:	250c      	movcc	r5, #12
 800254c:	2d00      	cmp	r5, #0
 800254e:	4606      	mov	r6, r0
 8002550:	db01      	blt.n	8002556 <_malloc_r+0x1a>
 8002552:	42a9      	cmp	r1, r5
 8002554:	d903      	bls.n	800255e <_malloc_r+0x22>
 8002556:	230c      	movs	r3, #12
 8002558:	6033      	str	r3, [r6, #0]
 800255a:	2000      	movs	r0, #0
 800255c:	bd70      	pop	{r4, r5, r6, pc}
 800255e:	f000 f881 	bl	8002664 <__malloc_lock>
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <_malloc_r+0xb4>)
 8002564:	6814      	ldr	r4, [r2, #0]
 8002566:	4621      	mov	r1, r4
 8002568:	b991      	cbnz	r1, 8002590 <_malloc_r+0x54>
 800256a:	4c22      	ldr	r4, [pc, #136]	; (80025f4 <_malloc_r+0xb8>)
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	b91b      	cbnz	r3, 8002578 <_malloc_r+0x3c>
 8002570:	4630      	mov	r0, r6
 8002572:	f000 f867 	bl	8002644 <_sbrk_r>
 8002576:	6020      	str	r0, [r4, #0]
 8002578:	4629      	mov	r1, r5
 800257a:	4630      	mov	r0, r6
 800257c:	f000 f862 	bl	8002644 <_sbrk_r>
 8002580:	1c43      	adds	r3, r0, #1
 8002582:	d126      	bne.n	80025d2 <_malloc_r+0x96>
 8002584:	230c      	movs	r3, #12
 8002586:	6033      	str	r3, [r6, #0]
 8002588:	4630      	mov	r0, r6
 800258a:	f000 f86c 	bl	8002666 <__malloc_unlock>
 800258e:	e7e4      	b.n	800255a <_malloc_r+0x1e>
 8002590:	680b      	ldr	r3, [r1, #0]
 8002592:	1b5b      	subs	r3, r3, r5
 8002594:	d41a      	bmi.n	80025cc <_malloc_r+0x90>
 8002596:	2b0b      	cmp	r3, #11
 8002598:	d90f      	bls.n	80025ba <_malloc_r+0x7e>
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	50cd      	str	r5, [r1, r3]
 800259e:	18cc      	adds	r4, r1, r3
 80025a0:	4630      	mov	r0, r6
 80025a2:	f000 f860 	bl	8002666 <__malloc_unlock>
 80025a6:	f104 000b 	add.w	r0, r4, #11
 80025aa:	1d23      	adds	r3, r4, #4
 80025ac:	f020 0007 	bic.w	r0, r0, #7
 80025b0:	1ac3      	subs	r3, r0, r3
 80025b2:	d01b      	beq.n	80025ec <_malloc_r+0xb0>
 80025b4:	425a      	negs	r2, r3
 80025b6:	50e2      	str	r2, [r4, r3]
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
 80025ba:	428c      	cmp	r4, r1
 80025bc:	bf0d      	iteet	eq
 80025be:	6863      	ldreq	r3, [r4, #4]
 80025c0:	684b      	ldrne	r3, [r1, #4]
 80025c2:	6063      	strne	r3, [r4, #4]
 80025c4:	6013      	streq	r3, [r2, #0]
 80025c6:	bf18      	it	ne
 80025c8:	460c      	movne	r4, r1
 80025ca:	e7e9      	b.n	80025a0 <_malloc_r+0x64>
 80025cc:	460c      	mov	r4, r1
 80025ce:	6849      	ldr	r1, [r1, #4]
 80025d0:	e7ca      	b.n	8002568 <_malloc_r+0x2c>
 80025d2:	1cc4      	adds	r4, r0, #3
 80025d4:	f024 0403 	bic.w	r4, r4, #3
 80025d8:	42a0      	cmp	r0, r4
 80025da:	d005      	beq.n	80025e8 <_malloc_r+0xac>
 80025dc:	1a21      	subs	r1, r4, r0
 80025de:	4630      	mov	r0, r6
 80025e0:	f000 f830 	bl	8002644 <_sbrk_r>
 80025e4:	3001      	adds	r0, #1
 80025e6:	d0cd      	beq.n	8002584 <_malloc_r+0x48>
 80025e8:	6025      	str	r5, [r4, #0]
 80025ea:	e7d9      	b.n	80025a0 <_malloc_r+0x64>
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
 80025ee:	bf00      	nop
 80025f0:	2000008c 	.word	0x2000008c
 80025f4:	20000090 	.word	0x20000090

080025f8 <_realloc_r>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	4607      	mov	r7, r0
 80025fc:	4614      	mov	r4, r2
 80025fe:	460e      	mov	r6, r1
 8002600:	b921      	cbnz	r1, 800260c <_realloc_r+0x14>
 8002602:	4611      	mov	r1, r2
 8002604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002608:	f7ff bf98 	b.w	800253c <_malloc_r>
 800260c:	b922      	cbnz	r2, 8002618 <_realloc_r+0x20>
 800260e:	f7ff ff47 	bl	80024a0 <_free_r>
 8002612:	4625      	mov	r5, r4
 8002614:	4628      	mov	r0, r5
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002618:	f000 f826 	bl	8002668 <_malloc_usable_size_r>
 800261c:	4284      	cmp	r4, r0
 800261e:	d90f      	bls.n	8002640 <_realloc_r+0x48>
 8002620:	4621      	mov	r1, r4
 8002622:	4638      	mov	r0, r7
 8002624:	f7ff ff8a 	bl	800253c <_malloc_r>
 8002628:	4605      	mov	r5, r0
 800262a:	2800      	cmp	r0, #0
 800262c:	d0f2      	beq.n	8002614 <_realloc_r+0x1c>
 800262e:	4631      	mov	r1, r6
 8002630:	4622      	mov	r2, r4
 8002632:	f7ff ff0f 	bl	8002454 <memcpy>
 8002636:	4631      	mov	r1, r6
 8002638:	4638      	mov	r0, r7
 800263a:	f7ff ff31 	bl	80024a0 <_free_r>
 800263e:	e7e9      	b.n	8002614 <_realloc_r+0x1c>
 8002640:	4635      	mov	r5, r6
 8002642:	e7e7      	b.n	8002614 <_realloc_r+0x1c>

08002644 <_sbrk_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4c06      	ldr	r4, [pc, #24]	; (8002660 <_sbrk_r+0x1c>)
 8002648:	2300      	movs	r3, #0
 800264a:	4605      	mov	r5, r0
 800264c:	4608      	mov	r0, r1
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	f000 f814 	bl	800267c <_sbrk>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_sbrk_r+0x1a>
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	b103      	cbz	r3, 800265e <_sbrk_r+0x1a>
 800265c:	602b      	str	r3, [r5, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	200001cc 	.word	0x200001cc

08002664 <__malloc_lock>:
 8002664:	4770      	bx	lr

08002666 <__malloc_unlock>:
 8002666:	4770      	bx	lr

08002668 <_malloc_usable_size_r>:
 8002668:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800266c:	2800      	cmp	r0, #0
 800266e:	f1a0 0004 	sub.w	r0, r0, #4
 8002672:	bfbc      	itt	lt
 8002674:	580b      	ldrlt	r3, [r1, r0]
 8002676:	18c0      	addlt	r0, r0, r3
 8002678:	4770      	bx	lr
	...

0800267c <_sbrk>:
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <_sbrk+0x14>)
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	4602      	mov	r2, r0
 8002682:	b909      	cbnz	r1, 8002688 <_sbrk+0xc>
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <_sbrk+0x18>)
 8002686:	6019      	str	r1, [r3, #0]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	4402      	add	r2, r0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4770      	bx	lr
 8002690:	20000094 	.word	0x20000094
 8002694:	200001d0 	.word	0x200001d0

08002698 <_init>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr

080026a4 <_fini>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	bf00      	nop
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr
