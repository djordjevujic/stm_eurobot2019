
test1_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000255c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080026fc  080026fc  000126fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800275c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000160  20000070  080027cc  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d0  080027cc  000201d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013042  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000259d  00000000  00000000  000330e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005a26  00000000  00000000  0003567f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b8  00000000  00000000  0003b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a80  00000000  00000000  0003b960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b2e  00000000  00000000  0003c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000035c9  00000000  00000000  00040f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000444d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c78  00000000  00000000  00044554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080026e4 	.word	0x080026e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080026e4 	.word	0x080026e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f89c 	bl	80006f4 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005cc:	f000 f85e 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 f99e 	bl	8001950 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000648:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	bf1c      	itt	ne
 800064c:	4b05      	ldrne	r3, [pc, #20]	; (8000664 <HAL_Delay+0x24>)
 800064e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000650:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000652:	bf18      	it	ne
 8000654:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000678:	0200      	lsls	r0, r0, #8
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000684:	60d3      	str	r3, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf28      	it	cs
 80006a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 0501 	mov.w	r5, #1
 80006a8:	fa05 f303 	lsl.w	r3, r5, r3
 80006ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b0:	bf8c      	ite	hi
 80006b2:	3c03      	subhi	r4, #3
 80006b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b6:	4019      	ands	r1, r3
 80006b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	fa05 f404 	lsl.w	r4, r5, r4
 80006be:	3c01      	subs	r4, #1
 80006c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea42 0201 	orr.w	r2, r2, r1
 80006c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfaf      	iteee	ge
 80006ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	f000 000f 	andlt.w	r0, r0, #15
 80006d6:	4b06      	ldrlt	r3, [pc, #24]	; (80006f0 <HAL_NVIC_SetPriority+0x64>)
 80006d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	bfa5      	ittet	ge
 80006dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	3801      	subs	r0, #1
 80006f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fa:	d20a      	bcs.n	8000712 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000700:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	21f0      	movs	r1, #240	; 0xf0
 8000704:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000712:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000724:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008c8 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072c:	4a64      	ldr	r2, [pc, #400]	; (80008c0 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000730:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000734:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000736:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000738:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000740:	42b7      	cmp	r7, r6
 8000742:	f040 80ad 	bne.w	80008a0 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000746:	684c      	ldr	r4, [r1, #4]
 8000748:	f024 0a10 	bic.w	sl, r4, #16
 800074c:	f1ba 0f02 	cmp.w	sl, #2
 8000750:	d116      	bne.n	8000780 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000752:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000756:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800075a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800075e:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000762:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000766:	f04f 0e0f 	mov.w	lr, #15
 800076a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800076e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000772:	690d      	ldr	r5, [r1, #16]
 8000774:	fa05 f50b 	lsl.w	r5, r5, fp
 8000778:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800077c:	f8cc 5020 	str.w	r5, [ip, #32]
 8000780:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000784:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000786:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800078a:	fa05 f50c 	lsl.w	r5, r5, ip
 800078e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000790:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000794:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000798:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800079c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a8:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007aa:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ae:	d815      	bhi.n	80007dc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007b0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007b4:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007b8:	68cd      	ldr	r5, [r1, #12]
 80007ba:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007be:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007c2:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007c6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ca:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ce:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007d2:	fa0e fe03 	lsl.w	lr, lr, r3
 80007d6:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007da:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007dc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007de:	9d00      	ldr	r5, [sp, #0]
 80007e0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e2:	688f      	ldr	r7, [r1, #8]
 80007e4:	fa07 f70c 	lsl.w	r7, r7, ip
 80007e8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007ea:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ec:	00e5      	lsls	r5, r4, #3
 80007ee:	d557      	bpl.n	80008a0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f0:	f04f 0b00 	mov.w	fp, #0
 80007f4:	f8cd b00c 	str.w	fp, [sp, #12]
 80007f8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fc:	4d31      	ldr	r5, [pc, #196]	; (80008c4 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000802:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000806:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800080a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800080e:	9703      	str	r7, [sp, #12]
 8000810:	9f03      	ldr	r7, [sp, #12]
 8000812:	f023 0703 	bic.w	r7, r3, #3
 8000816:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800081a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800081e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000822:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000826:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800082a:	f04f 0e0f 	mov.w	lr, #15
 800082e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000832:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000834:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000838:	d039      	beq.n	80008ae <HAL_GPIO_Init+0x18e>
 800083a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800083e:	42a8      	cmp	r0, r5
 8000840:	d037      	beq.n	80008b2 <HAL_GPIO_Init+0x192>
 8000842:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000846:	42a8      	cmp	r0, r5
 8000848:	d035      	beq.n	80008b6 <HAL_GPIO_Init+0x196>
 800084a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084e:	42a8      	cmp	r0, r5
 8000850:	d033      	beq.n	80008ba <HAL_GPIO_Init+0x19a>
 8000852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000856:	42a8      	cmp	r0, r5
 8000858:	bf14      	ite	ne
 800085a:	2507      	movne	r5, #7
 800085c:	2504      	moveq	r5, #4
 800085e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000862:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000866:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000868:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800086a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800086c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000874:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000876:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000878:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800087a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800087e:	bf0c      	ite	eq
 8000880:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000882:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000884:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000886:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000888:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800088c:	bf0c      	ite	eq
 800088e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000890:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000892:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000894:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000896:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000898:	bf54      	ite	pl
 800089a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800089c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800089e:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008a0:	3301      	adds	r3, #1
 80008a2:	2b10      	cmp	r3, #16
 80008a4:	f47f af47 	bne.w	8000736 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008a8:	b005      	add	sp, #20
 80008aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ae:	465d      	mov	r5, fp
 80008b0:	e7d5      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008b2:	2501      	movs	r5, #1
 80008b4:	e7d3      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008b6:	2502      	movs	r5, #2
 80008b8:	e7d1      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008ba:	2503      	movs	r5, #3
 80008bc:	e7cf      	b.n	800085e <HAL_GPIO_Init+0x13e>
 80008be:	bf00      	nop
 80008c0:	40013c00 	.word	0x40013c00
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008cc:	6903      	ldr	r3, [r0, #16]
 80008ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008d0:	bf14      	ite	ne
 80008d2:	2001      	movne	r0, #1
 80008d4:	2000      	moveq	r0, #0
 80008d6:	4770      	bx	lr

080008d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008dc:	4604      	mov	r4, r0
 80008de:	b918      	cbnz	r0, 80008e8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008e0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008e2:	b002      	add	sp, #8
 80008e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e8:	6803      	ldr	r3, [r0, #0]
 80008ea:	07dd      	lsls	r5, r3, #31
 80008ec:	d410      	bmi.n	8000910 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	0798      	lsls	r0, r3, #30
 80008f2:	d458      	bmi.n	80009a6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	071a      	lsls	r2, r3, #28
 80008f8:	f100 809a 	bmi.w	8000a30 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	075b      	lsls	r3, r3, #29
 8000900:	f100 80b8 	bmi.w	8000a74 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000904:	69a2      	ldr	r2, [r4, #24]
 8000906:	2a00      	cmp	r2, #0
 8000908:	f040 8119 	bne.w	8000b3e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800090c:	2000      	movs	r0, #0
 800090e:	e7e8      	b.n	80008e2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000910:	4ba6      	ldr	r3, [pc, #664]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	f002 020c 	and.w	r2, r2, #12
 8000918:	2a04      	cmp	r2, #4
 800091a:	d007      	beq.n	800092c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000922:	2a08      	cmp	r2, #8
 8000924:	d10a      	bne.n	800093c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	0259      	lsls	r1, r3, #9
 800092a:	d507      	bpl.n	800093c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800092c:	4b9f      	ldr	r3, [pc, #636]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	039a      	lsls	r2, r3, #14
 8000932:	d5dc      	bpl.n	80008ee <HAL_RCC_OscConfig+0x16>
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1d9      	bne.n	80008ee <HAL_RCC_OscConfig+0x16>
 800093a:	e7d1      	b.n	80008e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	4d9b      	ldr	r5, [pc, #620]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000944:	d111      	bne.n	800096a <HAL_RCC_OscConfig+0x92>
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800094e:	f7ff fe71 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000952:	4d96      	ldr	r5, [pc, #600]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000954:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	039b      	lsls	r3, r3, #14
 800095a:	d4c8      	bmi.n	80008ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800095c:	f7ff fe6a 	bl	8000634 <HAL_GetTick>
 8000960:	1b80      	subs	r0, r0, r6
 8000962:	2864      	cmp	r0, #100	; 0x64
 8000964:	d9f7      	bls.n	8000956 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000966:	2003      	movs	r0, #3
 8000968:	e7bb      	b.n	80008e2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800096a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096e:	d104      	bne.n	800097a <HAL_RCC_OscConfig+0xa2>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	602b      	str	r3, [r5, #0]
 8000978:	e7e5      	b.n	8000946 <HAL_RCC_OscConfig+0x6e>
 800097a:	682a      	ldr	r2, [r5, #0]
 800097c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000980:	602a      	str	r2, [r5, #0]
 8000982:	682a      	ldr	r2, [r5, #0]
 8000984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000988:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1df      	bne.n	800094e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800098e:	f7ff fe51 	bl	8000634 <HAL_GetTick>
 8000992:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	039f      	lsls	r7, r3, #14
 8000998:	d5a9      	bpl.n	80008ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099a:	f7ff fe4b 	bl	8000634 <HAL_GetTick>
 800099e:	1b80      	subs	r0, r0, r6
 80009a0:	2864      	cmp	r0, #100	; 0x64
 80009a2:	d9f7      	bls.n	8000994 <HAL_RCC_OscConfig+0xbc>
 80009a4:	e7df      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a6:	4b81      	ldr	r3, [pc, #516]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	f012 0f0c 	tst.w	r2, #12
 80009ae:	d007      	beq.n	80009c0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b6:	2a08      	cmp	r2, #8
 80009b8:	d111      	bne.n	80009de <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	025e      	lsls	r6, r3, #9
 80009be:	d40e      	bmi.n	80009de <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c0:	4b7a      	ldr	r3, [pc, #488]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	0795      	lsls	r5, r2, #30
 80009c6:	d502      	bpl.n	80009ce <HAL_RCC_OscConfig+0xf6>
 80009c8:	68e2      	ldr	r2, [r4, #12]
 80009ca:	2a01      	cmp	r2, #1
 80009cc:	d188      	bne.n	80008e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	6921      	ldr	r1, [r4, #16]
 80009d2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009dc:	e78a      	b.n	80008f4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009de:	68e2      	ldr	r2, [r4, #12]
 80009e0:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <HAL_RCC_OscConfig+0x2d8>)
 80009e2:	b1b2      	cbz	r2, 8000a12 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e8:	f7ff fe24 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ec:	4d6f      	ldr	r5, [pc, #444]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	0798      	lsls	r0, r3, #30
 80009f4:	d507      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	6922      	ldr	r2, [r4, #16]
 80009fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a02:	602b      	str	r3, [r5, #0]
 8000a04:	e776      	b.n	80008f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a06:	f7ff fe15 	bl	8000634 <HAL_GetTick>
 8000a0a:	1b80      	subs	r0, r0, r6
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9ef      	bls.n	80009f0 <HAL_RCC_OscConfig+0x118>
 8000a10:	e7a9      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fe0e 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	4d64      	ldr	r5, [pc, #400]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	0799      	lsls	r1, r3, #30
 8000a20:	f57f af68 	bpl.w	80008f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a24:	f7ff fe06 	bl	8000634 <HAL_GetTick>
 8000a28:	1b80      	subs	r0, r0, r6
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9f6      	bls.n	8000a1c <HAL_RCC_OscConfig+0x144>
 8000a2e:	e79a      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a30:	6962      	ldr	r2, [r4, #20]
 8000a32:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <HAL_RCC_OscConfig+0x2dc>)
 8000a34:	b17a      	cbz	r2, 8000a56 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a3a:	f7ff fdfb 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	4d5b      	ldr	r5, [pc, #364]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a40:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a44:	079f      	lsls	r7, r3, #30
 8000a46:	f53f af59 	bmi.w	80008fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a4a:	f7ff fdf3 	bl	8000634 <HAL_GetTick>
 8000a4e:	1b80      	subs	r0, r0, r6
 8000a50:	2802      	cmp	r0, #2
 8000a52:	d9f6      	bls.n	8000a42 <HAL_RCC_OscConfig+0x16a>
 8000a54:	e787      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a56:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a58:	f7ff fdec 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	4d53      	ldr	r5, [pc, #332]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a60:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a62:	0798      	lsls	r0, r3, #30
 8000a64:	f57f af4a 	bpl.w	80008fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a68:	f7ff fde4 	bl	8000634 <HAL_GetTick>
 8000a6c:	1b80      	subs	r0, r0, r6
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f6      	bls.n	8000a60 <HAL_RCC_OscConfig+0x188>
 8000a72:	e778      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a7c:	d128      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a86:	641a      	str	r2, [r3, #64]	; 0x40
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a92:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a94:	4d48      	ldr	r5, [pc, #288]	; (8000bb8 <HAL_RCC_OscConfig+0x2e0>)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	05d9      	lsls	r1, r3, #23
 8000a9a:	d51b      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	68a3      	ldr	r3, [r4, #8]
 8000a9e:	4d43      	ldr	r5, [pc, #268]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d127      	bne.n	8000af4 <HAL_RCC_OscConfig+0x21c>
 8000aa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aac:	f7ff fdc2 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab0:	4d3e      	ldr	r5, [pc, #248]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ab2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aba:	079b      	lsls	r3, r3, #30
 8000abc:	d539      	bpl.n	8000b32 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	f43f af20 	beq.w	8000904 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac4:	4a39      	ldr	r2, [pc, #228]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000ac6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	e719      	b.n	8000904 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e7df      	b.n	8000a94 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000adc:	f7ff fdaa 	bl	8000634 <HAL_GetTick>
 8000ae0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	05da      	lsls	r2, r3, #23
 8000ae6:	d4d9      	bmi.n	8000a9c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae8:	f7ff fda4 	bl	8000634 <HAL_GetTick>
 8000aec:	1bc0      	subs	r0, r0, r7
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9f7      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x20a>
 8000af2:	e738      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d104      	bne.n	8000b02 <HAL_RCC_OscConfig+0x22a>
 8000af8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	672b      	str	r3, [r5, #112]	; 0x70
 8000b00:	e7d0      	b.n	8000aa4 <HAL_RCC_OscConfig+0x1cc>
 8000b02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b04:	f022 0201 	bic.w	r2, r2, #1
 8000b08:	672a      	str	r2, [r5, #112]	; 0x70
 8000b0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b0c:	f022 0204 	bic.w	r2, r2, #4
 8000b10:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1ca      	bne.n	8000aac <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b16:	f7ff fd8d 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b1e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b22:	0798      	lsls	r0, r3, #30
 8000b24:	d5cb      	bpl.n	8000abe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f7ff fd85 	bl	8000634 <HAL_GetTick>
 8000b2a:	1bc0      	subs	r0, r0, r7
 8000b2c:	4540      	cmp	r0, r8
 8000b2e:	d9f7      	bls.n	8000b20 <HAL_RCC_OscConfig+0x248>
 8000b30:	e719      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd7f 	bl	8000634 <HAL_GetTick>
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	4540      	cmp	r0, r8
 8000b3a:	d9bd      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x1e0>
 8000b3c:	e713      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b3e:	4d1b      	ldr	r5, [pc, #108]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000b40:	68ab      	ldr	r3, [r5, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	f43f aeca 	beq.w	80008e0 <HAL_RCC_OscConfig+0x8>
 8000b4c:	4e1b      	ldr	r6, [pc, #108]	; (8000bbc <HAL_RCC_OscConfig+0x2e4>)
 8000b4e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b50:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b52:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b54:	d134      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b56:	f7ff fd6d 	bl	8000634 <HAL_GetTick>
 8000b5a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	0199      	lsls	r1, r3, #6
 8000b60:	d41e      	bmi.n	8000ba0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b62:	6a22      	ldr	r2, [r4, #32]
 8000b64:	69e3      	ldr	r3, [r4, #28]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b6a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b76:	4c0d      	ldr	r4, [pc, #52]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b78:	0852      	lsrs	r2, r2, #1
 8000b7a:	3a01      	subs	r2, #1
 8000b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b82:	2301      	movs	r3, #1
 8000b84:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b86:	f7ff fd55 	bl	8000634 <HAL_GetTick>
 8000b8a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	019a      	lsls	r2, r3, #6
 8000b90:	f53f aebc 	bmi.w	800090c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b94:	f7ff fd4e 	bl	8000634 <HAL_GetTick>
 8000b98:	1b40      	subs	r0, r0, r5
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x2b4>
 8000b9e:	e6e2      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba0:	f7ff fd48 	bl	8000634 <HAL_GetTick>
 8000ba4:	1bc0      	subs	r0, r0, r7
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	d9d8      	bls.n	8000b5c <HAL_RCC_OscConfig+0x284>
 8000baa:	e6dc      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	42470000 	.word	0x42470000
 8000bb4:	42470e80 	.word	0x42470e80
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fd38 	bl	8000634 <HAL_GetTick>
 8000bc4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	f57f ae9f 	bpl.w	800090c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fd31 	bl	8000634 <HAL_GetTick>
 8000bd2:	1b00      	subs	r0, r0, r4
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9f6      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2ee>
 8000bd8:	e6c5      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
 8000bda:	bf00      	nop

08000bdc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bde:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000be0:	688b      	ldr	r3, [r1, #8]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d003      	beq.n	8000bf2 <HAL_RCC_GetSysClockFreq+0x16>
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d003      	beq.n	8000bf6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bf0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bf4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bfc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c00:	bf14      	ite	ne
 8000c02:	480c      	ldrne	r0, [pc, #48]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c04:	480a      	ldreq	r0, [pc, #40]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c06:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c0a:	bf18      	it	ne
 8000c0c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c12:	fba1 0100 	umull	r0, r1, r1, r0
 8000c16:	f7ff fb3b 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c22:	3301      	adds	r3, #1
 8000c24:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c2a:	bd08      	pop	{r3, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	00f42400 	.word	0x00f42400
 8000c34:	007a1200 	.word	0x007a1200

08000c38 <HAL_RCC_ClockConfig>:
{
 8000c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c3e:	4604      	mov	r4, r0
 8000c40:	b910      	cbnz	r0, 8000c48 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c42:	2001      	movs	r0, #1
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c48:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <HAL_RCC_ClockConfig+0x124>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f002 020f 	and.w	r2, r2, #15
 8000c50:	428a      	cmp	r2, r1
 8000c52:	d328      	bcc.n	8000ca6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c54:	6821      	ldr	r1, [r4, #0]
 8000c56:	078f      	lsls	r7, r1, #30
 8000c58:	d42d      	bmi.n	8000cb6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c5a:	07c8      	lsls	r0, r1, #31
 8000c5c:	d440      	bmi.n	8000ce0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_RCC_ClockConfig+0x124>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f002 020f 	and.w	r2, r2, #15
 8000c66:	4295      	cmp	r5, r2
 8000c68:	d366      	bcc.n	8000d38 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c6a:	6822      	ldr	r2, [r4, #0]
 8000c6c:	0751      	lsls	r1, r2, #29
 8000c6e:	d46c      	bmi.n	8000d4a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c70:	0713      	lsls	r3, r2, #28
 8000c72:	d507      	bpl.n	8000c84 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000c76:	6921      	ldr	r1, [r4, #16]
 8000c78:	6893      	ldr	r3, [r2, #8]
 8000c7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c84:	f7ff ffaa 	bl	8000bdc <HAL_RCC_GetSysClockFreq>
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000c8a:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <HAL_RCC_ClockConfig+0x12c>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	40d8      	lsrs	r0, r3
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_RCC_ClockConfig+0x130>)
 8000c98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fc80 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d1c6      	bne.n	8000c42 <HAL_RCC_ClockConfig+0xa>
 8000cb4:	e7ce      	b.n	8000c54 <HAL_RCC_ClockConfig+0x1c>
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	689a      	ldrne	r2, [r3, #8]
 8000cc0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cc4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc8:	bf42      	ittt	mi
 8000cca:	689a      	ldrmi	r2, [r3, #8]
 8000ccc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cd0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	68a0      	ldr	r0, [r4, #8]
 8000cd6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cda:	4302      	orrs	r2, r0
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	e7bc      	b.n	8000c5a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce0:	6862      	ldr	r2, [r4, #4]
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d11d      	bne.n	8000d24 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cee:	d0a8      	beq.n	8000c42 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf0:	4e1b      	ldr	r6, [pc, #108]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000cf2:	68b3      	ldr	r3, [r6, #8]
 8000cf4:	f023 0303 	bic.w	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cfc:	f7ff fc9a 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d00:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d04:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d06:	68b3      	ldr	r3, [r6, #8]
 8000d08:	6862      	ldr	r2, [r4, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d12:	d0a4      	beq.n	8000c5e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f7ff fc8e 	bl	8000634 <HAL_GetTick>
 8000d18:	1bc0      	subs	r0, r0, r7
 8000d1a:	4540      	cmp	r0, r8
 8000d1c:	d9f3      	bls.n	8000d06 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
}
 8000d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d24:	1e91      	subs	r1, r2, #2
 8000d26:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d28:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d2a:	d802      	bhi.n	8000d32 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d30:	e7dd      	b.n	8000cee <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d32:	f013 0f02 	tst.w	r3, #2
 8000d36:	e7da      	b.n	8000cee <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d38:	b2ea      	uxtb	r2, r5
 8000d3a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	429d      	cmp	r5, r3
 8000d44:	f47f af7d 	bne.w	8000c42 <HAL_RCC_ClockConfig+0xa>
 8000d48:	e78f      	b.n	8000c6a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000d4c:	68e0      	ldr	r0, [r4, #12]
 8000d4e:	688b      	ldr	r3, [r1, #8]
 8000d50:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d54:	4303      	orrs	r3, r0
 8000d56:	608b      	str	r3, [r1, #8]
 8000d58:	e78a      	b.n	8000c70 <HAL_RCC_ClockConfig+0x38>
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00
 8000d60:	40023800 	.word	0x40023800
 8000d64:	08002701 	.word	0x08002701
 8000d68:	20000008 	.word	0x20000008

08000d6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	4a03      	ldr	r2, [pc, #12]	; (8000d88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d7a:	6810      	ldr	r0, [r2, #0]
}
 8000d7c:	40d8      	lsrs	r0, r3
 8000d7e:	4770      	bx	lr
 8000d80:	40023800 	.word	0x40023800
 8000d84:	08002711 	.word	0x08002711
 8000d88:	20000008 	.word	0x20000008

08000d8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d96:	5cd3      	ldrb	r3, [r2, r3]
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d9a:	6810      	ldr	r0, [r2, #0]
}
 8000d9c:	40d8      	lsrs	r0, r3
 8000d9e:	4770      	bx	lr
 8000da0:	40023800 	.word	0x40023800
 8000da4:	08002711 	.word	0x08002711
 8000da8:	20000008 	.word	0x20000008

08000dac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dac:	6a03      	ldr	r3, [r0, #32]
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000db4:	6a03      	ldr	r3, [r0, #32]
{
 8000db6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000db8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000dba:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000dbc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000dbe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000dc2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000dc4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000dc6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000dca:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000dcc:	4d0a      	ldr	r5, [pc, #40]	; (8000df8 <TIM_OC1_SetConfig+0x4c>)
 8000dce:	42a8      	cmp	r0, r5
 8000dd0:	d10b      	bne.n	8000dea <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000dd2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dd4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000dd6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000dda:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ddc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000dde:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000de2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000de4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000de8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dea:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000dec:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000dee:	684a      	ldr	r2, [r1, #4]
 8000df0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000df2:	6203      	str	r3, [r0, #32]
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
 8000df6:	bf00      	nop
 8000df8:	40010000 	.word	0x40010000

08000dfc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000dfc:	6a03      	ldr	r3, [r0, #32]
 8000dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e02:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e04:	6a03      	ldr	r3, [r0, #32]
{
 8000e06:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e08:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e0a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000e0e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e12:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e14:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e1e:	4d0b      	ldr	r5, [pc, #44]	; (8000e4c <TIM_OC3_SetConfig+0x50>)
 8000e20:	42a8      	cmp	r0, r5
 8000e22:	d10d      	bne.n	8000e40 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e24:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e26:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e2c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e30:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e32:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e36:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e3c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e40:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e42:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e44:	684a      	ldr	r2, [r1, #4]
 8000e46:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e48:	6203      	str	r3, [r0, #32]
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	40010000 	.word	0x40010000

08000e50 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e50:	6a03      	ldr	r3, [r0, #32]
 8000e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e58:	6a03      	ldr	r3, [r0, #32]
{
 8000e5a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e5c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e5e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e62:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e6a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e74:	4d06      	ldr	r5, [pc, #24]	; (8000e90 <TIM_OC4_SetConfig+0x40>)
 8000e76:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e78:	bf02      	ittt	eq
 8000e7a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e7c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e80:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e84:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000e86:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e88:	684a      	ldr	r2, [r1, #4]
 8000e8a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e8c:	6203      	str	r3, [r0, #32]
 8000e8e:	bd30      	pop	{r4, r5, pc}
 8000e90:	40010000 	.word	0x40010000

08000e94 <HAL_TIM_Encoder_Start>:
{
 8000e94:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8000e96:	b189      	cbz	r1, 8000ebc <HAL_TIM_Encoder_Start+0x28>
 8000e98:	2904      	cmp	r1, #4
 8000e9a:	d007      	beq.n	8000eac <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8000e9c:	6a1a      	ldr	r2, [r3, #32]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000ea4:	6a1a      	ldr	r2, [r3, #32]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000eac:	6a1a      	ldr	r2, [r3, #32]
 8000eae:	f022 0210 	bic.w	r2, r2, #16
 8000eb2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000eb4:	6a1a      	ldr	r2, [r3, #32]
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	e006      	b.n	8000eca <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000ed8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000edc:	2b01      	cmp	r3, #1
{
 8000ede:	b570      	push	{r4, r5, r6, lr}
 8000ee0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000ee4:	d01c      	beq.n	8000f20 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000ee6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000eea:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000ef2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ef4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000ef8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000efc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000efe:	680a      	ldr	r2, [r1, #0]
 8000f00:	2a40      	cmp	r2, #64	; 0x40
 8000f02:	d079      	beq.n	8000ff8 <HAL_TIM_ConfigClockSource+0x120>
 8000f04:	d819      	bhi.n	8000f3a <HAL_TIM_ConfigClockSource+0x62>
 8000f06:	2a10      	cmp	r2, #16
 8000f08:	f000 8093 	beq.w	8001032 <HAL_TIM_ConfigClockSource+0x15a>
 8000f0c:	d80a      	bhi.n	8000f24 <HAL_TIM_ConfigClockSource+0x4c>
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	f000 8089 	beq.w	8001026 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f20:	4618      	mov	r0, r3
}
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000f24:	2a20      	cmp	r2, #32
 8000f26:	f000 808a 	beq.w	800103e <HAL_TIM_ConfigClockSource+0x166>
 8000f2a:	2a30      	cmp	r2, #48	; 0x30
 8000f2c:	d1f2      	bne.n	8000f14 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f2e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f34:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000f38:	e036      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f3a:	2a70      	cmp	r2, #112	; 0x70
 8000f3c:	d036      	beq.n	8000fac <HAL_TIM_ConfigClockSource+0xd4>
 8000f3e:	d81b      	bhi.n	8000f78 <HAL_TIM_ConfigClockSource+0xa0>
 8000f40:	2a50      	cmp	r2, #80	; 0x50
 8000f42:	d042      	beq.n	8000fca <HAL_TIM_ConfigClockSource+0xf2>
 8000f44:	2a60      	cmp	r2, #96	; 0x60
 8000f46:	d1e5      	bne.n	8000f14 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f48:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000f4a:	684d      	ldr	r5, [r1, #4]
 8000f4c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f4e:	f024 0410 	bic.w	r4, r4, #16
 8000f52:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f54:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000f56:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f58:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f60:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f64:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000f68:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f6a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f6c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f72:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000f76:	e017      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f78:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000f7c:	d011      	beq.n	8000fa2 <HAL_TIM_ConfigClockSource+0xca>
 8000f7e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f82:	d1c7      	bne.n	8000f14 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000f84:	688a      	ldr	r2, [r1, #8]
 8000f86:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000f88:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000f8a:	68c9      	ldr	r1, [r1, #12]
 8000f8c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f8e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000f92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f96:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f98:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fa0:	e002      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	e7b3      	b.n	8000f14 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fac:	688a      	ldr	r2, [r1, #8]
 8000fae:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000fb0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fb2:	68c9      	ldr	r1, [r1, #12]
 8000fb4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fb6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fbe:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000fc0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000fc2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000fc4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000fc8:	e7ee      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000fca:	684c      	ldr	r4, [r1, #4]
 8000fcc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000fce:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fd0:	6a1d      	ldr	r5, [r3, #32]
 8000fd2:	f025 0501 	bic.w	r5, r5, #1
 8000fd6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000fd8:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fda:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fe2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000fe6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000fea:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000fec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000ff2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000ff6:	e7d7      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000ff8:	684c      	ldr	r4, [r1, #4]
 8000ffa:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ffc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ffe:	6a1d      	ldr	r5, [r3, #32]
 8001000:	f025 0501 	bic.w	r5, r5, #1
 8001004:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001006:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001008:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800100c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001010:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001014:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001018:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800101a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800101c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001020:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001024:	e7c0      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001026:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001028:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800102c:	f042 0207 	orr.w	r2, r2, #7
 8001030:	e7ba      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001032:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001034:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001038:	f042 0217 	orr.w	r2, r2, #23
 800103c:	e7b4      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800103e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001040:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001044:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001048:	e7ae      	b.n	8000fa8 <HAL_TIM_ConfigClockSource+0xd0>
	...

0800104c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800104c:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 800104e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001050:	4290      	cmp	r0, r2
 8001052:	d00e      	beq.n	8001072 <TIM_Base_SetConfig+0x26>
 8001054:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001058:	d00b      	beq.n	8001072 <TIM_Base_SetConfig+0x26>
 800105a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800105e:	4290      	cmp	r0, r2
 8001060:	d007      	beq.n	8001072 <TIM_Base_SetConfig+0x26>
 8001062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001066:	4290      	cmp	r0, r2
 8001068:	d003      	beq.n	8001072 <TIM_Base_SetConfig+0x26>
 800106a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800106e:	4290      	cmp	r0, r2
 8001070:	d119      	bne.n	80010a6 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8001072:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001078:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <TIM_Base_SetConfig+0x8c>)
 800107c:	4290      	cmp	r0, r2
 800107e:	d104      	bne.n	800108a <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001080:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001086:	4313      	orrs	r3, r2
 8001088:	e018      	b.n	80010bc <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800108a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800108e:	d0f7      	beq.n	8001080 <TIM_Base_SetConfig+0x34>
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <TIM_Base_SetConfig+0x90>)
 8001092:	4290      	cmp	r0, r2
 8001094:	d0f4      	beq.n	8001080 <TIM_Base_SetConfig+0x34>
 8001096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800109a:	4290      	cmp	r0, r2
 800109c:	d0f0      	beq.n	8001080 <TIM_Base_SetConfig+0x34>
 800109e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010a2:	4290      	cmp	r0, r2
 80010a4:	d0ec      	beq.n	8001080 <TIM_Base_SetConfig+0x34>
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <TIM_Base_SetConfig+0x94>)
 80010a8:	4290      	cmp	r0, r2
 80010aa:	d0e9      	beq.n	8001080 <TIM_Base_SetConfig+0x34>
 80010ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b0:	4290      	cmp	r0, r2
 80010b2:	d0e5      	beq.n	8001080 <TIM_Base_SetConfig+0x34>
 80010b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b8:	4290      	cmp	r0, r2
 80010ba:	d0e1      	beq.n	8001080 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 80010bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010be:	688b      	ldr	r3, [r1, #8]
 80010c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80010c2:	680b      	ldr	r3, [r1, #0]
 80010c4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <TIM_Base_SetConfig+0x8c>)
 80010c8:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80010ca:	bf04      	itt	eq
 80010cc:	690b      	ldreq	r3, [r1, #16]
 80010ce:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80010d0:	2301      	movs	r3, #1
 80010d2:	6143      	str	r3, [r0, #20]
}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40000400 	.word	0x40000400
 80010e0:	40014000 	.word	0x40014000

080010e4 <HAL_TIM_Base_Init>:
{ 
 80010e4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80010e6:	4604      	mov	r4, r0
 80010e8:	b1a0      	cbz	r0, 8001114 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80010ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010f2:	b91b      	cbnz	r3, 80010fc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80010f8:	f000 fcc2 	bl	8001a80 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001102:	6820      	ldr	r0, [r4, #0]
 8001104:	1d21      	adds	r1, r4, #4
 8001106:	f7ff ffa1 	bl	800104c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800110a:	2301      	movs	r3, #1
 800110c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001110:	2000      	movs	r0, #0
 8001112:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
}
 8001116:	bd10      	pop	{r4, pc}

08001118 <HAL_TIM_PWM_Init>:
{
 8001118:	b510      	push	{r4, lr}
  if(htim == NULL)
 800111a:	4604      	mov	r4, r0
 800111c:	b1a0      	cbz	r0, 8001148 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800111e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001122:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001126:	b91b      	cbnz	r3, 8001130 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001128:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800112c:	f000 fcd2 	bl	8001ad4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001130:	2302      	movs	r3, #2
 8001132:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001136:	6820      	ldr	r0, [r4, #0]
 8001138:	1d21      	adds	r1, r4, #4
 800113a:	f7ff ff87 	bl	800104c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800113e:	2301      	movs	r3, #1
 8001140:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001144:	2000      	movs	r0, #0
 8001146:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001148:	2001      	movs	r0, #1
}  
 800114a:	bd10      	pop	{r4, pc}

0800114c <HAL_TIM_Encoder_Init>:
{
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	460c      	mov	r4, r1
  if(htim == NULL)
 8001150:	4605      	mov	r5, r0
 8001152:	2800      	cmp	r0, #0
 8001154:	d041      	beq.n	80011da <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001156:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800115a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800115e:	b91b      	cbnz	r3, 8001168 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001160:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8001164:	f000 fccc 	bl	8001b00 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001168:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 800116a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800116c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8001170:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001174:	6883      	ldr	r3, [r0, #8]
 8001176:	f023 0307 	bic.w	r3, r3, #7
 800117a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800117c:	f7ff ff66 	bl	800104c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001180:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001182:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001184:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001186:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001188:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 800118a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800118c:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800118e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001190:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001194:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001198:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800119c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800119e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80011a2:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80011a4:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011ac:	68e1      	ldr	r1, [r4, #12]
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80011b2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80011b6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80011ba:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011bc:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80011be:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011c2:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80011c4:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011c6:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80011ca:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80011cc:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80011ce:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80011d0:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80011d2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80011d6:	2000      	movs	r0, #0
 80011d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
}
 80011dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080011e0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011e0:	6a03      	ldr	r3, [r0, #32]
 80011e2:	f023 0310 	bic.w	r3, r3, #16
 80011e6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80011e8:	6a03      	ldr	r3, [r0, #32]
{
 80011ea:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 80011ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80011ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80011f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80011fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80011fc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001200:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001204:	4d0b      	ldr	r5, [pc, #44]	; (8001234 <TIM_OC2_SetConfig+0x54>)
 8001206:	42a8      	cmp	r0, r5
 8001208:	d10d      	bne.n	8001226 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800120a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800120c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800120e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001212:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001216:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001218:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800121c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800121e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001222:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001226:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001228:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800122a:	684a      	ldr	r2, [r1, #4]
 800122c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800122e:	6203      	str	r3, [r0, #32]
 8001230:	bd70      	pop	{r4, r5, r6, pc}
 8001232:	bf00      	nop
 8001234:	40010000 	.word	0x40010000

08001238 <HAL_TIM_PWM_ConfigChannel>:
{
 8001238:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800123a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800123e:	2b01      	cmp	r3, #1
{
 8001240:	4604      	mov	r4, r0
 8001242:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001246:	d025      	beq.n	8001294 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001248:	2301      	movs	r3, #1
 800124a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800124e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001252:	2a0c      	cmp	r2, #12
 8001254:	d818      	bhi.n	8001288 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001256:	e8df f002 	tbb	[pc, r2]
 800125a:	1707      	.short	0x1707
 800125c:	171e1717 	.word	0x171e1717
 8001260:	172f1717 	.word	0x172f1717
 8001264:	1717      	.short	0x1717
 8001266:	40          	.byte	0x40
 8001267:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	f7ff fd9f 	bl	8000dac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800126e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001270:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	f042 0208 	orr.w	r2, r2, #8
 8001278:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	f022 0204 	bic.w	r2, r2, #4
 8001280:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001286:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001288:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800128a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800128c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001290:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001294:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	f7ff ffa2 	bl	80011e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800129c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800129e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012b6:	e7e6      	b.n	8001286 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80012b8:	6820      	ldr	r0, [r4, #0]
 80012ba:	f7ff fd9f 	bl	8000dfc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80012be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80012c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80012c2:	69da      	ldr	r2, [r3, #28]
 80012c4:	f042 0208 	orr.w	r2, r2, #8
 80012c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80012ca:	69da      	ldr	r2, [r3, #28]
 80012cc:	f022 0204 	bic.w	r2, r2, #4
 80012d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80012d2:	69da      	ldr	r2, [r3, #28]
 80012d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012d6:	61da      	str	r2, [r3, #28]
    break;
 80012d8:	e7d6      	b.n	8001288 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80012da:	6820      	ldr	r0, [r4, #0]
 80012dc:	f7ff fdb8 	bl	8000e50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012e0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012fa:	e7ec      	b.n	80012d6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080012fc <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80012fc:	6a03      	ldr	r3, [r0, #32]
{
 80012fe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001300:	2401      	movs	r4, #1
 8001302:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001304:	ea23 0304 	bic.w	r3, r3, r4
 8001308:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800130a:	6a03      	ldr	r3, [r0, #32]
 800130c:	408a      	lsls	r2, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	6202      	str	r2, [r0, #32]
 8001312:	bd10      	pop	{r4, pc}

08001314 <HAL_TIM_PWM_Start>:
{
 8001314:	b510      	push	{r4, lr}
 8001316:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001318:	2201      	movs	r2, #1
 800131a:	6800      	ldr	r0, [r0, #0]
 800131c:	f7ff ffee 	bl	80012fc <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_TIM_PWM_Start+0x28>)
 8001324:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001326:	bf02      	ittt	eq
 8001328:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800132a:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800132e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
} 
 8001338:	2000      	movs	r0, #0
 800133a:	bd10      	pop	{r4, pc}
 800133c:	40010000 	.word	0x40010000

08001340 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001340:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001344:	2b01      	cmp	r3, #1
{
 8001346:	b510      	push	{r4, lr}
 8001348:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800134c:	d018      	beq.n	8001380 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800134e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001352:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001354:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001356:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001358:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800135a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800135e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4322      	orrs	r2, r4
 8001364:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	430a      	orrs	r2, r1
 8001372:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001374:	2301      	movs	r3, #1
 8001376:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800137a:	2300      	movs	r3, #0
 800137c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001380:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001382:	bd10      	pop	{r4, pc}

08001384 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001384:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001388:	2b01      	cmp	r3, #1
 800138a:	d01f      	beq.n	80013cc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800138c:	68cb      	ldr	r3, [r1, #12]
 800138e:	688a      	ldr	r2, [r1, #8]
 8001390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001394:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001396:	684a      	ldr	r2, [r1, #4]
 8001398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800139c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800139e:	680a      	ldr	r2, [r1, #0]
 80013a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80013a6:	690a      	ldr	r2, [r1, #16]
 80013a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80013ae:	694a      	ldr	r2, [r1, #20]
 80013b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80013b6:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80013b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013bc:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80013be:	6802      	ldr	r2, [r0, #0]
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80013c2:	2300      	movs	r3, #0
 80013c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80013c8:	4618      	mov	r0, r3
 80013ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80013cc:	2002      	movs	r0, #2
}
 80013ce:	4770      	bx	lr

080013d0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80013d4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013d6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80013d8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013da:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80013dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013e0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80013e2:	6133      	str	r3, [r6, #16]
{
 80013e4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013e6:	6883      	ldr	r3, [r0, #8]
 80013e8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80013ea:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ec:	4303      	orrs	r3, r0
 80013ee:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013f0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013f4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013f6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013fa:	430b      	orrs	r3, r1
 80013fc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80013fe:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001400:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001402:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001408:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800140a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800140e:	6173      	str	r3, [r6, #20]
 8001410:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001412:	d17c      	bne.n	800150e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001414:	429e      	cmp	r6, r3
 8001416:	d003      	beq.n	8001420 <UART_SetConfig+0x50>
 8001418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800141c:	429e      	cmp	r6, r3
 800141e:	d144      	bne.n	80014aa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001420:	f7ff fcb4 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001424:	2519      	movs	r5, #25
 8001426:	fb05 f300 	mul.w	r3, r5, r0
 800142a:	6860      	ldr	r0, [r4, #4]
 800142c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001430:	0040      	lsls	r0, r0, #1
 8001432:	fbb3 f3f0 	udiv	r3, r3, r0
 8001436:	fbb3 f3f9 	udiv	r3, r3, r9
 800143a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800143e:	f7ff fca5 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001442:	6863      	ldr	r3, [r4, #4]
 8001444:	4368      	muls	r0, r5
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fbb0 f7f3 	udiv	r7, r0, r3
 800144c:	f7ff fc9e 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001450:	6863      	ldr	r3, [r4, #4]
 8001452:	4368      	muls	r0, r5
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	fbb3 f3f9 	udiv	r3, r3, r9
 800145e:	fb09 7313 	mls	r3, r9, r3, r7
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	3332      	adds	r3, #50	; 0x32
 8001466:	fbb3 f3f9 	udiv	r3, r3, r9
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001470:	f7ff fc8c 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001474:	6862      	ldr	r2, [r4, #4]
 8001476:	4368      	muls	r0, r5
 8001478:	0052      	lsls	r2, r2, #1
 800147a:	fbb0 faf2 	udiv	sl, r0, r2
 800147e:	f7ff fc85 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	4368      	muls	r0, r5
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fbb0 f3f3 	udiv	r3, r0, r3
 800148c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001490:	fb09 a313 	mls	r3, r9, r3, sl
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	3332      	adds	r3, #50	; 0x32
 8001498:	fbb3 f3f9 	udiv	r3, r3, r9
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014a2:	443b      	add	r3, r7
 80014a4:	60b3      	str	r3, [r6, #8]
 80014a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014aa:	f7ff fc5f 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80014ae:	2519      	movs	r5, #25
 80014b0:	fb05 f300 	mul.w	r3, r5, r0
 80014b4:	6860      	ldr	r0, [r4, #4]
 80014b6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014ba:	0040      	lsls	r0, r0, #1
 80014bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80014c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80014c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80014c8:	f7ff fc50 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	4368      	muls	r0, r5
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fbb0 f7f3 	udiv	r7, r0, r3
 80014d6:	f7ff fc49 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	4368      	muls	r0, r5
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014e8:	fb09 7313 	mls	r3, r9, r3, r7
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	3332      	adds	r3, #50	; 0x32
 80014f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80014fa:	f7ff fc37 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80014fe:	6862      	ldr	r2, [r4, #4]
 8001500:	4368      	muls	r0, r5
 8001502:	0052      	lsls	r2, r2, #1
 8001504:	fbb0 faf2 	udiv	sl, r0, r2
 8001508:	f7ff fc30 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 800150c:	e7b9      	b.n	8001482 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800150e:	429e      	cmp	r6, r3
 8001510:	d002      	beq.n	8001518 <UART_SetConfig+0x148>
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <UART_SetConfig+0x230>)
 8001514:	429e      	cmp	r6, r3
 8001516:	d140      	bne.n	800159a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001518:	f7ff fc38 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 800151c:	6867      	ldr	r7, [r4, #4]
 800151e:	2519      	movs	r5, #25
 8001520:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001524:	fb05 f300 	mul.w	r3, r5, r0
 8001528:	00bf      	lsls	r7, r7, #2
 800152a:	fbb3 f3f7 	udiv	r3, r3, r7
 800152e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001532:	011f      	lsls	r7, r3, #4
 8001534:	f7ff fc2a 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001538:	6863      	ldr	r3, [r4, #4]
 800153a:	4368      	muls	r0, r5
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001542:	f7ff fc23 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	4368      	muls	r0, r5
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001550:	fbb3 f3f9 	udiv	r3, r3, r9
 8001554:	fb09 8313 	mls	r3, r9, r3, r8
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	3332      	adds	r3, #50	; 0x32
 800155c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001560:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001564:	f7ff fc12 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001568:	6862      	ldr	r2, [r4, #4]
 800156a:	4368      	muls	r0, r5
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	fbb0 faf2 	udiv	sl, r0, r2
 8001572:	f7ff fc0b 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001576:	6863      	ldr	r3, [r4, #4]
 8001578:	4368      	muls	r0, r5
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001580:	fbb3 f3f9 	udiv	r3, r3, r9
 8001584:	fb09 a313 	mls	r3, r9, r3, sl
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	3332      	adds	r3, #50	; 0x32
 800158c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	ea43 0308 	orr.w	r3, r3, r8
 8001598:	e783      	b.n	80014a2 <UART_SetConfig+0xd2>
 800159a:	f7ff fbe7 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 800159e:	6867      	ldr	r7, [r4, #4]
 80015a0:	2519      	movs	r5, #25
 80015a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015a6:	fb05 f300 	mul.w	r3, r5, r0
 80015aa:	00bf      	lsls	r7, r7, #2
 80015ac:	fbb3 f3f7 	udiv	r3, r3, r7
 80015b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b4:	011f      	lsls	r7, r3, #4
 80015b6:	f7ff fbd9 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80015ba:	6863      	ldr	r3, [r4, #4]
 80015bc:	4368      	muls	r0, r5
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	fbb0 f8f3 	udiv	r8, r0, r3
 80015c4:	f7ff fbd2 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	4368      	muls	r0, r5
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80015d6:	fb09 8313 	mls	r3, r9, r3, r8
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	3332      	adds	r3, #50	; 0x32
 80015de:	fbb3 f3f9 	udiv	r3, r3, r9
 80015e2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80015e6:	f7ff fbc1 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80015ea:	6862      	ldr	r2, [r4, #4]
 80015ec:	4368      	muls	r0, r5
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	fbb0 faf2 	udiv	sl, r0, r2
 80015f4:	f7ff fbba 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80015f8:	e7bd      	b.n	8001576 <UART_SetConfig+0x1a6>
 80015fa:	bf00      	nop
 80015fc:	40011000 	.word	0x40011000
 8001600:	40011400 	.word	0x40011400

08001604 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	4604      	mov	r4, r0
 8001608:	460e      	mov	r6, r1
 800160a:	4617      	mov	r7, r2
 800160c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800160e:	6821      	ldr	r1, [r4, #0]
 8001610:	680b      	ldr	r3, [r1, #0]
 8001612:	ea36 0303 	bics.w	r3, r6, r3
 8001616:	d101      	bne.n	800161c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001618:	2000      	movs	r0, #0
}
 800161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800161c:	1c6b      	adds	r3, r5, #1
 800161e:	d0f7      	beq.n	8001610 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001620:	b995      	cbnz	r5, 8001648 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800162a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001634:	2320      	movs	r3, #32
 8001636:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800163a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800163e:	2300      	movs	r3, #0
 8001640:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001644:	2003      	movs	r0, #3
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001648:	f7fe fff4 	bl	8000634 <HAL_GetTick>
 800164c:	1bc0      	subs	r0, r0, r7
 800164e:	4285      	cmp	r5, r0
 8001650:	d2dd      	bcs.n	800160e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001652:	e7e6      	b.n	8001622 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001654 <HAL_UART_Init>:
{
 8001654:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001656:	4604      	mov	r4, r0
 8001658:	b340      	cbz	r0, 80016ac <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800165a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800165e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001662:	b91b      	cbnz	r3, 800166c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001664:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001668:	f000 fb76 	bl	8001d58 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800166c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800166e:	2324      	movs	r3, #36	; 0x24
 8001670:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001674:	68d3      	ldr	r3, [r2, #12]
 8001676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800167a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fea7 	bl	80013d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800168a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001692:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800169a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800169e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80016a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80016a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80016aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	bd10      	pop	{r4, pc}

080016b0 <HAL_UART_Transmit>:
{
 80016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80016b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016ba:	2b20      	cmp	r3, #32
{
 80016bc:	4604      	mov	r4, r0
 80016be:	460d      	mov	r5, r1
 80016c0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80016c2:	d14f      	bne.n	8001764 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d04a      	beq.n	800175e <HAL_UART_Transmit+0xae>
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	d048      	beq.n	800175e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80016cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d047      	beq.n	8001764 <HAL_UART_Transmit+0xb4>
 80016d4:	2301      	movs	r3, #1
 80016d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016de:	2321      	movs	r3, #33	; 0x21
 80016e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80016e4:	f7fe ffa6 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016e8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80016ec:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80016ee:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80016f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b96b      	cbnz	r3, 8001714 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4632      	mov	r2, r6
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff ff80 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001704:	b9b0      	cbnz	r0, 8001734 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001706:	2320      	movs	r3, #32
 8001708:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800170c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001714:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001716:	3b01      	subs	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800171c:	68a3      	ldr	r3, [r4, #8]
 800171e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001722:	4632      	mov	r2, r6
 8001724:	463b      	mov	r3, r7
 8001726:	f04f 0180 	mov.w	r1, #128	; 0x80
 800172a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800172c:	d10e      	bne.n	800174c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800172e:	f7ff ff69 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001732:	b110      	cbz	r0, 800173a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001734:	2003      	movs	r0, #3
 8001736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800173a:	882b      	ldrh	r3, [r5, #0]
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001742:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001744:	6923      	ldr	r3, [r4, #16]
 8001746:	b943      	cbnz	r3, 800175a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001748:	3502      	adds	r5, #2
 800174a:	e7d2      	b.n	80016f2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800174c:	f7ff ff5a 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001750:	2800      	cmp	r0, #0
 8001752:	d1ef      	bne.n	8001734 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	782a      	ldrb	r2, [r5, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	3501      	adds	r5, #1
 800175c:	e7c9      	b.n	80016f2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800175e:	2001      	movs	r0, #1
 8001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001764:	2002      	movs	r0, #2
}
 8001766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800176c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800176c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	2214      	movs	r2, #20
{
 8001770:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	eb0d 0002 	add.w	r0, sp, r2
 8001776:	2100      	movs	r1, #0
 8001778:	f000 fb70 	bl	8001e5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_GPIO_Init+0x7c>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800177e:	481b      	ldr	r0, [pc, #108]	; (80017ec <MX_GPIO_Init+0x80>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001780:	2200      	movs	r2, #0
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001786:	f041 0104 	orr.w	r1, r1, #4
 800178a:	6319      	str	r1, [r3, #48]	; 0x30
 800178c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800178e:	f001 0104 	and.w	r1, r1, #4
 8001792:	9101      	str	r1, [sp, #4]
 8001794:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	9202      	str	r2, [sp, #8]
 8001798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800179e:	6319      	str	r1, [r3, #48]	; 0x30
 80017a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80017a6:	9102      	str	r1, [sp, #8]
 80017a8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	9203      	str	r2, [sp, #12]
 80017ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ae:	f041 0101 	orr.w	r1, r1, #1
 80017b2:	6319      	str	r1, [r3, #48]	; 0x30
 80017b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017b6:	f001 0101 	and.w	r1, r1, #1
 80017ba:	9103      	str	r1, [sp, #12]
 80017bc:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	9204      	str	r2, [sp, #16]
 80017c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c2:	f042 0202 	orr.w	r2, r2, #2
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	9304      	str	r3, [sp, #16]
 80017d0:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <MX_GPIO_Init+0x84>)
 80017dc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017de:	f7fe ff9f 	bl	8000720 <HAL_GPIO_Init>

}
 80017e2:	b00b      	add	sp, #44	; 0x2c
 80017e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800
 80017f0:	10210000 	.word	0x10210000

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b530      	push	{r4, r5, lr}
 80017f6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f8:	2230      	movs	r2, #48	; 0x30
 80017fa:	2100      	movs	r1, #0
 80017fc:	a808      	add	r0, sp, #32
 80017fe:	f000 fb2d 	bl	8001e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001802:	2100      	movs	r1, #0
 8001804:	2214      	movs	r2, #20
 8001806:	a803      	add	r0, sp, #12
 8001808:	f000 fb28 	bl	8001e5c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2500      	movs	r5, #0
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <SystemClock_Config+0x8c>)
 8001810:	9501      	str	r5, [sp, #4]
 8001812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001826:	9502      	str	r5, [sp, #8]
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800182e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001836:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001848:	2308      	movs	r3, #8
 800184a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800184c:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001850:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001854:	2307      	movs	r3, #7
 8001856:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001858:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185c:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185e:	f7ff f83b 	bl	80008d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001862:	230f      	movs	r3, #15
 8001864:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001866:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001870:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001872:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001876:	f7ff f9df 	bl	8000c38 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800187a:	b015      	add	sp, #84	; 0x54
 800187c:	bd30      	pop	{r4, r5, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <main>:
{
 8001888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // sa ovim startujes tajmer
 800188a:	4c2b      	ldr	r4, [pc, #172]	; (8001938 <main+0xb0>)
  while(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin));
 800188c:	4d2b      	ldr	r5, [pc, #172]	; (800193c <main+0xb4>)
  HAL_Init();
 800188e:	f7fe feab 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001892:	f7ff ffaf 	bl	80017f4 <SystemClock_Config>
  MX_GPIO_Init();
 8001896:	f7ff ff69 	bl	800176c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800189a:	f000 fa41 	bl	8001d20 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800189e:	f000 f99f 	bl	8001be0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018a2:	f000 fa05 	bl	8001cb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018a6:	f000 f8a3 	bl	80019f0 <MX_TIM3_Init>
  MX_TIM11_Init();
 80018aa:	f000 f8d1 	bl	8001a50 <MX_TIM11_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // sa ovim startujes tajmer
 80018ae:	2100      	movs	r1, #0
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fd2f 	bl	8001314 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	2200      	movs	r2, #0
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
  while(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin));
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	4628      	mov	r0, r5
 80018c2:	f7ff f803 	bl	80008cc <HAL_GPIO_ReadPin>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d1f8      	bne.n	80018bc <main+0x34>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 80018ca:	6823      	ldr	r3, [r4, #0]
  while(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin));
 80018cc:	4d1b      	ldr	r5, [pc, #108]	; (800193c <main+0xb4>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 80018ce:	2264      	movs	r2, #100	; 0x64
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(200);
 80018d2:	20c8      	movs	r0, #200	; 0xc8
 80018d4:	f7fe feb4 	bl	8000640 <HAL_Delay>
  while(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin));
 80018d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018dc:	4628      	mov	r0, r5
 80018de:	f7fe fff5 	bl	80008cc <HAL_GPIO_ReadPin>
 80018e2:	4601      	mov	r1, r0
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d1f7      	bne.n	80018d8 <main+0x50>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80018e8:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80018ea:	4815      	ldr	r0, [pc, #84]	; (8001940 <main+0xb8>)
	  snprintf(p, sizeof(p), "%d\n\r", __HAL_TIM_GET_COUNTER(&htim3));
 80018ec:	4e14      	ldr	r6, [pc, #80]	; (8001940 <main+0xb8>)
 80018ee:	4d15      	ldr	r5, [pc, #84]	; (8001944 <main+0xbc>)
	  HAL_UART_Transmit(&huart2, p, strlen(p),10);
 80018f0:	4c15      	ldr	r4, [pc, #84]	; (8001948 <main+0xc0>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80018f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80018f8:	f7ff facc 	bl	8000e94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80018fc:	2104      	movs	r1, #4
 80018fe:	4810      	ldr	r0, [pc, #64]	; (8001940 <main+0xb8>)
 8001900:	f7ff fac8 	bl	8000e94 <HAL_TIM_Encoder_Start>
	  char p[20] = "";
 8001904:	2100      	movs	r1, #0
 8001906:	2210      	movs	r2, #16
 8001908:	a802      	add	r0, sp, #8
 800190a:	9101      	str	r1, [sp, #4]
 800190c:	f000 faa6 	bl	8001e5c <memset>
	  snprintf(p, sizeof(p), "%d\n\r", __HAL_TIM_GET_COUNTER(&htim3));
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	462a      	mov	r2, r5
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2114      	movs	r1, #20
 8001918:	a801      	add	r0, sp, #4
 800191a:	f000 faa7 	bl	8001e6c <sniprintf>
	  HAL_UART_Transmit(&huart2, p, strlen(p),10);
 800191e:	a801      	add	r0, sp, #4
 8001920:	f7fe fc5e 	bl	80001e0 <strlen>
 8001924:	230a      	movs	r3, #10
 8001926:	b282      	uxth	r2, r0
 8001928:	a901      	add	r1, sp, #4
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fec0 	bl	80016b0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001930:	2064      	movs	r0, #100	; 0x64
 8001932:	f7fe fe85 	bl	8000640 <HAL_Delay>
 8001936:	e7e5      	b.n	8001904 <main+0x7c>
 8001938:	20000150 	.word	0x20000150
 800193c:	40020800 	.word	0x40020800
 8001940:	2000009c 	.word	0x2000009c
 8001944:	080026fc 	.word	0x080026fc
 8001948:	2000018c 	.word	0x2000018c

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	4770      	bx	lr
	...

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_MspInit+0x3c>)
 8001954:	2100      	movs	r1, #0
 8001956:	9100      	str	r1, [sp, #0]
 8001958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800195a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800195e:	645a      	str	r2, [r3, #68]	; 0x44
 8001960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001962:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	9101      	str	r1, [sp, #4]
 800196c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800197c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001980:	f7fe fe72 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001984:	b003      	add	sp, #12
 8001986:	f85d fb04 	ldr.w	pc, [sp], #4
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <NMI_Handler>:
 8001990:	4770      	bx	lr

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	e7fe      	b.n	8001998 <UsageFault_Handler>

0800199a <SVC_Handler>:
 800199a:	4770      	bx	lr

0800199c <DebugMon_Handler>:
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f7fe be3c 	b.w	800061c <HAL_IncTick>

080019a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	490f      	ldr	r1, [pc, #60]	; (80019e4 <SystemInit+0x40>)
 80019a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <SystemInit+0x44>)
 80019b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019b6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80019be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80019c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <SystemInit+0x48>)
 80019ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019de:	608b      	str	r3, [r1, #8]
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	24003010 	.word	0x24003010

080019f0 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019f0:	b510      	push	{r4, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f4:	2224      	movs	r2, #36	; 0x24
 80019f6:	2100      	movs	r1, #0
 80019f8:	a803      	add	r0, sp, #12
 80019fa:	f000 fa2f 	bl	8001e5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
 80019fe:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_TIM3_Init+0x58>)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_TIM3_Init+0x5c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a02:	2400      	movs	r4, #0
  htim3.Init.Prescaler = 0;
 8001a04:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 60000;
 8001a08:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001a0c:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a0e:	2303      	movs	r3, #3
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a10:	2201      	movs	r2, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a12:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 8;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 8;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a14:	a903      	add	r1, sp, #12
  sConfig.IC1Filter = 8;
 8001a16:	2308      	movs	r3, #8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	9401      	str	r4, [sp, #4]
 8001a1a:	9402      	str	r4, [sp, #8]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	6084      	str	r4, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	6104      	str	r4, [r0, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a20:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 8;
 8001a22:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a24:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 8;
 8001a26:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a28:	f7ff fb90 	bl	800114c <HAL_TIM_Encoder_Init>
 8001a2c:	b108      	cbz	r0, 8001a32 <MX_TIM3_Init+0x42>
  {
    Error_Handler();
 8001a2e:	f7ff ff8d 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a32:	a901      	add	r1, sp, #4
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_TIM3_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a38:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3a:	f7ff fc81 	bl	8001340 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	b108      	cbz	r0, 8001a44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a40:	f7ff ff84 	bl	800194c <Error_Handler>
  }

}
 8001a44:	b00c      	add	sp, #48	; 0x30
 8001a46:	bd10      	pop	{r4, pc}
 8001a48:	2000009c 	.word	0x2000009c
 8001a4c:	40000400 	.word	0x40000400

08001a50 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{

  htim11.Instance = TIM11;
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <MX_TIM11_Init+0x28>)
  htim11.Init.Prescaler = 84;
 8001a52:	490a      	ldr	r1, [pc, #40]	; (8001a7c <MX_TIM11_Init+0x2c>)
{
 8001a54:	b508      	push	{r3, lr}
  htim11.Init.Prescaler = 84;
 8001a56:	2354      	movs	r3, #84	; 0x54
 8001a58:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 1000;
 8001a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	2300      	movs	r3, #0
 8001a62:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 1000;
 8001a64:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a66:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a68:	f7ff fb3c 	bl	80010e4 <HAL_TIM_Base_Init>
 8001a6c:	b118      	cbz	r0, 8001a76 <MX_TIM11_Init+0x26>
  {
    Error_Handler();
  }

}
 8001a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a72:	f7ff bf6b 	b.w	800194c <Error_Handler>
 8001a76:	bd08      	pop	{r3, pc}
 8001a78:	200000d8 	.word	0x200000d8
 8001a7c:	40014800 	.word	0x40014800

08001a80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a84:	4293      	cmp	r3, r2
{
 8001a86:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001a88:	d10d      	bne.n	8001aa6 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_TIM_Base_MspInit+0x4c>)
 8001a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001aa2:	b002      	add	sp, #8
 8001aa4:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM11)
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_TIM_Base_MspInit+0x50>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d1fa      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_TIM_Base_MspInit+0x4c>)
 8001ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ab4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	9b01      	ldr	r3, [sp, #4]
}
 8001ac4:	e7ed      	b.n	8001aa2 <HAL_TIM_Base_MspInit+0x22>
 8001ac6:	bf00      	nop
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40014800 	.word	0x40014800

08001ad4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8001ad4:	6803      	ldr	r3, [r0, #0]
 8001ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001ada:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM2)
 8001adc:	d10b      	bne.n	8001af6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_TIM_PWM_MspInit+0x28>)
 8001ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001af6:	b002      	add	sp, #8
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b00:	b510      	push	{r4, lr}
 8001b02:	4604      	mov	r4, r0
 8001b04:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	2214      	movs	r2, #20
 8001b08:	2100      	movs	r1, #0
 8001b0a:	a803      	add	r0, sp, #12
 8001b0c:	f000 f9a6 	bl	8001e5c <memset>
  if(tim_encoderHandle->Instance==TIM3)
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x60>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d121      	bne.n	8001b5c <HAL_TIM_Encoder_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b18:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	9101      	str	r1, [sp, #4]
 8001b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	4810      	ldr	r0, [pc, #64]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x64>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b24:	f042 0202 	orr.w	r2, r2, #2
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2c:	f002 0202 	and.w	r2, r2, #2
 8001b30:	9201      	str	r2, [sp, #4]
 8001b32:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	9102      	str	r1, [sp, #8]
 8001b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b48:	23c0      	movs	r3, #192	; 0xc0
 8001b4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4c:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b54:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f7fe fde2 	bl	8000720 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b5c:	b008      	add	sp, #32
 8001b5e:	bd10      	pop	{r4, pc}
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40020000 	.word	0x40020000

08001b68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	2214      	movs	r2, #20
 8001b70:	2100      	movs	r1, #0
 8001b72:	a803      	add	r0, sp, #12
 8001b74:	f000 f972 	bl	8001e5c <memset>
  if(timHandle->Instance==TIM1)
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <HAL_TIM_MspPostInit+0x6c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d118      	bne.n	8001bb2 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_TIM_MspPostInit+0x70>)
 8001b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b98:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba4:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	480d      	ldr	r0, [pc, #52]	; (8001bdc <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f7fe fdb9 	bl	8000720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bae:	b008      	add	sp, #32
 8001bb0:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM2)
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb6:	d1fa      	bne.n	8001bae <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_TIM_MspPostInit+0x70>)
 8001bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e7e3      	b.n	8001b9c <HAL_TIM_MspPostInit+0x34>
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000

08001be0 <MX_TIM1_Init>:
{
 8001be0:	b510      	push	{r4, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	2210      	movs	r2, #16
 8001be8:	2100      	movs	r1, #0
 8001bea:	a802      	add	r0, sp, #8
 8001bec:	f000 f936 	bl	8001e5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf0:	221c      	movs	r2, #28
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	9400      	str	r4, [sp, #0]
 8001bf8:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfa:	f000 f92f 	bl	8001e5c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bfe:	221c      	movs	r2, #28
 8001c00:	4621      	mov	r1, r4
 8001c02:	a80d      	add	r0, sp, #52	; 0x34
 8001c04:	f000 f92a 	bl	8001e5c <memset>
  htim1.Instance = TIM1;
 8001c08:	4827      	ldr	r0, [pc, #156]	; (8001ca8 <MX_TIM1_Init+0xc8>)
  htim1.Init.Prescaler = 4;
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <MX_TIM1_Init+0xcc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 4;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 1000;
 8001c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c18:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1c:	6144      	str	r4, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c1e:	f7ff fa61 	bl	80010e4 <HAL_TIM_Base_Init>
 8001c22:	b108      	cbz	r0, 8001c28 <MX_TIM1_Init+0x48>
    Error_Handler();
 8001c24:	f7ff fe92 	bl	800194c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c2c:	a902      	add	r1, sp, #8
 8001c2e:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <MX_TIM1_Init+0xc8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c30:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c32:	f7ff f951 	bl	8000ed8 <HAL_TIM_ConfigClockSource>
 8001c36:	b108      	cbz	r0, 8001c3c <MX_TIM1_Init+0x5c>
    Error_Handler();
 8001c38:	f7ff fe88 	bl	800194c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c3c:	481a      	ldr	r0, [pc, #104]	; (8001ca8 <MX_TIM1_Init+0xc8>)
 8001c3e:	f7ff fa6b 	bl	8001118 <HAL_TIM_PWM_Init>
 8001c42:	b108      	cbz	r0, 8001c48 <MX_TIM1_Init+0x68>
    Error_Handler();
 8001c44:	f7ff fe82 	bl	800194c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4a:	4669      	mov	r1, sp
 8001c4c:	4816      	ldr	r0, [pc, #88]	; (8001ca8 <MX_TIM1_Init+0xc8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c52:	f7ff fb75 	bl	8001340 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	b108      	cbz	r0, 8001c5c <MX_TIM1_Init+0x7c>
    Error_Handler();
 8001c58:	f7ff fe78 	bl	800194c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	a906      	add	r1, sp, #24
 8001c62:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <MX_TIM1_Init+0xc8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8001c66:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c68:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c6e:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c70:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	f7ff fae1 	bl	8001238 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	b108      	cbz	r0, 8001c7c <MX_TIM1_Init+0x9c>
    Error_Handler();
 8001c78:	f7ff fe68 	bl	800194c <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c7c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c82:	a90d      	add	r1, sp, #52	; 0x34
 8001c84:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <MX_TIM1_Init+0xc8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c86:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c88:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c8a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c8c:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c8e:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c90:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c92:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c94:	f7ff fb76 	bl	8001384 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c98:	b108      	cbz	r0, 8001c9e <MX_TIM1_Init+0xbe>
    Error_Handler();
 8001c9a:	f7ff fe57 	bl	800194c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001c9e:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <MX_TIM1_Init+0xc8>)
 8001ca0:	f7ff ff62 	bl	8001b68 <HAL_TIM_MspPostInit>
}
 8001ca4:	b014      	add	sp, #80	; 0x50
 8001ca6:	bd10      	pop	{r4, pc}
 8001ca8:	20000114 	.word	0x20000114
 8001cac:	40010000 	.word	0x40010000

08001cb0 <MX_TIM2_Init>:
{
 8001cb0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb2:	2400      	movs	r4, #0
{
 8001cb4:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb6:	221c      	movs	r2, #28
 8001cb8:	4621      	mov	r1, r4
 8001cba:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	9401      	str	r4, [sp, #4]
 8001cbe:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc0:	f000 f8cc 	bl	8001e5c <memset>
  htim2.Instance = TIM2;
 8001cc4:	4815      	ldr	r0, [pc, #84]	; (8001d1c <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 4;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ccc:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 1000;
 8001cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 1000;
 8001cd6:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd8:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cda:	f7ff fa1d 	bl	8001118 <HAL_TIM_PWM_Init>
 8001cde:	b108      	cbz	r0, 8001ce4 <MX_TIM2_Init+0x34>
    Error_Handler();
 8001ce0:	f7ff fe34 	bl	800194c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce4:	a901      	add	r1, sp, #4
 8001ce6:	480d      	ldr	r0, [pc, #52]	; (8001d1c <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cec:	f7ff fb28 	bl	8001340 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	b108      	cbz	r0, 8001cf6 <MX_TIM2_Init+0x46>
    Error_Handler();
 8001cf2:	f7ff fe2b 	bl	800194c <Error_Handler>
  sConfigOC.Pulse = 0;
 8001cf6:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfa:	a903      	add	r1, sp, #12
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <MX_TIM2_Init+0x6c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfe:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8001d00:	9204      	str	r2, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d02:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d04:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	f7ff fa97 	bl	8001238 <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	b108      	cbz	r0, 8001d10 <MX_TIM2_Init+0x60>
    Error_Handler();
 8001d0c:	f7ff fe1e 	bl	800194c <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <MX_TIM2_Init+0x6c>)
 8001d12:	f7ff ff29 	bl	8001b68 <HAL_TIM_MspPostInit>
}
 8001d16:	b00a      	add	sp, #40	; 0x28
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000150 	.word	0x20000150

08001d20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d20:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001d22:	480b      	ldr	r0, [pc, #44]	; (8001d50 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_USART2_UART_Init+0x34>)
 8001d26:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001d2a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d2e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d30:	2300      	movs	r3, #0
 8001d32:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d34:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d36:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d38:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d3e:	f7ff fc89 	bl	8001654 <HAL_UART_Init>
 8001d42:	b118      	cbz	r0, 8001d4c <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d48:	f7ff be00 	b.w	800194c <Error_Handler>
 8001d4c:	bd08      	pop	{r3, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000018c 	.word	0x2000018c
 8001d54:	40004400 	.word	0x40004400

08001d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	2214      	movs	r2, #20
 8001d60:	2100      	movs	r1, #0
 8001d62:	a803      	add	r0, sp, #12
 8001d64:	f000 f87a 	bl	8001e5c <memset>
  if(uartHandle->Instance==USART2)
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_UART_MspInit+0x60>)
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d120      	bne.n	8001db2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d70:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001d74:	2100      	movs	r1, #0
 8001d76:	9101      	str	r1, [sp, #4]
 8001d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	4810      	ldr	r0, [pc, #64]	; (8001dbc <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
 8001d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d84:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d88:	9201      	str	r2, [sp, #4]
 8001d8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	9102      	str	r1, [sp, #8]
 8001d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001da0:	230c      	movs	r3, #12
 8001da2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001daa:	2307      	movs	r3, #7
 8001dac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f7fe fcb7 	bl	8000720 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001db2:	b008      	add	sp, #32
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	bf00      	nop
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dc6:	e003      	b.n	8001dd0 <LoopCopyDataInit>

08001dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dce:	3104      	adds	r1, #4

08001dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dd0:	480b      	ldr	r0, [pc, #44]	; (8001e00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dd8:	d3f6      	bcc.n	8001dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ddc:	e002      	b.n	8001de4 <LoopFillZerobss>

08001dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001de0:	f842 3b04 	str.w	r3, [r2], #4

08001de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001de8:	d3f9      	bcc.n	8001dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dea:	f7ff fddb 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dee:	f000 f811 	bl	8001e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df2:	f7ff fd49 	bl	8001888 <main>
  bx  lr    
 8001df6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001dfc:	0800275c 	.word	0x0800275c
  ldr  r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e04:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001e08:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001e0c:	200001d0 	.word	0x200001d0

08001e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC_IRQHandler>
	...

08001e14 <__libc_init_array>:
 8001e14:	b570      	push	{r4, r5, r6, lr}
 8001e16:	4e0d      	ldr	r6, [pc, #52]	; (8001e4c <__libc_init_array+0x38>)
 8001e18:	4c0d      	ldr	r4, [pc, #52]	; (8001e50 <__libc_init_array+0x3c>)
 8001e1a:	1ba4      	subs	r4, r4, r6
 8001e1c:	10a4      	asrs	r4, r4, #2
 8001e1e:	2500      	movs	r5, #0
 8001e20:	42a5      	cmp	r5, r4
 8001e22:	d109      	bne.n	8001e38 <__libc_init_array+0x24>
 8001e24:	4e0b      	ldr	r6, [pc, #44]	; (8001e54 <__libc_init_array+0x40>)
 8001e26:	4c0c      	ldr	r4, [pc, #48]	; (8001e58 <__libc_init_array+0x44>)
 8001e28:	f000 fc5c 	bl	80026e4 <_init>
 8001e2c:	1ba4      	subs	r4, r4, r6
 8001e2e:	10a4      	asrs	r4, r4, #2
 8001e30:	2500      	movs	r5, #0
 8001e32:	42a5      	cmp	r5, r4
 8001e34:	d105      	bne.n	8001e42 <__libc_init_array+0x2e>
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
 8001e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e3c:	4798      	blx	r3
 8001e3e:	3501      	adds	r5, #1
 8001e40:	e7ee      	b.n	8001e20 <__libc_init_array+0xc>
 8001e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e46:	4798      	blx	r3
 8001e48:	3501      	adds	r5, #1
 8001e4a:	e7f2      	b.n	8001e32 <__libc_init_array+0x1e>
 8001e4c:	08002754 	.word	0x08002754
 8001e50:	08002754 	.word	0x08002754
 8001e54:	08002754 	.word	0x08002754
 8001e58:	08002758 	.word	0x08002758

08001e5c <memset>:
 8001e5c:	4402      	add	r2, r0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d100      	bne.n	8001e66 <memset+0xa>
 8001e64:	4770      	bx	lr
 8001e66:	f803 1b01 	strb.w	r1, [r3], #1
 8001e6a:	e7f9      	b.n	8001e60 <memset+0x4>

08001e6c <sniprintf>:
 8001e6c:	b40c      	push	{r2, r3}
 8001e6e:	b530      	push	{r4, r5, lr}
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <sniprintf+0x64>)
 8001e72:	1e0c      	subs	r4, r1, #0
 8001e74:	b09d      	sub	sp, #116	; 0x74
 8001e76:	681d      	ldr	r5, [r3, #0]
 8001e78:	da08      	bge.n	8001e8c <sniprintf+0x20>
 8001e7a:	238b      	movs	r3, #139	; 0x8b
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e82:	b01d      	add	sp, #116	; 0x74
 8001e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e88:	b002      	add	sp, #8
 8001e8a:	4770      	bx	lr
 8001e8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001e90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001e94:	bf14      	ite	ne
 8001e96:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001e9a:	4623      	moveq	r3, r4
 8001e9c:	9304      	str	r3, [sp, #16]
 8001e9e:	9307      	str	r3, [sp, #28]
 8001ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea4:	9002      	str	r0, [sp, #8]
 8001ea6:	9006      	str	r0, [sp, #24]
 8001ea8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001eac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001eae:	ab21      	add	r3, sp, #132	; 0x84
 8001eb0:	a902      	add	r1, sp, #8
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	f000 f869 	bl	8001f8c <_svfiprintf_r>
 8001eba:	1c43      	adds	r3, r0, #1
 8001ebc:	bfbc      	itt	lt
 8001ebe:	238b      	movlt	r3, #139	; 0x8b
 8001ec0:	602b      	strlt	r3, [r5, #0]
 8001ec2:	2c00      	cmp	r4, #0
 8001ec4:	d0dd      	beq.n	8001e82 <sniprintf+0x16>
 8001ec6:	9b02      	ldr	r3, [sp, #8]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	e7d9      	b.n	8001e82 <sniprintf+0x16>
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c

08001ed4 <__ssputs_r>:
 8001ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed8:	688e      	ldr	r6, [r1, #8]
 8001eda:	429e      	cmp	r6, r3
 8001edc:	4682      	mov	sl, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4691      	mov	r9, r2
 8001ee2:	4698      	mov	r8, r3
 8001ee4:	d835      	bhi.n	8001f52 <__ssputs_r+0x7e>
 8001ee6:	898a      	ldrh	r2, [r1, #12]
 8001ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001eec:	d031      	beq.n	8001f52 <__ssputs_r+0x7e>
 8001eee:	6825      	ldr	r5, [r4, #0]
 8001ef0:	6909      	ldr	r1, [r1, #16]
 8001ef2:	1a6f      	subs	r7, r5, r1
 8001ef4:	6965      	ldr	r5, [r4, #20]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001efc:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f00:	f108 0301 	add.w	r3, r8, #1
 8001f04:	443b      	add	r3, r7
 8001f06:	429d      	cmp	r5, r3
 8001f08:	bf38      	it	cc
 8001f0a:	461d      	movcc	r5, r3
 8001f0c:	0553      	lsls	r3, r2, #21
 8001f0e:	d531      	bpl.n	8001f74 <__ssputs_r+0xa0>
 8001f10:	4629      	mov	r1, r5
 8001f12:	f000 fb39 	bl	8002588 <_malloc_r>
 8001f16:	4606      	mov	r6, r0
 8001f18:	b950      	cbnz	r0, 8001f30 <__ssputs_r+0x5c>
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	f8ca 3000 	str.w	r3, [sl]
 8001f20:	89a3      	ldrh	r3, [r4, #12]
 8001f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f26:	81a3      	strh	r3, [r4, #12]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f30:	463a      	mov	r2, r7
 8001f32:	6921      	ldr	r1, [r4, #16]
 8001f34:	f000 fab4 	bl	80024a0 <memcpy>
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	81a3      	strh	r3, [r4, #12]
 8001f44:	6126      	str	r6, [r4, #16]
 8001f46:	6165      	str	r5, [r4, #20]
 8001f48:	443e      	add	r6, r7
 8001f4a:	1bed      	subs	r5, r5, r7
 8001f4c:	6026      	str	r6, [r4, #0]
 8001f4e:	60a5      	str	r5, [r4, #8]
 8001f50:	4646      	mov	r6, r8
 8001f52:	4546      	cmp	r6, r8
 8001f54:	bf28      	it	cs
 8001f56:	4646      	movcs	r6, r8
 8001f58:	4632      	mov	r2, r6
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	f000 faaa 	bl	80024b6 <memmove>
 8001f62:	68a3      	ldr	r3, [r4, #8]
 8001f64:	1b9b      	subs	r3, r3, r6
 8001f66:	60a3      	str	r3, [r4, #8]
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	441e      	add	r6, r3
 8001f6c:	6026      	str	r6, [r4, #0]
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f74:	462a      	mov	r2, r5
 8001f76:	f000 fb65 	bl	8002644 <_realloc_r>
 8001f7a:	4606      	mov	r6, r0
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d1e1      	bne.n	8001f44 <__ssputs_r+0x70>
 8001f80:	6921      	ldr	r1, [r4, #16]
 8001f82:	4650      	mov	r0, sl
 8001f84:	f000 fab2 	bl	80024ec <_free_r>
 8001f88:	e7c7      	b.n	8001f1a <__ssputs_r+0x46>
	...

08001f8c <_svfiprintf_r>:
 8001f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f90:	b09d      	sub	sp, #116	; 0x74
 8001f92:	4680      	mov	r8, r0
 8001f94:	9303      	str	r3, [sp, #12]
 8001f96:	898b      	ldrh	r3, [r1, #12]
 8001f98:	061c      	lsls	r4, r3, #24
 8001f9a:	460d      	mov	r5, r1
 8001f9c:	4616      	mov	r6, r2
 8001f9e:	d50f      	bpl.n	8001fc0 <_svfiprintf_r+0x34>
 8001fa0:	690b      	ldr	r3, [r1, #16]
 8001fa2:	b96b      	cbnz	r3, 8001fc0 <_svfiprintf_r+0x34>
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	f000 faef 	bl	8002588 <_malloc_r>
 8001faa:	6028      	str	r0, [r5, #0]
 8001fac:	6128      	str	r0, [r5, #16]
 8001fae:	b928      	cbnz	r0, 8001fbc <_svfiprintf_r+0x30>
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	f8c8 3000 	str.w	r3, [r8]
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fba:	e0c5      	b.n	8002148 <_svfiprintf_r+0x1bc>
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	616b      	str	r3, [r5, #20]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fca:	2330      	movs	r3, #48	; 0x30
 8001fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fd0:	f04f 0b01 	mov.w	fp, #1
 8001fd4:	4637      	mov	r7, r6
 8001fd6:	463c      	mov	r4, r7
 8001fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d13c      	bne.n	800205a <_svfiprintf_r+0xce>
 8001fe0:	ebb7 0a06 	subs.w	sl, r7, r6
 8001fe4:	d00b      	beq.n	8001ffe <_svfiprintf_r+0x72>
 8001fe6:	4653      	mov	r3, sl
 8001fe8:	4632      	mov	r2, r6
 8001fea:	4629      	mov	r1, r5
 8001fec:	4640      	mov	r0, r8
 8001fee:	f7ff ff71 	bl	8001ed4 <__ssputs_r>
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	f000 80a3 	beq.w	800213e <_svfiprintf_r+0x1b2>
 8001ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ffa:	4453      	add	r3, sl
 8001ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ffe:	783b      	ldrb	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 809c 	beq.w	800213e <_svfiprintf_r+0x1b2>
 8002006:	2300      	movs	r3, #0
 8002008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800200c:	9304      	str	r3, [sp, #16]
 800200e:	9307      	str	r3, [sp, #28]
 8002010:	9205      	str	r2, [sp, #20]
 8002012:	9306      	str	r3, [sp, #24]
 8002014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002018:	931a      	str	r3, [sp, #104]	; 0x68
 800201a:	2205      	movs	r2, #5
 800201c:	7821      	ldrb	r1, [r4, #0]
 800201e:	4850      	ldr	r0, [pc, #320]	; (8002160 <_svfiprintf_r+0x1d4>)
 8002020:	f7fe f8e6 	bl	80001f0 <memchr>
 8002024:	1c67      	adds	r7, r4, #1
 8002026:	9b04      	ldr	r3, [sp, #16]
 8002028:	b9d8      	cbnz	r0, 8002062 <_svfiprintf_r+0xd6>
 800202a:	06d9      	lsls	r1, r3, #27
 800202c:	bf44      	itt	mi
 800202e:	2220      	movmi	r2, #32
 8002030:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002034:	071a      	lsls	r2, r3, #28
 8002036:	bf44      	itt	mi
 8002038:	222b      	movmi	r2, #43	; 0x2b
 800203a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800203e:	7822      	ldrb	r2, [r4, #0]
 8002040:	2a2a      	cmp	r2, #42	; 0x2a
 8002042:	d016      	beq.n	8002072 <_svfiprintf_r+0xe6>
 8002044:	9a07      	ldr	r2, [sp, #28]
 8002046:	2100      	movs	r1, #0
 8002048:	200a      	movs	r0, #10
 800204a:	4627      	mov	r7, r4
 800204c:	3401      	adds	r4, #1
 800204e:	783b      	ldrb	r3, [r7, #0]
 8002050:	3b30      	subs	r3, #48	; 0x30
 8002052:	2b09      	cmp	r3, #9
 8002054:	d951      	bls.n	80020fa <_svfiprintf_r+0x16e>
 8002056:	b1c9      	cbz	r1, 800208c <_svfiprintf_r+0x100>
 8002058:	e011      	b.n	800207e <_svfiprintf_r+0xf2>
 800205a:	2b25      	cmp	r3, #37	; 0x25
 800205c:	d0c0      	beq.n	8001fe0 <_svfiprintf_r+0x54>
 800205e:	4627      	mov	r7, r4
 8002060:	e7b9      	b.n	8001fd6 <_svfiprintf_r+0x4a>
 8002062:	4a3f      	ldr	r2, [pc, #252]	; (8002160 <_svfiprintf_r+0x1d4>)
 8002064:	1a80      	subs	r0, r0, r2
 8002066:	fa0b f000 	lsl.w	r0, fp, r0
 800206a:	4318      	orrs	r0, r3
 800206c:	9004      	str	r0, [sp, #16]
 800206e:	463c      	mov	r4, r7
 8002070:	e7d3      	b.n	800201a <_svfiprintf_r+0x8e>
 8002072:	9a03      	ldr	r2, [sp, #12]
 8002074:	1d11      	adds	r1, r2, #4
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	9103      	str	r1, [sp, #12]
 800207a:	2a00      	cmp	r2, #0
 800207c:	db01      	blt.n	8002082 <_svfiprintf_r+0xf6>
 800207e:	9207      	str	r2, [sp, #28]
 8002080:	e004      	b.n	800208c <_svfiprintf_r+0x100>
 8002082:	4252      	negs	r2, r2
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	9207      	str	r2, [sp, #28]
 800208a:	9304      	str	r3, [sp, #16]
 800208c:	783b      	ldrb	r3, [r7, #0]
 800208e:	2b2e      	cmp	r3, #46	; 0x2e
 8002090:	d10e      	bne.n	80020b0 <_svfiprintf_r+0x124>
 8002092:	787b      	ldrb	r3, [r7, #1]
 8002094:	2b2a      	cmp	r3, #42	; 0x2a
 8002096:	f107 0101 	add.w	r1, r7, #1
 800209a:	d132      	bne.n	8002102 <_svfiprintf_r+0x176>
 800209c:	9b03      	ldr	r3, [sp, #12]
 800209e:	1d1a      	adds	r2, r3, #4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	9203      	str	r2, [sp, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bfb8      	it	lt
 80020a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80020ac:	3702      	adds	r7, #2
 80020ae:	9305      	str	r3, [sp, #20]
 80020b0:	4c2c      	ldr	r4, [pc, #176]	; (8002164 <_svfiprintf_r+0x1d8>)
 80020b2:	7839      	ldrb	r1, [r7, #0]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7fe f89a 	bl	80001f0 <memchr>
 80020bc:	b138      	cbz	r0, 80020ce <_svfiprintf_r+0x142>
 80020be:	2340      	movs	r3, #64	; 0x40
 80020c0:	1b00      	subs	r0, r0, r4
 80020c2:	fa03 f000 	lsl.w	r0, r3, r0
 80020c6:	9b04      	ldr	r3, [sp, #16]
 80020c8:	4303      	orrs	r3, r0
 80020ca:	9304      	str	r3, [sp, #16]
 80020cc:	3701      	adds	r7, #1
 80020ce:	7839      	ldrb	r1, [r7, #0]
 80020d0:	4825      	ldr	r0, [pc, #148]	; (8002168 <_svfiprintf_r+0x1dc>)
 80020d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020d6:	2206      	movs	r2, #6
 80020d8:	1c7e      	adds	r6, r7, #1
 80020da:	f7fe f889 	bl	80001f0 <memchr>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d035      	beq.n	800214e <_svfiprintf_r+0x1c2>
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <_svfiprintf_r+0x1e0>)
 80020e4:	b9fb      	cbnz	r3, 8002126 <_svfiprintf_r+0x19a>
 80020e6:	9b03      	ldr	r3, [sp, #12]
 80020e8:	3307      	adds	r3, #7
 80020ea:	f023 0307 	bic.w	r3, r3, #7
 80020ee:	3308      	adds	r3, #8
 80020f0:	9303      	str	r3, [sp, #12]
 80020f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020f4:	444b      	add	r3, r9
 80020f6:	9309      	str	r3, [sp, #36]	; 0x24
 80020f8:	e76c      	b.n	8001fd4 <_svfiprintf_r+0x48>
 80020fa:	fb00 3202 	mla	r2, r0, r2, r3
 80020fe:	2101      	movs	r1, #1
 8002100:	e7a3      	b.n	800204a <_svfiprintf_r+0xbe>
 8002102:	2300      	movs	r3, #0
 8002104:	9305      	str	r3, [sp, #20]
 8002106:	4618      	mov	r0, r3
 8002108:	240a      	movs	r4, #10
 800210a:	460f      	mov	r7, r1
 800210c:	3101      	adds	r1, #1
 800210e:	783a      	ldrb	r2, [r7, #0]
 8002110:	3a30      	subs	r2, #48	; 0x30
 8002112:	2a09      	cmp	r2, #9
 8002114:	d903      	bls.n	800211e <_svfiprintf_r+0x192>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ca      	beq.n	80020b0 <_svfiprintf_r+0x124>
 800211a:	9005      	str	r0, [sp, #20]
 800211c:	e7c8      	b.n	80020b0 <_svfiprintf_r+0x124>
 800211e:	fb04 2000 	mla	r0, r4, r0, r2
 8002122:	2301      	movs	r3, #1
 8002124:	e7f1      	b.n	800210a <_svfiprintf_r+0x17e>
 8002126:	ab03      	add	r3, sp, #12
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	462a      	mov	r2, r5
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <_svfiprintf_r+0x1e4>)
 800212e:	a904      	add	r1, sp, #16
 8002130:	4640      	mov	r0, r8
 8002132:	f3af 8000 	nop.w
 8002136:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800213a:	4681      	mov	r9, r0
 800213c:	d1d9      	bne.n	80020f2 <_svfiprintf_r+0x166>
 800213e:	89ab      	ldrh	r3, [r5, #12]
 8002140:	065b      	lsls	r3, r3, #25
 8002142:	f53f af38 	bmi.w	8001fb6 <_svfiprintf_r+0x2a>
 8002146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002148:	b01d      	add	sp, #116	; 0x74
 800214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800214e:	ab03      	add	r3, sp, #12
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	462a      	mov	r2, r5
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <_svfiprintf_r+0x1e4>)
 8002156:	a904      	add	r1, sp, #16
 8002158:	4640      	mov	r0, r8
 800215a:	f000 f881 	bl	8002260 <_printf_i>
 800215e:	e7ea      	b.n	8002136 <_svfiprintf_r+0x1aa>
 8002160:	08002719 	.word	0x08002719
 8002164:	0800271f 	.word	0x0800271f
 8002168:	08002723 	.word	0x08002723
 800216c:	00000000 	.word	0x00000000
 8002170:	08001ed5 	.word	0x08001ed5

08002174 <_printf_common>:
 8002174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002178:	4691      	mov	r9, r2
 800217a:	461f      	mov	r7, r3
 800217c:	688a      	ldr	r2, [r1, #8]
 800217e:	690b      	ldr	r3, [r1, #16]
 8002180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002184:	4293      	cmp	r3, r2
 8002186:	bfb8      	it	lt
 8002188:	4613      	movlt	r3, r2
 800218a:	f8c9 3000 	str.w	r3, [r9]
 800218e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002192:	4606      	mov	r6, r0
 8002194:	460c      	mov	r4, r1
 8002196:	b112      	cbz	r2, 800219e <_printf_common+0x2a>
 8002198:	3301      	adds	r3, #1
 800219a:	f8c9 3000 	str.w	r3, [r9]
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	0699      	lsls	r1, r3, #26
 80021a2:	bf42      	ittt	mi
 80021a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021a8:	3302      	addmi	r3, #2
 80021aa:	f8c9 3000 	strmi.w	r3, [r9]
 80021ae:	6825      	ldr	r5, [r4, #0]
 80021b0:	f015 0506 	ands.w	r5, r5, #6
 80021b4:	d107      	bne.n	80021c6 <_printf_common+0x52>
 80021b6:	f104 0a19 	add.w	sl, r4, #25
 80021ba:	68e3      	ldr	r3, [r4, #12]
 80021bc:	f8d9 2000 	ldr.w	r2, [r9]
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	429d      	cmp	r5, r3
 80021c4:	db29      	blt.n	800221a <_printf_common+0xa6>
 80021c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021ca:	6822      	ldr	r2, [r4, #0]
 80021cc:	3300      	adds	r3, #0
 80021ce:	bf18      	it	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	0692      	lsls	r2, r2, #26
 80021d4:	d42e      	bmi.n	8002234 <_printf_common+0xc0>
 80021d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021da:	4639      	mov	r1, r7
 80021dc:	4630      	mov	r0, r6
 80021de:	47c0      	blx	r8
 80021e0:	3001      	adds	r0, #1
 80021e2:	d021      	beq.n	8002228 <_printf_common+0xb4>
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	68e5      	ldr	r5, [r4, #12]
 80021e8:	f8d9 2000 	ldr.w	r2, [r9]
 80021ec:	f003 0306 	and.w	r3, r3, #6
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	bf08      	it	eq
 80021f4:	1aad      	subeq	r5, r5, r2
 80021f6:	68a3      	ldr	r3, [r4, #8]
 80021f8:	6922      	ldr	r2, [r4, #16]
 80021fa:	bf0c      	ite	eq
 80021fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002200:	2500      	movne	r5, #0
 8002202:	4293      	cmp	r3, r2
 8002204:	bfc4      	itt	gt
 8002206:	1a9b      	subgt	r3, r3, r2
 8002208:	18ed      	addgt	r5, r5, r3
 800220a:	f04f 0900 	mov.w	r9, #0
 800220e:	341a      	adds	r4, #26
 8002210:	454d      	cmp	r5, r9
 8002212:	d11b      	bne.n	800224c <_printf_common+0xd8>
 8002214:	2000      	movs	r0, #0
 8002216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800221a:	2301      	movs	r3, #1
 800221c:	4652      	mov	r2, sl
 800221e:	4639      	mov	r1, r7
 8002220:	4630      	mov	r0, r6
 8002222:	47c0      	blx	r8
 8002224:	3001      	adds	r0, #1
 8002226:	d103      	bne.n	8002230 <_printf_common+0xbc>
 8002228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800222c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002230:	3501      	adds	r5, #1
 8002232:	e7c2      	b.n	80021ba <_printf_common+0x46>
 8002234:	18e1      	adds	r1, r4, r3
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	2030      	movs	r0, #48	; 0x30
 800223a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800223e:	4422      	add	r2, r4
 8002240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002248:	3302      	adds	r3, #2
 800224a:	e7c4      	b.n	80021d6 <_printf_common+0x62>
 800224c:	2301      	movs	r3, #1
 800224e:	4622      	mov	r2, r4
 8002250:	4639      	mov	r1, r7
 8002252:	4630      	mov	r0, r6
 8002254:	47c0      	blx	r8
 8002256:	3001      	adds	r0, #1
 8002258:	d0e6      	beq.n	8002228 <_printf_common+0xb4>
 800225a:	f109 0901 	add.w	r9, r9, #1
 800225e:	e7d7      	b.n	8002210 <_printf_common+0x9c>

08002260 <_printf_i>:
 8002260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002264:	4617      	mov	r7, r2
 8002266:	7e0a      	ldrb	r2, [r1, #24]
 8002268:	b085      	sub	sp, #20
 800226a:	2a6e      	cmp	r2, #110	; 0x6e
 800226c:	4698      	mov	r8, r3
 800226e:	4606      	mov	r6, r0
 8002270:	460c      	mov	r4, r1
 8002272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002274:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002278:	f000 80bc 	beq.w	80023f4 <_printf_i+0x194>
 800227c:	d81a      	bhi.n	80022b4 <_printf_i+0x54>
 800227e:	2a63      	cmp	r2, #99	; 0x63
 8002280:	d02e      	beq.n	80022e0 <_printf_i+0x80>
 8002282:	d80a      	bhi.n	800229a <_printf_i+0x3a>
 8002284:	2a00      	cmp	r2, #0
 8002286:	f000 80c8 	beq.w	800241a <_printf_i+0x1ba>
 800228a:	2a58      	cmp	r2, #88	; 0x58
 800228c:	f000 808a 	beq.w	80023a4 <_printf_i+0x144>
 8002290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002294:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002298:	e02a      	b.n	80022f0 <_printf_i+0x90>
 800229a:	2a64      	cmp	r2, #100	; 0x64
 800229c:	d001      	beq.n	80022a2 <_printf_i+0x42>
 800229e:	2a69      	cmp	r2, #105	; 0x69
 80022a0:	d1f6      	bne.n	8002290 <_printf_i+0x30>
 80022a2:	6821      	ldr	r1, [r4, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80022aa:	d023      	beq.n	80022f4 <_printf_i+0x94>
 80022ac:	1d11      	adds	r1, r2, #4
 80022ae:	6019      	str	r1, [r3, #0]
 80022b0:	6813      	ldr	r3, [r2, #0]
 80022b2:	e027      	b.n	8002304 <_printf_i+0xa4>
 80022b4:	2a73      	cmp	r2, #115	; 0x73
 80022b6:	f000 80b4 	beq.w	8002422 <_printf_i+0x1c2>
 80022ba:	d808      	bhi.n	80022ce <_printf_i+0x6e>
 80022bc:	2a6f      	cmp	r2, #111	; 0x6f
 80022be:	d02a      	beq.n	8002316 <_printf_i+0xb6>
 80022c0:	2a70      	cmp	r2, #112	; 0x70
 80022c2:	d1e5      	bne.n	8002290 <_printf_i+0x30>
 80022c4:	680a      	ldr	r2, [r1, #0]
 80022c6:	f042 0220 	orr.w	r2, r2, #32
 80022ca:	600a      	str	r2, [r1, #0]
 80022cc:	e003      	b.n	80022d6 <_printf_i+0x76>
 80022ce:	2a75      	cmp	r2, #117	; 0x75
 80022d0:	d021      	beq.n	8002316 <_printf_i+0xb6>
 80022d2:	2a78      	cmp	r2, #120	; 0x78
 80022d4:	d1dc      	bne.n	8002290 <_printf_i+0x30>
 80022d6:	2278      	movs	r2, #120	; 0x78
 80022d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80022dc:	496e      	ldr	r1, [pc, #440]	; (8002498 <_printf_i+0x238>)
 80022de:	e064      	b.n	80023aa <_printf_i+0x14a>
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80022e6:	1d11      	adds	r1, r2, #4
 80022e8:	6019      	str	r1, [r3, #0]
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0a3      	b.n	800243c <_printf_i+0x1dc>
 80022f4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80022f8:	f102 0104 	add.w	r1, r2, #4
 80022fc:	6019      	str	r1, [r3, #0]
 80022fe:	d0d7      	beq.n	80022b0 <_printf_i+0x50>
 8002300:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da03      	bge.n	8002310 <_printf_i+0xb0>
 8002308:	222d      	movs	r2, #45	; 0x2d
 800230a:	425b      	negs	r3, r3
 800230c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002310:	4962      	ldr	r1, [pc, #392]	; (800249c <_printf_i+0x23c>)
 8002312:	220a      	movs	r2, #10
 8002314:	e017      	b.n	8002346 <_printf_i+0xe6>
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800231e:	d003      	beq.n	8002328 <_printf_i+0xc8>
 8002320:	1d08      	adds	r0, r1, #4
 8002322:	6018      	str	r0, [r3, #0]
 8002324:	680b      	ldr	r3, [r1, #0]
 8002326:	e006      	b.n	8002336 <_printf_i+0xd6>
 8002328:	f010 0f40 	tst.w	r0, #64	; 0x40
 800232c:	f101 0004 	add.w	r0, r1, #4
 8002330:	6018      	str	r0, [r3, #0]
 8002332:	d0f7      	beq.n	8002324 <_printf_i+0xc4>
 8002334:	880b      	ldrh	r3, [r1, #0]
 8002336:	4959      	ldr	r1, [pc, #356]	; (800249c <_printf_i+0x23c>)
 8002338:	2a6f      	cmp	r2, #111	; 0x6f
 800233a:	bf14      	ite	ne
 800233c:	220a      	movne	r2, #10
 800233e:	2208      	moveq	r2, #8
 8002340:	2000      	movs	r0, #0
 8002342:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002346:	6865      	ldr	r5, [r4, #4]
 8002348:	60a5      	str	r5, [r4, #8]
 800234a:	2d00      	cmp	r5, #0
 800234c:	f2c0 809c 	blt.w	8002488 <_printf_i+0x228>
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	f020 0004 	bic.w	r0, r0, #4
 8002356:	6020      	str	r0, [r4, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d13f      	bne.n	80023dc <_printf_i+0x17c>
 800235c:	2d00      	cmp	r5, #0
 800235e:	f040 8095 	bne.w	800248c <_printf_i+0x22c>
 8002362:	4675      	mov	r5, lr
 8002364:	2a08      	cmp	r2, #8
 8002366:	d10b      	bne.n	8002380 <_printf_i+0x120>
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	07da      	lsls	r2, r3, #31
 800236c:	d508      	bpl.n	8002380 <_printf_i+0x120>
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	6862      	ldr	r2, [r4, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	bfde      	ittt	le
 8002376:	2330      	movle	r3, #48	; 0x30
 8002378:	f805 3c01 	strble.w	r3, [r5, #-1]
 800237c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002380:	ebae 0305 	sub.w	r3, lr, r5
 8002384:	6123      	str	r3, [r4, #16]
 8002386:	f8cd 8000 	str.w	r8, [sp]
 800238a:	463b      	mov	r3, r7
 800238c:	aa03      	add	r2, sp, #12
 800238e:	4621      	mov	r1, r4
 8002390:	4630      	mov	r0, r6
 8002392:	f7ff feef 	bl	8002174 <_printf_common>
 8002396:	3001      	adds	r0, #1
 8002398:	d155      	bne.n	8002446 <_printf_i+0x1e6>
 800239a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800239e:	b005      	add	sp, #20
 80023a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023a4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80023a8:	493c      	ldr	r1, [pc, #240]	; (800249c <_printf_i+0x23c>)
 80023aa:	6822      	ldr	r2, [r4, #0]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80023b2:	f100 0504 	add.w	r5, r0, #4
 80023b6:	601d      	str	r5, [r3, #0]
 80023b8:	d001      	beq.n	80023be <_printf_i+0x15e>
 80023ba:	6803      	ldr	r3, [r0, #0]
 80023bc:	e002      	b.n	80023c4 <_printf_i+0x164>
 80023be:	0655      	lsls	r5, r2, #25
 80023c0:	d5fb      	bpl.n	80023ba <_printf_i+0x15a>
 80023c2:	8803      	ldrh	r3, [r0, #0]
 80023c4:	07d0      	lsls	r0, r2, #31
 80023c6:	bf44      	itt	mi
 80023c8:	f042 0220 	orrmi.w	r2, r2, #32
 80023cc:	6022      	strmi	r2, [r4, #0]
 80023ce:	b91b      	cbnz	r3, 80023d8 <_printf_i+0x178>
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	f022 0220 	bic.w	r2, r2, #32
 80023d6:	6022      	str	r2, [r4, #0]
 80023d8:	2210      	movs	r2, #16
 80023da:	e7b1      	b.n	8002340 <_printf_i+0xe0>
 80023dc:	4675      	mov	r5, lr
 80023de:	fbb3 f0f2 	udiv	r0, r3, r2
 80023e2:	fb02 3310 	mls	r3, r2, r0, r3
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023ec:	4603      	mov	r3, r0
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d1f5      	bne.n	80023de <_printf_i+0x17e>
 80023f2:	e7b7      	b.n	8002364 <_printf_i+0x104>
 80023f4:	6808      	ldr	r0, [r1, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	6949      	ldr	r1, [r1, #20]
 80023fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80023fe:	d004      	beq.n	800240a <_printf_i+0x1aa>
 8002400:	1d10      	adds	r0, r2, #4
 8002402:	6018      	str	r0, [r3, #0]
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	6019      	str	r1, [r3, #0]
 8002408:	e007      	b.n	800241a <_printf_i+0x1ba>
 800240a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800240e:	f102 0004 	add.w	r0, r2, #4
 8002412:	6018      	str	r0, [r3, #0]
 8002414:	6813      	ldr	r3, [r2, #0]
 8002416:	d0f6      	beq.n	8002406 <_printf_i+0x1a6>
 8002418:	8019      	strh	r1, [r3, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	6123      	str	r3, [r4, #16]
 800241e:	4675      	mov	r5, lr
 8002420:	e7b1      	b.n	8002386 <_printf_i+0x126>
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	1d11      	adds	r1, r2, #4
 8002426:	6019      	str	r1, [r3, #0]
 8002428:	6815      	ldr	r5, [r2, #0]
 800242a:	6862      	ldr	r2, [r4, #4]
 800242c:	2100      	movs	r1, #0
 800242e:	4628      	mov	r0, r5
 8002430:	f7fd fede 	bl	80001f0 <memchr>
 8002434:	b108      	cbz	r0, 800243a <_printf_i+0x1da>
 8002436:	1b40      	subs	r0, r0, r5
 8002438:	6060      	str	r0, [r4, #4]
 800243a:	6863      	ldr	r3, [r4, #4]
 800243c:	6123      	str	r3, [r4, #16]
 800243e:	2300      	movs	r3, #0
 8002440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002444:	e79f      	b.n	8002386 <_printf_i+0x126>
 8002446:	6923      	ldr	r3, [r4, #16]
 8002448:	462a      	mov	r2, r5
 800244a:	4639      	mov	r1, r7
 800244c:	4630      	mov	r0, r6
 800244e:	47c0      	blx	r8
 8002450:	3001      	adds	r0, #1
 8002452:	d0a2      	beq.n	800239a <_printf_i+0x13a>
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	079b      	lsls	r3, r3, #30
 8002458:	d507      	bpl.n	800246a <_printf_i+0x20a>
 800245a:	2500      	movs	r5, #0
 800245c:	f104 0919 	add.w	r9, r4, #25
 8002460:	68e3      	ldr	r3, [r4, #12]
 8002462:	9a03      	ldr	r2, [sp, #12]
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	429d      	cmp	r5, r3
 8002468:	db05      	blt.n	8002476 <_printf_i+0x216>
 800246a:	68e0      	ldr	r0, [r4, #12]
 800246c:	9b03      	ldr	r3, [sp, #12]
 800246e:	4298      	cmp	r0, r3
 8002470:	bfb8      	it	lt
 8002472:	4618      	movlt	r0, r3
 8002474:	e793      	b.n	800239e <_printf_i+0x13e>
 8002476:	2301      	movs	r3, #1
 8002478:	464a      	mov	r2, r9
 800247a:	4639      	mov	r1, r7
 800247c:	4630      	mov	r0, r6
 800247e:	47c0      	blx	r8
 8002480:	3001      	adds	r0, #1
 8002482:	d08a      	beq.n	800239a <_printf_i+0x13a>
 8002484:	3501      	adds	r5, #1
 8002486:	e7eb      	b.n	8002460 <_printf_i+0x200>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1a7      	bne.n	80023dc <_printf_i+0x17c>
 800248c:	780b      	ldrb	r3, [r1, #0]
 800248e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002496:	e765      	b.n	8002364 <_printf_i+0x104>
 8002498:	0800273b 	.word	0x0800273b
 800249c:	0800272a 	.word	0x0800272a

080024a0 <memcpy>:
 80024a0:	b510      	push	{r4, lr}
 80024a2:	1e43      	subs	r3, r0, #1
 80024a4:	440a      	add	r2, r1
 80024a6:	4291      	cmp	r1, r2
 80024a8:	d100      	bne.n	80024ac <memcpy+0xc>
 80024aa:	bd10      	pop	{r4, pc}
 80024ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024b4:	e7f7      	b.n	80024a6 <memcpy+0x6>

080024b6 <memmove>:
 80024b6:	4288      	cmp	r0, r1
 80024b8:	b510      	push	{r4, lr}
 80024ba:	eb01 0302 	add.w	r3, r1, r2
 80024be:	d803      	bhi.n	80024c8 <memmove+0x12>
 80024c0:	1e42      	subs	r2, r0, #1
 80024c2:	4299      	cmp	r1, r3
 80024c4:	d10c      	bne.n	80024e0 <memmove+0x2a>
 80024c6:	bd10      	pop	{r4, pc}
 80024c8:	4298      	cmp	r0, r3
 80024ca:	d2f9      	bcs.n	80024c0 <memmove+0xa>
 80024cc:	1881      	adds	r1, r0, r2
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	42d3      	cmn	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memmove+0x20>
 80024d4:	bd10      	pop	{r4, pc}
 80024d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80024de:	e7f7      	b.n	80024d0 <memmove+0x1a>
 80024e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80024e8:	e7eb      	b.n	80024c2 <memmove+0xc>
	...

080024ec <_free_r>:
 80024ec:	b538      	push	{r3, r4, r5, lr}
 80024ee:	4605      	mov	r5, r0
 80024f0:	2900      	cmp	r1, #0
 80024f2:	d045      	beq.n	8002580 <_free_r+0x94>
 80024f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024f8:	1f0c      	subs	r4, r1, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bfb8      	it	lt
 80024fe:	18e4      	addlt	r4, r4, r3
 8002500:	f000 f8d6 	bl	80026b0 <__malloc_lock>
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <_free_r+0x98>)
 8002506:	6813      	ldr	r3, [r2, #0]
 8002508:	4610      	mov	r0, r2
 800250a:	b933      	cbnz	r3, 800251a <_free_r+0x2e>
 800250c:	6063      	str	r3, [r4, #4]
 800250e:	6014      	str	r4, [r2, #0]
 8002510:	4628      	mov	r0, r5
 8002512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002516:	f000 b8cc 	b.w	80026b2 <__malloc_unlock>
 800251a:	42a3      	cmp	r3, r4
 800251c:	d90c      	bls.n	8002538 <_free_r+0x4c>
 800251e:	6821      	ldr	r1, [r4, #0]
 8002520:	1862      	adds	r2, r4, r1
 8002522:	4293      	cmp	r3, r2
 8002524:	bf04      	itt	eq
 8002526:	681a      	ldreq	r2, [r3, #0]
 8002528:	685b      	ldreq	r3, [r3, #4]
 800252a:	6063      	str	r3, [r4, #4]
 800252c:	bf04      	itt	eq
 800252e:	1852      	addeq	r2, r2, r1
 8002530:	6022      	streq	r2, [r4, #0]
 8002532:	6004      	str	r4, [r0, #0]
 8002534:	e7ec      	b.n	8002510 <_free_r+0x24>
 8002536:	4613      	mov	r3, r2
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	b10a      	cbz	r2, 8002540 <_free_r+0x54>
 800253c:	42a2      	cmp	r2, r4
 800253e:	d9fa      	bls.n	8002536 <_free_r+0x4a>
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	1858      	adds	r0, r3, r1
 8002544:	42a0      	cmp	r0, r4
 8002546:	d10b      	bne.n	8002560 <_free_r+0x74>
 8002548:	6820      	ldr	r0, [r4, #0]
 800254a:	4401      	add	r1, r0
 800254c:	1858      	adds	r0, r3, r1
 800254e:	4282      	cmp	r2, r0
 8002550:	6019      	str	r1, [r3, #0]
 8002552:	d1dd      	bne.n	8002510 <_free_r+0x24>
 8002554:	6810      	ldr	r0, [r2, #0]
 8002556:	6852      	ldr	r2, [r2, #4]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	4401      	add	r1, r0
 800255c:	6019      	str	r1, [r3, #0]
 800255e:	e7d7      	b.n	8002510 <_free_r+0x24>
 8002560:	d902      	bls.n	8002568 <_free_r+0x7c>
 8002562:	230c      	movs	r3, #12
 8002564:	602b      	str	r3, [r5, #0]
 8002566:	e7d3      	b.n	8002510 <_free_r+0x24>
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	1821      	adds	r1, r4, r0
 800256c:	428a      	cmp	r2, r1
 800256e:	bf04      	itt	eq
 8002570:	6811      	ldreq	r1, [r2, #0]
 8002572:	6852      	ldreq	r2, [r2, #4]
 8002574:	6062      	str	r2, [r4, #4]
 8002576:	bf04      	itt	eq
 8002578:	1809      	addeq	r1, r1, r0
 800257a:	6021      	streq	r1, [r4, #0]
 800257c:	605c      	str	r4, [r3, #4]
 800257e:	e7c7      	b.n	8002510 <_free_r+0x24>
 8002580:	bd38      	pop	{r3, r4, r5, pc}
 8002582:	bf00      	nop
 8002584:	2000008c 	.word	0x2000008c

08002588 <_malloc_r>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	1ccd      	adds	r5, r1, #3
 800258c:	f025 0503 	bic.w	r5, r5, #3
 8002590:	3508      	adds	r5, #8
 8002592:	2d0c      	cmp	r5, #12
 8002594:	bf38      	it	cc
 8002596:	250c      	movcc	r5, #12
 8002598:	2d00      	cmp	r5, #0
 800259a:	4606      	mov	r6, r0
 800259c:	db01      	blt.n	80025a2 <_malloc_r+0x1a>
 800259e:	42a9      	cmp	r1, r5
 80025a0:	d903      	bls.n	80025aa <_malloc_r+0x22>
 80025a2:	230c      	movs	r3, #12
 80025a4:	6033      	str	r3, [r6, #0]
 80025a6:	2000      	movs	r0, #0
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
 80025aa:	f000 f881 	bl	80026b0 <__malloc_lock>
 80025ae:	4a23      	ldr	r2, [pc, #140]	; (800263c <_malloc_r+0xb4>)
 80025b0:	6814      	ldr	r4, [r2, #0]
 80025b2:	4621      	mov	r1, r4
 80025b4:	b991      	cbnz	r1, 80025dc <_malloc_r+0x54>
 80025b6:	4c22      	ldr	r4, [pc, #136]	; (8002640 <_malloc_r+0xb8>)
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	b91b      	cbnz	r3, 80025c4 <_malloc_r+0x3c>
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 f867 	bl	8002690 <_sbrk_r>
 80025c2:	6020      	str	r0, [r4, #0]
 80025c4:	4629      	mov	r1, r5
 80025c6:	4630      	mov	r0, r6
 80025c8:	f000 f862 	bl	8002690 <_sbrk_r>
 80025cc:	1c43      	adds	r3, r0, #1
 80025ce:	d126      	bne.n	800261e <_malloc_r+0x96>
 80025d0:	230c      	movs	r3, #12
 80025d2:	6033      	str	r3, [r6, #0]
 80025d4:	4630      	mov	r0, r6
 80025d6:	f000 f86c 	bl	80026b2 <__malloc_unlock>
 80025da:	e7e4      	b.n	80025a6 <_malloc_r+0x1e>
 80025dc:	680b      	ldr	r3, [r1, #0]
 80025de:	1b5b      	subs	r3, r3, r5
 80025e0:	d41a      	bmi.n	8002618 <_malloc_r+0x90>
 80025e2:	2b0b      	cmp	r3, #11
 80025e4:	d90f      	bls.n	8002606 <_malloc_r+0x7e>
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	50cd      	str	r5, [r1, r3]
 80025ea:	18cc      	adds	r4, r1, r3
 80025ec:	4630      	mov	r0, r6
 80025ee:	f000 f860 	bl	80026b2 <__malloc_unlock>
 80025f2:	f104 000b 	add.w	r0, r4, #11
 80025f6:	1d23      	adds	r3, r4, #4
 80025f8:	f020 0007 	bic.w	r0, r0, #7
 80025fc:	1ac3      	subs	r3, r0, r3
 80025fe:	d01b      	beq.n	8002638 <_malloc_r+0xb0>
 8002600:	425a      	negs	r2, r3
 8002602:	50e2      	str	r2, [r4, r3]
 8002604:	bd70      	pop	{r4, r5, r6, pc}
 8002606:	428c      	cmp	r4, r1
 8002608:	bf0d      	iteet	eq
 800260a:	6863      	ldreq	r3, [r4, #4]
 800260c:	684b      	ldrne	r3, [r1, #4]
 800260e:	6063      	strne	r3, [r4, #4]
 8002610:	6013      	streq	r3, [r2, #0]
 8002612:	bf18      	it	ne
 8002614:	460c      	movne	r4, r1
 8002616:	e7e9      	b.n	80025ec <_malloc_r+0x64>
 8002618:	460c      	mov	r4, r1
 800261a:	6849      	ldr	r1, [r1, #4]
 800261c:	e7ca      	b.n	80025b4 <_malloc_r+0x2c>
 800261e:	1cc4      	adds	r4, r0, #3
 8002620:	f024 0403 	bic.w	r4, r4, #3
 8002624:	42a0      	cmp	r0, r4
 8002626:	d005      	beq.n	8002634 <_malloc_r+0xac>
 8002628:	1a21      	subs	r1, r4, r0
 800262a:	4630      	mov	r0, r6
 800262c:	f000 f830 	bl	8002690 <_sbrk_r>
 8002630:	3001      	adds	r0, #1
 8002632:	d0cd      	beq.n	80025d0 <_malloc_r+0x48>
 8002634:	6025      	str	r5, [r4, #0]
 8002636:	e7d9      	b.n	80025ec <_malloc_r+0x64>
 8002638:	bd70      	pop	{r4, r5, r6, pc}
 800263a:	bf00      	nop
 800263c:	2000008c 	.word	0x2000008c
 8002640:	20000090 	.word	0x20000090

08002644 <_realloc_r>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	4607      	mov	r7, r0
 8002648:	4614      	mov	r4, r2
 800264a:	460e      	mov	r6, r1
 800264c:	b921      	cbnz	r1, 8002658 <_realloc_r+0x14>
 800264e:	4611      	mov	r1, r2
 8002650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002654:	f7ff bf98 	b.w	8002588 <_malloc_r>
 8002658:	b922      	cbnz	r2, 8002664 <_realloc_r+0x20>
 800265a:	f7ff ff47 	bl	80024ec <_free_r>
 800265e:	4625      	mov	r5, r4
 8002660:	4628      	mov	r0, r5
 8002662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002664:	f000 f826 	bl	80026b4 <_malloc_usable_size_r>
 8002668:	4284      	cmp	r4, r0
 800266a:	d90f      	bls.n	800268c <_realloc_r+0x48>
 800266c:	4621      	mov	r1, r4
 800266e:	4638      	mov	r0, r7
 8002670:	f7ff ff8a 	bl	8002588 <_malloc_r>
 8002674:	4605      	mov	r5, r0
 8002676:	2800      	cmp	r0, #0
 8002678:	d0f2      	beq.n	8002660 <_realloc_r+0x1c>
 800267a:	4631      	mov	r1, r6
 800267c:	4622      	mov	r2, r4
 800267e:	f7ff ff0f 	bl	80024a0 <memcpy>
 8002682:	4631      	mov	r1, r6
 8002684:	4638      	mov	r0, r7
 8002686:	f7ff ff31 	bl	80024ec <_free_r>
 800268a:	e7e9      	b.n	8002660 <_realloc_r+0x1c>
 800268c:	4635      	mov	r5, r6
 800268e:	e7e7      	b.n	8002660 <_realloc_r+0x1c>

08002690 <_sbrk_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4c06      	ldr	r4, [pc, #24]	; (80026ac <_sbrk_r+0x1c>)
 8002694:	2300      	movs	r3, #0
 8002696:	4605      	mov	r5, r0
 8002698:	4608      	mov	r0, r1
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	f000 f814 	bl	80026c8 <_sbrk>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d102      	bne.n	80026aa <_sbrk_r+0x1a>
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	b103      	cbz	r3, 80026aa <_sbrk_r+0x1a>
 80026a8:	602b      	str	r3, [r5, #0]
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	200001cc 	.word	0x200001cc

080026b0 <__malloc_lock>:
 80026b0:	4770      	bx	lr

080026b2 <__malloc_unlock>:
 80026b2:	4770      	bx	lr

080026b4 <_malloc_usable_size_r>:
 80026b4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f1a0 0004 	sub.w	r0, r0, #4
 80026be:	bfbc      	itt	lt
 80026c0:	580b      	ldrlt	r3, [r1, r0]
 80026c2:	18c0      	addlt	r0, r0, r3
 80026c4:	4770      	bx	lr
	...

080026c8 <_sbrk>:
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <_sbrk+0x14>)
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	4602      	mov	r2, r0
 80026ce:	b909      	cbnz	r1, 80026d4 <_sbrk+0xc>
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <_sbrk+0x18>)
 80026d2:	6019      	str	r1, [r3, #0]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	4402      	add	r2, r0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	4770      	bx	lr
 80026dc:	20000094 	.word	0x20000094
 80026e0:	200001d0 	.word	0x200001d0

080026e4 <_init>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr

080026f0 <_fini>:
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	bf00      	nop
 80026f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f6:	bc08      	pop	{r3}
 80026f8:	469e      	mov	lr, r3
 80026fa:	4770      	bx	lr
